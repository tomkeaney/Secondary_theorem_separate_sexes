[
  {
    "objectID": "Main_analysis.html",
    "href": "Main_analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "First load the packages and build helper functions\n\n\nShow the code\nlibrary(tidyverse) # for tidy coding\nlibrary(MetBrewer) # for many nice colour palettes\nlibrary(rcartocolor) # more cool colours\nlibrary(kableExtra) # for scrolling tables\nlibrary(DT) # for interactive tables\nlibrary(patchwork) # to join multiple plots nicely\nlibrary(brms) # for bayesian models\nlibrary(tidybayes) # for more bayesian things\nlibrary(bayestestR) # for the pd metric \nlibrary(broom) # convert results of functions into tables\nlibrary(ggtext) # for markdown features in ggplot\nlibrary(ggrepel) # for plot labels in ggplot\nlibrary(ggnewscale) # to reset scales in ggplot \nlibrary(pander) # nice tables\n#library(bigsnpr) \n\n# Create a function to build HTML searchable tables\n\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Trait_data')),\n      pageLength = 100\n    )\n  )\n}"
  },
  {
    "objectID": "Main_analysis.html#selecting-data-appropriate-for-analysis",
    "href": "Main_analysis.html#selecting-data-appropriate-for-analysis",
    "title": "Analysis",
    "section": "Selecting data appropriate for analysis",
    "text": "Selecting data appropriate for analysis\nWe conducted a near-exhaustive search of the literature until January 2022, to obtain line mean estimates and associated meta-data for quantitative traits that have been measured in the DGRP. We did not include data collected for traits that had been measured in heterozygous combinations of multiple DGRP lines. To ready the data for analysis, we grouped trait values by trait and sex and standardised the data to have mean = 0 and sd = 1. Sex-specific standardised line means for each trait were then joined with their standardised fitness estimates, obtained from Wong and Holman (2023). We also include some helpful metadata for downstream analysis. We then pruned the dataset to only include traits that have been measured in single-sex cohorts, in 80 or more lines. We also removed traits included in two large datasets on the microbiome and metabolome (Everett et al. 2020 and Jin et al. 2020).\n\n\nShow the code\n# load in the data, note that traits have already been standardised\n\nDGRP_data &lt;- \n  left_join(\n    read_csv(\"data/data_collation/output/all.dgrp.phenos_scaled.csv\") %&gt;% \n      mutate(line = as.factor(line)),\n    read_csv(\"data/data_collation/output/meta_data_for_all_traits.csv\") %&gt;%\n      group_by(Reference) %&gt;% \n      mutate(study_ID = as.factor(cur_group_id()),\n             Pooled = if_else(Sex == \"Pooled\", \"Yes\", \"No\"))) %&gt;% \n  left_join(read_rds(\"data/trait_names.rds\")) %&gt;% \n  mutate(Trait_nice = case_when(Sex == \"Female\" ~ paste(Trait_nice, \"(F)\", sep = \" \"),\n                                Sex == \"Male\" ~ paste(Trait_nice, \"(M)\", sep = \" \"),\n                                .default = Trait_nice))\n  \n  \n# Apply the selection criteria with the filter() function, then add a column each for female and male fitness\n\ntrait_data &lt;-\n  DGRP_data %&gt;%  \n  filter(!str_detect(Trait, \"fitness\"),\n         `# lines measured` &gt;= 80 &\n           Pooled != \"Yes\" & \n           Reference != \"Jin et al (2020) PLOS Genetics\" & \n           Reference != \"Everett et al (2020) Genome Research\") %&gt;% \n  # join the early life fitness data from Wong and Holman\n  left_join(\n    DGRP_data %&gt;%\n      filter(str_detect(Trait, \"fitness.early.life\")) %&gt;% \n      select(line, Trait, trait_value) %&gt;% \n      pivot_wider(names_from = Trait, values_from = trait_value) %&gt;% \n      rename(female_fitness = fitness.early.life.f, male_fitness = fitness.early.life.m))\n\nclean_meta_data &lt;-\n  trait_data %&gt;% \n  select(Trait_nice, Trait, Life_stage, `Trait guild`, study_ID, Trait_nice, Reference, `Trait description`) %&gt;% \n  distinct(Trait, .keep_all = TRUE) %&gt;% \n    mutate(Trait_nice = case_when(Trait_nice == \"DDT resistance mortality\" ~ \"DDT susceptibility\",\n                                  .default = Trait_nice)) # make confusing name simpler\n\n\nTable S1. Traits included for organismal-level analysis.\n\n\nShow the code\ntable_data &lt;- \n  trait_data %&gt;% \n  distinct(Trait, .keep_all = T) %&gt;% \n  rename(Phenotyped_sex = Sex) %&gt;% \n  select(Trait_nice, `Trait description`, `# lines measured`, Phenotyped_sex, Reference)\n\nmy_data_table(table_data)\n\n\n\n\n\n\nFind the number of traits and studies included in our analysis.\n\n\nShow the code\n# how many studies and traits do we have after filtering:\nnum_unique_traits &lt;- table_data %&gt;% nrow()\n# in females\nnum_unique_traits_f &lt;- table_data %&gt;% filter(Phenotyped_sex == \"Female\") %&gt;% nrow()\n# in males\nnum_unique_traits_m &lt;- table_data %&gt;% filter(Phenotyped_sex == \"Male\") %&gt;% nrow()\n# how many studies are they measured across in total:\nnum_unique_studies &lt;- table_data %&gt;%  distinct(Reference) %&gt;% nrow()\n# in females\nnum_unique_studies_f &lt;- table_data %&gt;% filter(Phenotyped_sex == \"Female\") %&gt;% distinct(Reference) %&gt;% nrow()\n# in males\nnum_unique_studies_m &lt;- table_data %&gt;% filter(Phenotyped_sex == \"Male\") %&gt;% distinct(Reference) %&gt;% nrow()\n\n\nAfter this selection process, 474 remain, that were measured across 76 studies. There are 232 measured in females and 242 in males across 56 and 54 respectively."
  },
  {
    "objectID": "Main_analysis.html#estimating-r-the-response-to-selection",
    "href": "Main_analysis.html#estimating-r-the-response-to-selection",
    "title": "Analysis",
    "section": "Estimating \\(R\\): the response to selection",
    "text": "Estimating \\(R\\): the response to selection\nThe response to selection can be predicted via the Robertson covariance (Robertson, 1968), \\(\\Delta z = \\sigma(A_w, A_z)\\), where \\(\\Delta z\\) is the between generational change in the mean of a trait and \\(A_w\\) and \\(A_z\\) are breeding values for fitness and the trait in the current generation. It is also possible to write a sex-partitioned version of the Robertson covariance (Geeta Arun et al., In preparation) which similarly illustrates that \\(\\Delta z\\) is the average of the evolutionary change that occurs following selection on males and females. The partial evolutionary change for the ith female or male trait is\n\\[\n\\Delta \\overline{z_{Fi}} = \\frac{1}{2}(\\sigma(A_{wF, A_{zFi}}) + (\\sigma(A_{wM}, A_{zFi})))\n\\tag{1}\\]\n\\[\n\\Delta \\overline{z_{Mi}} = \\frac{1}{2}(\\sigma(A_{wM, A_{zMi}}) + (\\sigma(A_{wF}, A_{zMi})))\n\\tag{2}\\]\nHere, we empirically estimate the genetic covariance terms in Equations 1 and 2 for many traits, which convey the female and male components of the overall evolutionary change in each male or female trait. Combining Equations 2 and 3 and writing \\(R_{FF}\\) for the evolutionary response of a female trait due to selection on females, we find\n\\[\nR_{FF} = \\sigma(A_{wF}, A_{zFi})\n\\tag{3}\\]\nSimilarly, we can estimate the evolutionary response of a female trait to selection on males as\n\\[\nR_{MF} = \\sigma(A_{wM}, A_{zFi})\n\\tag{4}\\]\nand the evolutionary response of a male trait to selection on males\n\\[\nR_{MM} = \\sigma(A_{wM}, A_{zMi})\n\\tag{5}\\]\nand selection on females\n\\[\nR_{FM} = \\sigma(A_{wF}, A_{zMi})\n\\tag{6}\\]\n\nBuild models to calculate \\(R_{FF}\\) & \\(R_{MF}\\)\nTo estimate the covariance between \\(A_w\\) and \\(A_z\\), we fitted bivariate Bayesian linear models using the brms package (BÃ¼rkner, 2017) for R version 4.2.2. For each combination of trait and sex, we used line means for the focal trait and the fitness of the focal sex as the two response variables and fitted an intercept-only Gaussian model. Each model returned a posterior distribution of the residual correlation between trait and fitness, which for data expressed in standard units is equivalent to the covariance.\nBuild functions to run the models\n\n\nShow the code\n# RFF estimates\n\nfemale_traits &lt;- trait_data %&gt;% filter(Sex == \"Female\")\n\ntrait_list_female &lt;- unique(female_traits$Trait) # an input to the map_dfr() function that we'll need in a few chunks time\n\n# code the model structure we will use for all traits using one example - `flight.performance.f`. We can then use the update() function to run this model many times, once for each trait measured in females. update() makes this process many times faster, because the model can immediately start sampling, without the need to recompile. \n\nRFF_model &lt;-\n  brm(data = female_traits %&gt;% filter(Trait == \"flight.performance.f\"),\n      family = gaussian,\n      bf(mvbind(female_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = femalefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = femalefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1, file = \"fits/RFF_test_model\")   \n\n# make a function to update the model and the posterior sample output with the 'selected trait'\n\nRFF_calculator &lt;- function(selected_trait){\n  \n  data &lt;- female_traits %&gt;% filter(Trait == selected_trait)\n  \n  model &lt;- update(\n    RFF_model, newdata = data,\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_female = rescor__femalefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_trait) %&gt;% \n    select(Trait, Response_to_selection_female) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n# RMF estimates\n\nRMF_model &lt;-\n  brm(data = female_traits %&gt;% filter(Trait == \"flight.performance.f\"),\n      family = gaussian,\n      bf(mvbind(male_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = malefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = malefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1, file = \"fits/RMF_test_model\")\n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRMF_calculator &lt;- function(selected_trait){\n  \n  data &lt;- female_traits %&gt;% filter(Trait == selected_trait)\n  \n  model &lt;- update(\n    RMF_model, newdata = data,\n    chains = 4, cores = 4, iter = 6000, warmup = 2000,\n    seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_male = rescor__malefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_trait) %&gt;% \n    select(Trait, Response_to_selection_male) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n\n\n\nBuild models to calculate \\(R_{FM}\\) & \\(R_{MF}\\)\n\n\nShow the code\n# RMM estimates\n\nmale_traits &lt;- trait_data %&gt;% filter(Sex == \"Male\")\n\ntrait_list_male &lt;- unique(male_traits$Trait)\n\nRMM_model &lt;-\n  brm(data = male_traits %&gt;% filter(Trait == \"flight.performance.m\"),\n      family = gaussian,\n      bf(mvbind(male_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = malefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = malefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1, file = \"fits/RMM_test_model\")   \n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRMM_calculator &lt;- function(selected_trait){\n  \n  data &lt;- male_traits %&gt;% filter(Trait == selected_trait)\n  \n  model &lt;- update(\n    RMM_model, newdata = data,\n    chains = 4, cores = 4, iter = 6000, warmup = 2000,\n    seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_male = rescor__malefitness__traitvalue) %&gt;%\n    mutate(Trait = selected_trait) %&gt;% \n    select(Trait, Response_to_selection_male) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n# RFM estimates\n\nRFM_model &lt;-\n  brm(data = male_traits %&gt;% filter(Trait == \"flight.performance.m\"),\n      family = gaussian,\n      bf(mvbind(female_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = femalefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = femalefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1, file = \"fits/RFM_test_model\")   \n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRFM_calculator &lt;- function(selected_trait){\n  \n  data &lt;- male_traits %&gt;% filter(Trait == selected_trait)\n  \n  model &lt;- update(\n    RFM_model, newdata = data,\n      chains = 4, cores = 4, iter = 6000, warmup = 2000,\n      seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_female = rescor__femalefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_trait) %&gt;% \n    select(Trait, Response_to_selection_female) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n\n\n\nRun the models for all the traits\nRun the models using RFF_calculator, RMF_calculator, RMM_calculator and RFM_calculator\n\n\nShow the code\n# run the RFF function\n\nRun_function &lt;- FALSE # change this to TRUE to run the models\n\nif(Run_function){\n  RFF &lt;- map_dfr(trait_list_female, RFF_calculator) # map_dfr returns a data frame created by row-binding each output\n  write_csv(RFF, file = \"data/organismal_level_output/RFF.csv\")\n} else RFF &lt;- read_csv(\"data/organismal_level_output/RFF.csv\")\n\n# run the RMF function\n\nif(Run_function){\n  RMF &lt;- map_dfr(trait_list_female, RMF_calculator) \n  write_csv(RMF, file = \"data/organismal_level_output/RMF.csv\")\n} else RMF &lt;- read_csv(\"data/organismal_level_output/RMF.csv\")\n\n# run the RMM function\n\nif(Run_function){\n  RMM &lt;- map_dfr(trait_list_male, RMM_calculator) \n  write_csv(RMM, file = \"data/organismal_level_output/RMM.csv\")\n} else RMM &lt;- read_csv(\"data/organismal_level_output/RMM.csv\")\n\n# run the RFM function\n\nif(Run_function){\n  RFM &lt;- map_dfr(trait_list_male, RFM_calculator) \n  write_csv(RFM, file = \"data/organismal_level_output/RFM.csv\")\n} else RFM &lt;- read_csv(\"data/organismal_level_output/RFM.csv\")\n\nR_female_traits &lt;-\n  bind_cols(RFF, RMF) %&gt;% \n  rename(Trait = Trait...1) %&gt;% \n  mutate(Trait_Sex = \"Female\") %&gt;% \n  select(-(Trait...3))\n\nR_male_traits &lt;-\n  bind_cols(RFM, RMM) %&gt;% \n  rename(Trait = Trait...1) %&gt;%  \n  mutate(Trait_Sex = \"Male\") %&gt;% \n  select(-(Trait...3))\n\n\n\n\nPlot the sex-specific responses to selection\n\n\nShow the code\np1 &lt;-\n  R_female_traits %&gt;% \n  bind_rows(R_male_traits) %&gt;% \n  group_by(Trait) %&gt;% \n  mutate(avg_R = median(Response_to_selection_female)) %&gt;%\n  ggplot(aes(Response_to_selection_female, fct_reorder(Trait, avg_R))) +\n  stat_interval(.width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"Purp\") +\n  coord_cartesian(xlim = c(-0.5, 0.5)) +\n  geom_vline(linetype = 2, xintercept = 0, linewidth = 1) +\n  labs(x = \"_R~F~_\",\n       y = \"Trait\") +\n  theme_bw() + \n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        text = element_text(size=14),\n        axis.text.y = element_text(size = 8),\n        axis.title.x = element_markdown())\n\np2 &lt;-\n  R_female_traits %&gt;% \n  bind_rows(R_male_traits) %&gt;%\n  group_by(Trait) %&gt;% \n  mutate(avg_R = median(Response_to_selection_male)) %&gt;%\n  ggplot(aes(Response_to_selection_male, fct_reorder(Trait, avg_R))) +\n  stat_interval(.width = c(0.05, 0.66, 0.95), \n                height = 1, show.legend = F) +\n  rcartocolor::scale_color_carto_d(palette = \"Peach\") +\n  coord_cartesian(xlim = c(-0.5, 0.5)) +\n  geom_vline(linetype = 2, xintercept = 0, linewidth = 1) +\n  labs(x = \"_R~M~_\",\n       y = \"Trait\") +\n  theme_bw() + \n  theme(legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        text = element_text(size=14),\n        axis.text.y = element_text(size = 8),\n        axis.title.x = element_markdown())\n\np1 + p2 +\n  plot_annotation(tag_levels = 'a')\n\n\n\n\n\n\n\n\n\nFigure S1. The estimated response to selection on a females and b males for all traits in our dataset. Innermost bands approximate the median, while outer bands show the 66 and 95% credible intervals. Traits measured in females have a .f suffix while those measured in males are denoted with a .m suffix."
  },
  {
    "objectID": "Main_analysis.html#calculate-various-metrics",
    "href": "Main_analysis.html#calculate-various-metrics",
    "title": "Analysis",
    "section": "Calculate various metrics",
    "text": "Calculate various metrics\nJoin the data frames and estimate the overall expected response to selection as \\(R = \\frac{R_{F} + R_{M}}{2}\\).\nIn the same code chunk, for each trait, we also calculate the difference in the response to selection acting on females and males as \\(\\Delta R = R_{FF} - R_{MF}\\) for traits measured in females or \\(\\Delta R = R_{FM} - R_{MM}\\) for traits measured in males. This difference facilitates identification of traits where the response to selection is very different between sexes (in magnitude, and possibly also in sign). Note that \\(\\Delta R\\) alone does not reveal whether a trait is sexually antagonistic, because sexually concordant selection that varies in strength between sexes (or sex-limited selection) can result in a high value of \\(\\Delta R\\).\n\n\nShow the code\nR_female_traits &lt;-\n  R_female_traits %&gt;% \n  mutate(R_overall = (Response_to_selection_female + Response_to_selection_male)/2,\n         R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;% \n    select(Trait, Trait_Sex, everything()) \n\nR_male_traits &lt;-\n  R_male_traits %&gt;%  \n  mutate(R_overall = (Response_to_selection_female + Response_to_selection_male)/2,\n         R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;% \n  select(Trait, Trait_Sex, everything()) %&gt;% \n  filter(Trait != \"dopamine.response.to.paraquat.2021.m\")\n\nR_all_traits &lt;- bind_rows(R_female_traits, R_male_traits)\n\nR_long_form &lt;-\n  R_all_traits %&gt;% \n  select(1:4) %&gt;% \n    pivot_longer(cols = 3:4, names_to = \"Fitness_Sex\", values_to = \"R_metric\") %&gt;% \n    mutate(Fitness_Sex = case_when(Fitness_Sex == \"Response_to_selection_female\" ~ \"Female\",\n                                   Fitness_Sex == \"Response_to_selection_male\" ~ \"Male\"))"
  },
  {
    "objectID": "Main_analysis.html#calculating-evidence-ratios",
    "href": "Main_analysis.html#calculating-evidence-ratios",
    "title": "Analysis",
    "section": "Calculating evidence ratios",
    "text": "Calculating evidence ratios\nWe use the brms hypothesis() function to compute evidence ratios, where our hypothesis is \\(R\\) (and its various related metrics) != 0. When the hypothesis is one-sided, this is the posterior probability under the hypothesis against its alternative. That is, when the hypothesis is of the form R &gt; 0, the evidence ratio is the ratio of the posterior probability of R &gt; 0 and the posterior probability of R &lt; 0. In this example, values greater than one indicate that the evidence in favour of R &gt; 0 is larger than evidence in favour of R &lt; 0. In contrast, values smaller than one indicate that there is greater evidence in favour of R &lt; 0 than R &gt; 0. More on the hypothesis function can be found here. We consider evidence ratios &gt; 39 or &lt; 1/39 as biologically notable (without accounting for multiple testing), as our hypothesis is two-directional (negative and positive values of \\(R\\) are of interest to us) and these values closely correspond to the familiar frequentist p-value = 0.05 (Makowski et al, 2019).\n\n\nShow the code\n# build a function to calculate the evidence ratio, get the relevant info from the output and convert it to a tibble\n\nfind_evidence_ratios &lt;- function(Trait_name, specify_hypothesis){\n  x &lt;- hypothesis(R_all_traits %&gt;% \n                    filter(Trait == Trait_name),\n                  specify_hypothesis)\n  \n  x &lt;- x$hypothesis\n  \n  x %&gt;% as_tibble() %&gt;% \n    select(Evid.Ratio) %&gt;% \n    mutate(Trait = Trait_name)\n}\n\n# list of traits we need evidence ratios for.\n\nall_traits_list &lt;- R_all_traits %&gt;% distinct(Trait) %&gt;% pull(Trait)\n\n# calculate evidence ratios \n\nif(!file.exists(\"data/organismal_level_output/organismal_level_evidence_ratios.csv\")){\n\nR_evidence_ratios_female &lt;- \n  map_dfr(all_traits_list, \n          find_evidence_ratios, \n          \"Response_to_selection_female &gt; 0\") %&gt;% \n  rename(Female_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_male &lt;-\n  map_dfr(all_traits_list, \n          find_evidence_ratios, \n          \"Response_to_selection_male &gt; 0\") %&gt;% \n  rename(Male_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_overall &lt;- \n    map_dfr(all_traits_list, \n          find_evidence_ratios, \n          \"R_overall &gt; 0\") %&gt;% \n  rename(Overall_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_diff &lt;- \n    map_dfr(all_traits_list, \n          find_evidence_ratios, \n          \"R_diff &gt; 0\") %&gt;% \n  rename(Diff_Evid_Ratio = Evid.Ratio)\n}\n\n\nNext, we manually calculate evidence ratios for sexually concordant responses to selection by:\n\nUsing the p_direction function from the bayestestR package, we find the proportion of the posterior distribution (the posterior probability) that is of the medianâs sign for each trait in each sex.\nUsing the p_direction output, we calculate the probability that a trait has positive \\(R\\), \\(P(pos)\\) or negative \\(R\\), \\(P(neg) = 1 - P(pos)\\).\nFind \\(P(concord) = P(pos)_f P(pos)_m + P(neg)_f P(neg)_m\\)\nFind \\(P(antag) = P(pos)_f P(neg)_m + P(neg)_f P(pos)_m\\)\nTake the ratio of \\(P(concord)\\) and \\(P(antag)\\)\n\nEvidence ratios &gt; 1 indicate that the response to selection is more likely to be sexually concordant, whereas ratios &lt; 1 indicate a sexually antagonistic response has higher probability. As indicated by step 3, a concordant response is possible when the trait responds to selection in either a negative or positive direction in both sexes. Similarly, step 4 shows that an antagonistic response is also possible via two paths. Hence, we once again consider evidence ratios &gt; 39 or &lt; 1/39 as biologically notable (without accounting for multiple testing).\n\n\nShow the code\npd_function &lt;-function(Trait_name){\n  R_all_traits %&gt;% filter(Trait == Trait_name) %&gt;%\n    select(Trait, Response_to_selection_female, Response_to_selection_male) %&gt;%\n    p_direction(Response_to_selection_female, method = \"direct\", null = 0) %&gt;%\n    as_tibble() %&gt;%\n    pivot_wider(names_from = Parameter, values_from = pd) %&gt;%\n    mutate(Trait = Trait_name) %&gt;%\n    rename(pd_female = Response_to_selection_female,\n           pd_male = Response_to_selection_male)\n}\n\nif(!file.exists(\"data/organismal_level_output/organismal_level_evidence_ratios.csv\")){\n\npd_data &lt;- map_dfr(all_traits_list, pd_function)\n\nTrait_medians &lt;-\n  R_all_traits %&gt;%\n  group_by(Trait) %&gt;%\n  summarise(median_female = median(Response_to_selection_female),\n            median_male = median(Response_to_selection_male)) %&gt;%\n  ungroup()\n\nevidence_ratios_concord &lt;-\n  left_join(pd_data, Trait_medians) %&gt;%\n  mutate(prob_pos_female = if_else(median_female &gt; 0, pd_female, 1 - pd_female),\n         prob_pos_male = if_else(median_male &gt; 0, pd_male, 1 - pd_male)) %&gt;%\n  select(Trait, prob_pos_female, prob_pos_male) %&gt;%\n\n    # Calculate the probabilities that beta_i and beta_j have the same/opposite signs\n    mutate(p_sex_concord = prob_pos_female  * prob_pos_male +\n             (1 - prob_pos_female) * (1 - prob_pos_male),\n           p_sex_antag = prob_pos_female * (1 - prob_pos_male) +\n             (1 - prob_pos_female) * prob_pos_male) %&gt;%\n    # Find the ratios of these two probabilities (i.e. the \"evidence ratios\")\n    mutate(Concord_Evid_Ratio = p_sex_concord / p_sex_antag)\n}\n\n\nJoin the evidence ratios into a single tibble and save as a .csv file for fast loading. Create new columns that indicate whether the evidence ratio indicate biologically notability.\n\n\nShow the code\nif(!file.exists(\"data/organismal_level_output/organismal_level_evidence_ratios.csv\")){\norganismal_level_evidence_ratios &lt;-\n  R_evidence_ratios_female %&gt;% \n  left_join(R_evidence_ratios_male) %&gt;% \n  left_join(R_evidence_ratios_overall) %&gt;% \n  left_join(R_evidence_ratios_diff) %&gt;% \n  left_join(evidence_ratios_concord %&gt;% select(Trait, Concord_Evid_Ratio)) %&gt;% \n  mutate(Female_notable = if_else(Female_Evid_Ratio &gt; 39 | Female_Evid_Ratio &lt; 1/39, \"Yes\", \"No\"),\n         Male_notable = if_else(Male_Evid_Ratio &gt; 39 | Male_Evid_Ratio &lt; 1/39, \"Yes\", \"No\"),\n         Overall_notable = if_else(Overall_Evid_Ratio &gt; 39 | Overall_Evid_Ratio &lt; 1/39, \"Yes\", \"No\"),\n         Diff_notable = if_else(Diff_Evid_Ratio &gt; 39 | Diff_Evid_Ratio &lt; 1/39, \"Yes\", \"No\"),\n         Concord_notable = if_else(Concord_Evid_Ratio &gt; 39 | Concord_Evid_Ratio &lt; 1/39, \"Yes\", \"No\")) %&gt;% \n  left_join(clean_meta_data) %&gt;% \n  left_join(R_all_traits %&gt;% distinct(Trait, Trait_Sex)) %&gt;%\n  mutate(Trait = fct_reorder(Trait, `Trait guild`)) %&gt;%\n  arrange(`Trait guild`, Trait) %&gt;% \n  mutate(position = 1:n(),\n         Trait_Sex = if_else(Trait_Sex == \"Female\", \"Traits measured in females\",\n                                         \"Traits measured in males\")) %&gt;% \n  select(Trait, everything())\n\nwrite_csv(organismal_level_evidence_ratios, \"data/organismal_level_output/organismal_level_evidence_ratios.csv\")\n} else organismal_level_evidence_ratios &lt;- read_csv(\"data/organismal_level_output/organismal_level_evidence_ratios.csv\")\n\n\nBuild the evidence ratio plots\n\n\nShow the code\n# work out where to place the x axis labels - we want them in the middle of their trait guild\n\nx_labels &lt;- organismal_level_evidence_ratios %&gt;% \n  group_by(`Trait guild`) %&gt;% \n  summarise(position = min(position) + (max(position) - min(position))/2)\n\n# get colours for each trait guild\n\nguild_pal &lt;- c(\"#6e7cb9\", \"#7bbcd5\", \"#d0e2af\", \"#f5db99\",\n               \"#e89c81\", \"#d2848d\", \"#6e7cb9\", \"#7bbcd5\", \n               \"#d0e2af\",\"#f5db99\",\"#e89c81\", \"#d2848d\", \n               \"#6e7cb9\", \"#7bbcd5\")\n\nplot_a &lt;- \n  organismal_level_evidence_ratios %&gt;% \n  ggplot(aes(x = position, y = log2(Female_Evid_Ratio))) +\n  geom_point(aes(colour = `Trait guild`),\n             size = 4.5, alpha = 1, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$`Trait guild`) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12), \n                  labels = c(paste(\"1/\",2 ^ c(12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12)), \n                  limits = c(-14, 14)) +\n  labs(x = NULL,\n       y = \"_R~F~_ log~2~(ER)\") +\n  geom_label_repel(data = organismal_level_evidence_ratios %&gt;% \n                     filter(Female_Evid_Ratio &gt; 64 | Female_Evid_Ratio &lt; 1/64),  \n                   aes(label = Trait_nice),\n                   fill = \"white\",\n                   size = 3.5, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_b &lt;- \n  organismal_level_evidence_ratios %&gt;% \n  ggplot(aes(x = position, y = log2(Male_Evid_Ratio))) +\n  geom_point(aes(colour = `Trait guild`),\n             size = 4.5, alpha = 1, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$`Trait guild`) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12), \n                  labels = c(paste(\"1/\",2 ^ c(12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12)), \n                  limits = c(-14, 14)) +\n  labs(x = NULL,\n       y = \"_R~M~_ log~2~(ER)\") +\n  geom_label_repel(data = organismal_level_evidence_ratios %&gt;% \n                     filter(Male_Evid_Ratio &gt; 64 | Male_Evid_Ratio &lt; 1/64),\n                   aes(label = Trait_nice),\n                   fill = \"white\",\n                   size = 3.5, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_c &lt;- \n  organismal_level_evidence_ratios %&gt;% \n  ggplot(aes(x = position, y = log2(Overall_Evid_Ratio))) +\n  geom_point(aes(colour = `Trait guild`),\n             size = 4.5, alpha = 1, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$`Trait guild`) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12), \n                  labels = c(paste(\"1/\",2 ^ c(12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12)), \n                  limits = c(-14, 14)) +\n  labs(x = \"Traits\",\n       y = \"_R_  log~2~(ER)\") +\n  geom_label_repel(data = organismal_level_evidence_ratios %&gt;% \n                     filter(Overall_Evid_Ratio &gt; 256 | Overall_Evid_Ratio &lt; 1/256),  \n                   aes(label = Trait_nice),\n                   fill = \"white\",\n                   size = 3.5, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_text(angle = 90, \n                                 vjust = 0,\n                                 hjust = 1,\n                                 size = 10,\n                                 margin=margin(r=0)),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\n(Figure_S2 &lt;- plot_a / plot_b / plot_c +\n  plot_annotation(tag_levels = 'a'))\n\n\n\n\n\n\n\n\n\nFigure S2. Points show evidence ratios (ERs) for a the evolutionary change in response to selection on females (\\(R_{F}\\)), b the evolutionary change in response to selection on males (\\(R_{M}\\)) and c the total evolutionary response to selection (\\(\\frac{1}{2}(R_F + R_M)\\)). Traits are loosely organised into guilds to aid visualisation. The dashed lines indicate an evidence ratio of 1, where the probability that \\(R\\) &gt; 0 is equal to the probability that \\(R\\) &lt; 0. ER &gt; 1 indicates a positive response is more likely, whereas ER &lt; 1 indicates a negative response is more likely. The upper dotted line on each plot indicates an evidence ratio of 39, while the lower dotted line indicates an evidence ratio of 1/39; these correspond strongly with the frequentist \\(p\\) = 0.05. Traits with the most extreme evidence ratios are labelled.\n\n\nShow the code\nplot_d &lt;- \n  organismal_level_evidence_ratios %&gt;% \n  ggplot(aes(x = position, y = log2(Diff_Evid_Ratio))) +\n  geom_point(aes(colour = `Trait guild`),\n             size = 4.5, alpha = 1, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$`Trait guild`) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10), \n                     labels = c(paste(\"1/\",2 ^ c(10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10)), limits = c(-12, 12)) +\n  labs(x = NULL,\n       y = \"&Delta;_R_  log~2~(ER)\") +\n  geom_label_repel(data = organismal_level_evidence_ratios %&gt;% \n                     mutate(Trait_nice = case_when(Trait_nice == \"DDT resistance mortality\" ~ \"DDT susceptibility\", .default = Trait_nice)) %&gt;% \n                     filter(Diff_Evid_Ratio &gt; 39 | Diff_Evid_Ratio &lt; 1/39),  \n                   aes(label = Trait_nice),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   force = 1.1,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_e &lt;- \n  organismal_level_evidence_ratios %&gt;% \n  ggplot(aes(x = position, y = log2(Concord_Evid_Ratio))) +\n  geom_point(aes(colour = `Trait guild`),\n             size = 4.5, alpha = 1, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$`Trait guild`) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10), \n                  labels = c(paste(\"1/\",2 ^ c(10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10)), limits = c(-12, 12)) +\n  labs(x = \"Trait\",\n       y = \"Sexual concordance log~2~(ER)\") +\n  geom_label_repel(data = organismal_level_evidence_ratios %&gt;% \n                     filter(Concord_Evid_Ratio &gt; 39 | Concord_Evid_Ratio &lt; 1/39),  \n                   aes(label = Trait_nice),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_text(angle = 90, \n                                 vjust = 0,\n                                 hjust = 1,\n                                 size = 10,\n                                 margin=margin(r=0)),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\n(Figure_3 &lt;- plot_d/ plot_e + plot_annotation(tag_levels = \"a\"))\n\n\n\n\n\n\n\n\n\nFigure 3. Points show evidence ratios (ERs) for a \\(\\Delta R\\) (defined as \\(R_F\\) - \\(R_M\\)) and b sexual concordance, for all measured traits in the organismal level phenotype dataset. Traits are loosely organised into guilds to aid visualisation. The dashed lines indicate an evidence ratio of 1, where the probability that \\(\\Delta R\\) &gt; 0 is equal to the probability that \\(\\Delta R\\) &lt; 0, or that a trait is just as likely to have a sexually concordant response to selection (ER &gt; 1) as a sexually antagonistic response (ER &lt; 1). The dotted lines indicate an evidence ratio of 39 or 1/39; these correspond strongly with the frequentist \\(p\\) = 0.05. Traits with ER &gt; 39 or &lt; 1/39 are labelled."
  },
  {
    "objectID": "Main_analysis.html#table-s2-supplementary-dataset-2",
    "href": "Main_analysis.html#table-s2-supplementary-dataset-2",
    "title": "Analysis",
    "section": "Table S2/ Supplementary dataset 2",
    "text": "Table S2/ Supplementary dataset 2\nTable S2 / Supplementary dataset 2: \\(R\\) partitions and associated evidence ratios for the organismal level trait dataset. Trait descriptions are provided in Table S1. Data can be downloaded as a .csv file from the github repository associated with this project.\n\n\nShow the code\nall_ol_traits_summary &lt;-\n  R_all_traits %&gt;% \n  group_by(Trait, Trait_Sex) %&gt;% \n  median_qi(Response_to_selection_female,\n            Response_to_selection_male,\n            R_overall,\n            R_diff) %&gt;% \n  rename(`Sex trait was measured in` = Trait_Sex,\n         R = R_overall,\n         `R 2.5% CI` = R_overall.lower,\n         `R 97.5% CI` = R_overall.upper,\n         `R female` = Response_to_selection_female,\n         `R female 2.5% CI` = Response_to_selection_female.lower,\n         `R female 97.5% CI` = Response_to_selection_female.upper,\n         `R male` = Response_to_selection_male,\n         `R male 2.5% CI` = Response_to_selection_male.lower,\n         `R male 97.5% CI` = Response_to_selection_male.upper,\n         `Delta R` = R_diff,\n         `Delta R 2.5% CI` = R_diff.lower,\n         `Delta R 97.5% CI` = R_diff.upper) %&gt;% \n  left_join(organismal_level_evidence_ratios %&gt;% select(-contains(\"notable\")) %&gt;% \n              rename(`R ER` = Overall_Evid_Ratio, `R female ER` = Female_Evid_Ratio,\n                     `R male ER` = Male_Evid_Ratio, `Delta R ER` = Diff_Evid_Ratio,\n                     `Sexual concordance ER` = Concord_Evid_Ratio)) %&gt;% \n  select(Trait_nice, `Sex trait was measured in`, R, `R 2.5% CI`, `R 97.5% CI`, `R ER`, \n         `R female`, `R female 2.5% CI`, `R female 97.5% CI`, `R female ER`,\n         `R male`, `R male 2.5% CI`, `R male 97.5% CI`, `R male ER`,\n         `Delta R`, `Delta R 2.5% CI`, `Delta R 97.5% CI`, `Delta R ER`, `Sexual concordance ER`) %&gt;%\n  ungroup() %&gt;% \n  mutate(across(c(3,4,5,7,8,9,11,12,13,15,16,17), ~round(.x, 3)),\n         across(ends_with(\"ER\"), ~ round(.x, 4)))\n\nwrite_csv(all_ol_traits_summary, \"data/organismal_level_output/Supplementary_dataset_3.csv\")\n\nmy_data_table(all_ol_traits_summary)"
  },
  {
    "objectID": "Main_analysis.html#estimate-the-correlation-between-r_f-and-r_m",
    "href": "Main_analysis.html#estimate-the-correlation-between-r_f-and-r_m",
    "title": "Analysis",
    "section": "Estimate the correlation between \\(R_F\\) and \\(R_M\\)",
    "text": "Estimate the correlation between \\(R_F\\) and \\(R_M\\)\nTo estimate the correlation between the evolutionary response to selection on females and males, while accounting for measurement error in selection response estimates, we use a bootstrapping approach. For each trait, we generate an \\(R_F\\) and \\(R_M\\) estimate, drawn from a normal distribution, parameterised with the mean and standard error we have empirically estimated. We then calculate the correlation for this particular draw of trait values. We repeat this process 10,000 times, and find the median correlation with associated 2.5% and 97.5% uncertainty intervals.\n\n\nShow the code\nR_medians &lt;-\n  R_long_form %&gt;%\n  group_by(Trait, Fitness_Sex, Trait_Sex) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  select(-c(variable))\n\nR_medians_summarised &lt;-\n  R_medians %&gt;% \n  select(-c(`2.5%`, `97.5%`)) %&gt;% \n  pivot_wider(names_from = Fitness_Sex, values_from = c(median, sd))\n\nget_bootstrap_cor &lt;- function(){\n  \n  x &lt;- R_medians_summarised %&gt;% mutate(boot_f = rnorm(474, median_Female, sd_Female), # draw from the R_F distribution of each trait\n                            boot_m = rnorm(474, median_Male, sd_Male)) # draw from the R_M distribution of each trait\n  \n  cor(x$boot_f, x$boot_m, method = \"spearman\")\n}\n\n# generate the correlation 10,000 times, using different draws each time\n\nR_between_sex_correlation &lt;- tibble(cor = lapply(1:10000, function(x) get_bootstrap_cor()) %&gt;% \n  unlist())\n\nSummary_R_between_sex_correlation &lt;- median_qi(R_between_sex_correlation) %&gt;% \n  select(1:3) %&gt;% \n  rename(`Correlation median estimate` = cor,\n         `2.5% uncertainty interval` = .lower,\n         `97.5% uncertainty interval` = .upper)\n\nSummary_R_between_sex_correlation %&gt;% \n  mutate(across(1:3, ~ round(.x, 3))) %&gt;% \n  pander(split.cell = 40, split.table = Inf)\n\n\n\n\n\n\n\n\n\n\nCorrelation median estimate\n2.5% uncertainty interval\n97.5% uncertainty interval\n\n\n\n\n0.134\n0.058\n0.21"
  },
  {
    "objectID": "Main_analysis.html#build-panel-a-for-figure-2",
    "href": "Main_analysis.html#build-panel-a-for-figure-2",
    "title": "Analysis",
    "section": "Build Panel A for Figure 2",
    "text": "Build Panel A for Figure 2\n\n\nShow the code\nR_pA &lt;-\n  R_medians_summarised %&gt;% \n  left_join(organismal_level_evidence_ratios %&gt;% \n              select(Trait, Concord_Evid_Ratio) %&gt;%\n              mutate(ER_log = log(Concord_Evid_Ratio))) %&gt;% # log of the evidence ratio is log-odds\n  ggplot(aes(x = median_Female, y = median_Male, fill = ER_log)) +\n  stat_ellipse(alpha = 0.8, type = \"norm\", linetype = 1, linewidth = 1) +\n  geom_point(shape = 21, size = 5, alpha = 0.85) +\n  geom_hline(yintercept = 0, linetype = 2) +\n  geom_vline(xintercept = 0, linetype = 2) +\n  scale_fill_gradientn(colours = met.brewer(name = \"Paquin\", 7),\n                       limits = c(-6, 6)) +\n  guides(fill = guide_colourbar(barwidth = 8, barheight = 1)) +\n  #geom_density_2d(data = I_transcript_plotting_data, #%&gt;% filter(Trait_Sex == \"Female\"),\n  #               aes(x = R_F, y = R_M), colour = \"white\", alpha = 1, size = 1) +\n  labs(x = \"Reponse to selection on females\",\n       y = \"Reponse to selection on males\",\n       fill = \"Sexual concordance (log odds)\") +\n  coord_fixed(xlim = c(-0.35, 0.35), ylim = c(-0.35, 0.35)) +\n  scale_x_continuous(breaks = c(-0.3, -0.2,-0.1, 0, 0.1 ,0.2,0.3)) +\n  scale_y_continuous(breaks = c(-0.3, -0.2,-0.1, 0, 0.1 ,0.2,0.3)) +\n  #facet_wrap(~Trait_Sex) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        legend.title = element_markdown(),\n        text = element_text(size = 14))\n\nR_pA"
  },
  {
    "objectID": "Main_analysis.html#estimate-overliner_f-and-overliner_m",
    "href": "Main_analysis.html#estimate-overliner_f-and-overliner_m",
    "title": "Analysis",
    "section": "Estimate \\(\\overline{|R_F|}\\) and \\(\\overline{|R_M|}\\)",
    "text": "Estimate \\(\\overline{|R_F|}\\) and \\(\\overline{|R_M|}\\)\n\nThe model\nFit the model to test whether \\(|R|\\) is affected by the sex fitness and trait values were measured in. To account for sampling variance in the in our estimates, we weight each \\(R\\) estimate by the inverse of its standard error.\n\n\nShow the code\nR_medians &lt;-\n  R_medians %&gt;% \n  left_join(clean_meta_data) %&gt;% \n  mutate(absolute_R = abs(median),\n         Fitness_Sex = as.factor(Fitness_Sex),\n         Trait_Sex = as.factor(Trait_Sex),\n         Trait = as.factor(Trait)) \n\nmedian_R_model &lt;- \n  brm(absolute_R | weights(1/sd) ~ 1 + Fitness_Sex * Trait_Sex + (1|study_ID),\n      family = brmsfamily(family = \"Gamma\"), # gamma is appropriate for the half-normal distribution created by taking the absolute\n      data = R_medians,\n      prior = c(prior(normal(-2.2, 1), class = Intercept),\n                prior(exponential(1), class = sd),\n                prior(exponential(1), class = shape),\n                prior(normal(0, 0.25), class = b)),\n      warmup = 4000, iter = 12000,\n      seed = 1, cores = 4, chains = 4,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      file = \"fits/median_R_model\")\n\nprint(median_R_model)\n\n\n Family: gamma \n  Links: mu = log; shape = identity \nFormula: absolute_R | weights(1/sd) ~ 1 + Fitness_Sex * Trait_Sex + (1 | study_ID) \n   Data: R_medians (Number of observations: 948) \n  Draws: 4 chains, each with iter = 12000; warmup = 4000; thin = 1;\n         total post-warmup draws = 32000\n\nMultilevel Hyperparameters:\n~study_ID (Number of levels: 76) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)     0.46      0.04     0.39     0.55 1.00     3918     7255\n\nRegression Coefficients:\n                              Estimate Est.Error l-95% CI u-95% CI Rhat\nIntercept                        -2.60      0.06    -2.71    -2.49 1.00\nFitness_SexMale                   0.16      0.02     0.12     0.21 1.00\nTrait_SexMale                    -0.15      0.02    -0.20    -0.10 1.00\nFitness_SexMale:Trait_SexMale     0.08      0.03     0.02     0.14 1.00\n                              Bulk_ESS Tail_ESS\nIntercept                         1828     4055\nFitness_SexMale                  23346    25713\nTrait_SexMale                    24176    25402\nFitness_SexMale:Trait_SexMale    21541    24004\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nshape     1.60      0.02     1.56     1.64 1.00    52514    23564\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nTo check how does the gamma distribution fares at capturing the shape of the data, we use the model to recapitulate the data it was trained on. Given the shape of the predicted data is similar to the real data, thereâs a high chance weâve used an appropriate distribution family.\n\n\nShow the code\npp_check(median_R_model)\n\n\n\n\n\n\n\n\n\n\n\nBuild Panels C and E for Figure 2\nGet model predictions and plot\n\n\nShow the code\nnew_data &lt;- expand_grid(Fitness_Sex = c(\"Female\", \"Male\"),\n                        Trait_Sex = c(\"Female\", \"Male\"))\n\nR_fitted &lt;-\n  fitted(median_R_model, newdata = new_data, re_formula = NA, summary = F) %&gt;% \n  as.data.frame() %&gt;% \n  rename(Female_response_Female_trait = V1,\n         Female_response_Male_trait = V2,\n         Male_response_Female_trait = V3,\n         Male_response_Male_trait = V4) %&gt;% \n  as_tibble() %&gt;% \n  mutate(prop_response_male_ftrait = Male_response_Female_trait / (Male_response_Female_trait + Female_response_Female_trait),\n         prop_response_male_mtrait = Male_response_Male_trait / (Male_response_Male_trait + Female_response_Male_trait),\n         percent_diff_f_trait = ((Male_response_Female_trait - Female_response_Female_trait) / Female_response_Female_trait)*100,\n         percent_diff_m_trait = ((Male_response_Male_trait - Female_response_Male_trait ) / Female_response_Male_trait)*100) %&gt;% \n  pivot_longer(cols = everything(), names_to = \"Parameter\", values_to = \"R_mean\") %&gt;% \n  mutate(Fitness_Sex = case_when(str_detect(Parameter, \"Female_response\") ~ \"Female\",\n                                 str_detect(Parameter, \"Male_response\") ~ \"Male\"),\n         Trait_Sex = case_when(str_detect(Parameter, \"Female_trait\") ~ \"Female\",\n                               str_detect(Parameter, \"Male_trait\") ~ \"Male\",\n                               str_detect(Parameter, \"ftrait\") ~ \"Female\",\n                               str_detect(Parameter, \"mtrait\") ~ \"Male\"))\n\nR_pC &lt;-\n  R_fitted %&gt;% \n  filter(!str_detect(Parameter, \"percent\") & !str_detect(Parameter, \"prop\")) %&gt;%  \n  ggplot(aes(x = R_mean, y = Trait_Sex, fill = Fitness_Sex)) +\n  stat_slab(.width = c(0.66, 0.95), alpha = 0.9,\n               point_interval = \"median_qi\", point_fill = \"white\",\n               shape = 21, point_size = 5, stroke = 1.5) + \n  labs(x = expression(\"Mean |\"* italic(R) * \"| for organismal-level traits\"),\n       y = \"Phenotyped sex\",\n       fill = \"Sex under selection\") +\n  scale_fill_manual(values = c(carto_pal(7, \"Purp\")[5], carto_pal(7, \"Peach\")[5])) +\n  coord_cartesian(xlim = c(0.05, 0.11)) +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='transparent'),\n        legend.position = \"bottom\",\n        panel.grid.minor.y = element_blank(),\n        plot.background = element_rect(fill='transparent', color=NA),\n        text = element_text(size=13))\n  \nR_pD &lt;-\n  R_fitted %&gt;% \n  filter(str_detect(Parameter, \"prop\")) %&gt;%\n  mutate(Parameter = if_else(str_detect(Parameter, \"mtrait\"), \"Male\", \"Female\")) %&gt;% \n  ggplot(aes(x = R_mean, y = Parameter, fill = after_stat(x &gt; 0))) +\n  stat_halfeye(.width = c(0.66, 0.95), alpha = 0.9, fill = carto_pal(7, \"Emrld\")[2],\n               point_interval = \"median_qi\", point_fill = \"white\", scale = 0.5,\n               shape = 21, point_size = 5, stroke = 1.5) + \n  geom_vline(xintercept = 0.5, linetype = 2, linewidth = 1.2) +\n  coord_cartesian(xlim = c(0.45, 0.6)) +\n  xlab(expression(\"prop. \"*italic(R)* \" that occurs through males\")) +\n  ylab(\"Phenotyped sex\") +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='transparent'),\n        #panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.background = element_rect(fill='transparent', color=NA),\n        legend.position = \"none\",\n        text = element_text(size=13))\n\n(R_pC + R_pD) +\n  plot_annotation(tag_levels = 'a')\n\n\n\n\n\n\n\n\n\nCalculating stats for the results section\n\n\nShow the code\nR_fitted %&gt;% \n  group_by(Parameter) %&gt;% \n  median_qi(R_mean)\n\n\n# A tibble: 8 Ã 7\n  Parameter                     R_mean  .lower  .upper .width .point .interval\n  &lt;chr&gt;                          &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1 Female_response_Female_trait  0.0741  0.0665  0.0826   0.95 median qi       \n2 Female_response_Male_trait    0.0639  0.0573  0.0713   0.95 median qi       \n3 Male_response_Female_trait    0.0872  0.0782  0.0973   0.95 median qi       \n4 Male_response_Male_trait      0.0817  0.0732  0.0910   0.95 median qi       \n5 percent_diff_f_trait         17.6    12.5    23.0      0.95 median qi       \n6 percent_diff_m_trait         27.7    22.2    33.6      0.95 median qi       \n7 prop_response_male_ftrait     0.541   0.529   0.552    0.95 median qi       \n8 prop_response_male_mtrait     0.561   0.550   0.572    0.95 median qi       \n\n\nGet the total mean response of the organismal phenome\n\n\nShow the code\nmedian_R_total_model &lt;- \n  brm(absolute_R | weights(1/sd) ~ 1 + (1|study_ID),\n      family = brmsfamily(family = \"Gamma\"), # gamma is appropriate for the half-normal distribution created by taking the absolute\n      data = R_medians,\n      prior = c(prior(normal(-2.2, 1), class = Intercept),\n                prior(exponential(1), class = sd),\n                prior(exponential(1), class = shape)),\n      warmup = 4000, iter = 12000,\n      seed = 1, cores = 4, chains = 4,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      file = \"fits/median_R_total_model\")\n\nmedian_R_total_model %&gt;% \n  as_draws_df() %&gt;% \n  mutate(R = exp(b_Intercept)) %&gt;% \n  select(R) %&gt;%\n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE))\n\n\n# A tibble: 1 Ã 5\n  variable median      sd `2.5%` `97.5%`\n  &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 R        0.0763 0.00406 0.0686  0.0846"
  },
  {
    "objectID": "Main_analysis.html#selecting-data-appropriate-for-analysis-1",
    "href": "Main_analysis.html#selecting-data-appropriate-for-analysis-1",
    "title": "Analysis",
    "section": "Selecting data appropriate for analysis",
    "text": "Selecting data appropriate for analysis\nWe use the data archived on the dgrp2 website, which was provided by Huang et al.Â (2015). These data are levels of expression of genes measured across 185 DGRP lines. Huang et alâs data contains Y-linked genes that have higher/equal expression in females in all lines, presumably microarray issues/errors. To be conservative, we restrict our analyses to genes that are known to be on chromosomes that are present in both sexes. After data cleaning, we retain 14,268 genes in our analysis.\nWe also load gene annotation data downloaded from GenBank using the org.Dm.eg.db R package provided by BiocManager. The code used to produce annotations is provided in the code subdirectory, in the get_gene_annotations.R file.\nHuang et al.Â (2015) replicated each gene expression measurement twice. To find line means, we simply take the average value for each line. We then standardise the expression of each gene to have \\(\\mu = 0\\) and \\(\\sigma = 1\\).\n\n\nShow the code\n# load in the gene names, we'll use these for plots and tables\n\nDmel_gene_names &lt;- read_csv(\"data/all_dmel_genes.csv\")\n\n\ngene_annotations &lt;- read_csv(\"data/gene_anntotations.csv\")\n\n\n# Helper to load all the Huang et al. expression data into tidy format\nload_expression_data &lt;- function(gene_annotations){\n  \n  # Note: Huang et al's data contains Y-linked genes that have\n  # higher/equal expression in *females* in all lines, presumably microarray issues/errors.\n  # To be conservative, we restrict our analyses to genes that are known to be on\n  # chromosomes present in both sexes\n  genes_allowed &lt;- gene_annotations %&gt;%\n    filter(chromosome %in% c(\"2L\", \"2R\", \"3L\", \"3R\", \"4\", \"X\")) %&gt;%\n    pull(FBID) \n  \n  females &lt;- read_delim(\"data/huang_transcriptome/dgrp.array.exp.female.txt\", delim = \" \") %&gt;%\n    filter(gene %in% genes_allowed) %&gt;% \n    gather(sample, expression, -gene) %&gt;% \n    mutate(line = map_chr(str_extract_all(sample, \"line_[:digit:]*\"), ~ .x[1]),\n           replicate = map_chr(str_split(sample, \":\"), ~ .x[2]),\n           sex = \"Female\")\n  \n  males &lt;- read_delim(\"data/huang_transcriptome/dgrp.array.exp.male.txt\", delim = \" \") %&gt;%\n    filter(gene %in% genes_allowed) %&gt;% \n    gather(sample, expression, -gene) %&gt;% \n    mutate(line = map_chr(str_extract_all(sample, \"line_[:digit:]*\"), ~ .x[1]),\n           replicate = map_chr(str_split(sample, \":\"), ~ .x[2]),\n           sex = \"Male\")\n  \n  bind_rows(females, males) %&gt;% \n    select(sample, line, sex, replicate, gene, expression)\n}\n\nexpression_line_means &lt;- \n  load_expression_data(gene_annotations) %&gt;% # use the custom function to load expression data\n  mutate(line = str_remove(line, \"line_\"),\n         line = as.factor(line)) %&gt;% \n  group_by(line, sex, gene) %&gt;% \n  mutate(trait_value = mean(expression)) %&gt;% # compute the average between replicates for each gene\n  ungroup() %&gt;% \n  distinct(line, sex, gene, trait_value) %&gt;% \n  group_by(sex, gene) %&gt;% # scale the traits, specific to gene and sex\n  mutate(trait_value = as.numeric(scale(trait_value))) %&gt;% \n  ungroup() %&gt;% \n  rename(Sex = sex) %&gt;% \n# join the fitness data\nleft_join(trait_data %&gt;% distinct(line, female_fitness, male_fitness))\n\n# the transcriptome is large; memory is therefore a consistent problem with this analysis - it helps to clear often\ninvisible(gc())"
  },
  {
    "objectID": "Main_analysis.html#estimating-r",
    "href": "Main_analysis.html#estimating-r",
    "title": "Analysis",
    "section": "Estimating \\(R\\)",
    "text": "Estimating \\(R\\)\n\nBuild models to calculate \\(R_{FF}\\) & \\(R_{MF}\\)\nTo estimate the covariance between \\(A_w\\) and \\(A_z\\) (which in this case is a transcript), we fitted bivariate Bayesian linear models using the brms package (BÃ¼rkner, 2017) for R version 4.2.2. For each combination of trait/transcript and sex, we used line means for the focal trait/transcript and the fitness of the focal sex as the two response variables and fitted an intercept-only Gaussian model. Each model returned a posterior distribution of the residual correlation between trait/transcript and fitness, which for data expressed in standard units is equivalent to the covariance.\nBuild functions to run the models\n\n\nShow the code\n# RFF estimates\n\nfemale_transcripts &lt;- expression_line_means %&gt;% filter(Sex == \"Female\")\n\ntranscript_list &lt;- unique(female_transcripts$gene) # an input to the map_dfr() function that we'll need in a few chunks time\n\n# code the model structure we will use for all traits/transcripts using one example - `FBgn0000014`. We can then use the update() function to run this model many times, once for each trait/transcript measured in females. update() makes this process many times faster, because the model can immediately start sampling, without the need to recompile. \n\nRFF_transcriptome_model &lt;-\n  brm(data = female_transcripts %&gt;% filter(gene == \"FBgn0000014\"),\n      family = gaussian,\n      bf(mvbind(female_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = femalefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = femalefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, file = \"fits/RFF_transcriptome_model\",\n      backend = \"cmdstanr\", refresh = 400)  \n\n\n# make a function to update the model and the posterior sample output with the 'selected trait'\n\nRFF_transcriptome_calculator &lt;- function(selected_gene){\n  \n  data &lt;- female_transcripts %&gt;% filter(gene == selected_gene)\n  \n  model &lt;- update(\n    RFF_transcriptome_model, newdata = data,\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, backend = \"cmdstanr\", refresh = 400)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_female = rescor__femalefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_gene) %&gt;% \n    select(Trait, Response_to_selection_female) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n# RMF estimates\n\nRMF_transcriptome_model &lt;-\n  brm(data = female_transcripts %&gt;% filter(gene == \"FBgn0000014\"),\n      family = gaussian,\n      bf(mvbind(male_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = malefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = malefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, file = \"fits/RMF_transcriptome_model\",\n      backend = \"cmdstanr\", refresh = 400) \n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRMF_transcriptome_calculator &lt;- function(selected_gene){\n  \n  data &lt;- female_transcripts %&gt;% filter(gene == selected_gene)\n  \n  model &lt;- update(\n    RMF_transcriptome_model, newdata = data,\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, backend = \"cmdstanr\", refresh = 400)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_male = rescor__malefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_gene) %&gt;% \n    select(Trait, Response_to_selection_male) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n\n\n\nBuild models to calculate \\(R_{FM}\\) & \\(R_{MM}\\)\n\n\nShow the code\n# RMM estimates\n\nmale_transcripts &lt;- expression_line_means %&gt;% filter(Sex == \"Male\")\n\nRMM_transcriptome_model &lt;-\n  brm(data = male_transcripts %&gt;% filter(gene == \"FBgn0000014\"),\n      family = gaussian,\n      bf(mvbind(male_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = malefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = malefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, file = \"fits/RMM_transcriptome_model\",\n      backend = \"cmdstanr\", refresh = 400)    \n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRMM_transcriptome_calculator &lt;- function(selected_gene){\n  \n  data &lt;- male_transcripts %&gt;% filter(gene == selected_gene)\n  \n  model &lt;- update(\n    RMM_transcriptome_model, newdata = data,\n    chains = 4, cores = 4, iter = 4000, warmup = 2000,\n    seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_male = rescor__malefitness__traitvalue) %&gt;%\n    mutate(Trait = selected_gene) %&gt;% \n    select(Trait, Response_to_selection_male) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n# RFM estimates\n\nRFM_transcriptome_model &lt;-\n  brm(data = male_transcripts %&gt;% filter(gene == \"FBgn0000014\"),\n      family = gaussian,\n      bf(mvbind(female_fitness, trait_value) ~ 1) + set_rescor(TRUE),\n      prior = c(prior(normal(0, 0.1), class = Intercept, resp = femalefitness),\n                prior(normal(0, 0.1), class = Intercept, resp = traitvalue),\n                prior(normal(1, 0.1), class = sigma, resp = femalefitness),\n                prior(normal(1, 0.1), class = sigma, resp = traitvalue),\n                prior(lkj(2), class = rescor)),\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1, file = \"fits/RFM_transcriptome_model\",\n      backend = \"cmdstanr\", refresh = 400)    \n\n# make a function to update the model and the posterior sample output with your desired trait\n\nRFM_transcriptome_calculator &lt;- function(selected_trait){\n  \n  data &lt;- male_transcripts %&gt;% filter(gene == selected_trait)\n  \n  model &lt;- update(\n    RFM_transcriptome_model, newdata = data,\n      chains = 4, cores = 4, iter = 4000, warmup = 2000,\n      seed = 1)\n  \n  posterior &lt;- \n    as_draws_df(model) %&gt;% \n    rename(Response_to_selection_female = rescor__femalefitness__traitvalue) %&gt;% \n    mutate(Trait = selected_gene) %&gt;% \n    select(Trait, Response_to_selection_female) %&gt;% \n    as_tibble()\n  \n  posterior\n}\n\n\n\n\nRun the models for all the traits\nRun the models using RFF_transcriptome_calculator, RMF_transcriptome_calculator, RMM_transcriptome_calculator and RFM_transcriptome_calculator.\nThis takes a fair bit of memory, so it might be necessary to run the models in chunks rather than all in one go. To do this, you can break the transcript_list_female list into parts and feed it into the map_dfr function. The completed subset can then be saved to your hard disk, removed from R and cleared from your computers memory. This frees up memory to run another chunk without losing progress. Expand the code chunk below to see an example. All other chunks have been run and saved for later use.\n\n\nShow the code\n# run the RFF function\n\ntranscript_list_1 &lt;- transcript_list[1:2000]\n\nif(!file.exists(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\")){\n  RFF_transcript_1 &lt;- map_dfr(transcript_list_1, RFF_transcriptome_calculator)\n  write_csv(RFF_transcript_1, \n            file = \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\")\n  rm(RFF_transcript_1)\n  invisible(gc())\n} else RFF_transcript_1 &lt;- read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\")\n\n\nLoad all the posterior draws, combine and summarise and save the result to the hard disk. This allows us to simply load the summarised results once everything has been run once.\n\n\nShow the code\nif(!file.exists(\"data/transcriptome_output/R_summarised_transcriptome.csv\")){\nRFF_transcriptome_complete &lt;- \n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_7.csv\")\n  ) %&gt;% \n  group_by(Trait) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;% \n  select(-variable) %&gt;% \n  mutate(absolute_R = abs(median),\n         Fitness_Sex = \"Female\",\n         Trait_Sex = \"Female\")\n\ninvisible(gc())\n\nRMF_transcriptome_complete &lt;- \n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_7.csv\")\n  ) %&gt;% \n  group_by(Trait) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;% \n  select(-variable) %&gt;% \n  mutate(absolute_R = abs(median),\n         Fitness_Sex = \"Male\",\n         Trait_Sex = \"Female\")\n\ninvisible(gc())\n\nRMM_transcriptome_complete &lt;- \n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_7.csv\")\n  ) %&gt;% \n  group_by(Trait) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;% \n  select(-variable) %&gt;% \n  mutate(absolute_R = abs(median),\n         Fitness_Sex = \"Male\",\n         Trait_Sex = \"Male\")\n\ninvisible(gc())\n\nRFM_transcriptome_complete &lt;- \n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_7.csv\")\n  ) %&gt;% \n  group_by(Trait) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;% \n  select(-variable) %&gt;% \n  mutate(absolute_R = abs(median),\n         Fitness_Sex = \"Female\",\n         Trait_Sex = \"Male\")\n\ninvisible(gc())\n\nR_summarised_transcriptome &lt;-\n  bind_rows(RFF_transcriptome_complete, RMF_transcriptome_complete,\n            RFM_transcriptome_complete, RMM_transcriptome_complete)\n\nwrite_csv(R_summarised_transcriptome, \"data/transcriptome_output/R_summarised_transcriptome.csv\")\n\n} else R_summarised_transcriptome &lt;- read_csv(\"data/transcriptome_output/R_summarised_transcriptome.csv\")"
  },
  {
    "objectID": "Main_analysis.html#calculate-various-metrics-1",
    "href": "Main_analysis.html#calculate-various-metrics-1",
    "title": "Analysis",
    "section": "Calculate various metrics",
    "text": "Calculate various metrics\nFirst, find \\(R\\), the overall response to selection on both sexes\n\n\nShow the code\nif(!file.exists(\"data/transcriptome_output/R_overall_transcript_summarised.csv\")){\n  R_overall_transcript_summarised &lt;-\n    bind_rows(\n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RFF_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\n                  \"data/transcriptome_output/transcriptome_chunks/RMF_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      # now the traits measured in males\n      \n      left_join(read_csv(\n        \"data/transcriptome_output/transcriptome_chunks/RMM_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_overall =(Response_to_selection_female + Response_to_selection_male)/2) %&gt;%\n        select(Trait, R_overall) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_overall = median) %&gt;%\n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\")\n    )\n  \n  write_csv(R_overall_transcript_summarised, \"data/transcriptome_output/R_overall_transcript_summarised.csv\")\n} else R_overall_transcript_summarised &lt;- read_csv(\"data/transcriptome_output/R_overall_transcript_summarised.csv\")\n\n\nNow find \\(\\Delta R\\)\n\n\nShow the code\nif(!file.exists(\"data/transcriptome_output/R_diff_transcript_summarised.csv\")){\n  R_diff_transcript_summarised &lt;-\n    bind_rows(\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n                mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;%  \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n\n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Female\"),\n      \n      # now the traits measured in males\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_1.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_2.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_3.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_4.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_5.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_6.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\"),\n      \n      left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(),\n                read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_7.csv\") %&gt;% \n                  group_by(Trait) %&gt;% \n                  mutate(draw = row_number()) %&gt;% \n                  ungroup(), by = c(\"Trait\", \"draw\")) %&gt;% \n        mutate(R_diff = Response_to_selection_female - Response_to_selection_male) %&gt;%\n        select(Trait, R_diff) %&gt;% \n        group_by(Trait) %&gt;% \n        summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;%\n        ungroup() %&gt;% \n        rename(R_diff = median) %&gt;% \n        select(-variable) %&gt;% \n        mutate(Trait_Sex = \"Male\")\n    )\n  \n  write_csv(R_diff_transcript_summarised, \"data/transcriptome_output/R_diff_transcript_summarised.csv\")\n} else R_diff_transcript_summarised &lt;- read_csv(\"data/transcriptome_output/R_diff_transcript_summarised.csv\")"
  },
  {
    "objectID": "Main_analysis.html#calculating-evidence-ratios-1",
    "href": "Main_analysis.html#calculating-evidence-ratios-1",
    "title": "Analysis",
    "section": "Calculating evidence ratios",
    "text": "Calculating evidence ratios\nUse the brms hypothesis() function to compute evidence ratios, just as we did for the organismal level phenotypic traits.\n\n\nShow the code\n# build a function to calculate the evidence ratio, get the relevant info from the output and convert it to a tibble. Basically the same function, just with a different dataframe input and a memory clearing step that slows it down but allows it to run for many traits. \n\nfind_evidence_ratios_transcriptome &lt;- function(Trait_name, specify_hypothesis){\n  x &lt;- hypothesis(R_transcriptome %&gt;% \n                    filter(Trait == Trait_name),\n                  specify_hypothesis)\n  \n  x &lt;- x$hypothesis\n  \n  invisible(gc())\n  \n  x %&gt;% as_tibble() %&gt;% \n    select(Evid.Ratio) %&gt;% \n    mutate(Trait = Trait_name)\n}\n\n\nThis pc has 16gb memory; not enough to load in all the transcript posterior draws at once. Having previously saved these to the hard disk we load the draws for all female measured traits and calculate the evidence ratio that \\(R_{FF} &gt; 0\\), \\(R_{MF} &gt; 0\\), \\(R_F &gt; 0\\) and \\(\\Delta R &gt; 0\\). The draws for the female measured traits were then removed from the computers memory using the rm() and gc() functions and the process was repeated for the male measured traits.\n\n\nShow the code\n# find evidence ratios for the traits measured in females\n\nif(!file.exists(\"data/transcriptome_output/evidence_ratios_transcriptome_female.csv\")){ # name refers to traits measured in females\n\nR_transcriptome &lt;-\n  cbind(\n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_7.csv\")\n  ),\n   rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_7.csv\")) %&gt;% \n      select(-Trait)\n   )\n\nR_transcriptome &lt;- \n  R_transcriptome %&gt;% \n  mutate(R_overall = (Response_to_selection_female - Response_to_selection_male) / 2,\n         R_diff = Response_to_selection_female - Response_to_selection_male) \n  \n# calculate evidence ratios \n\nR_evidence_ratios_female &lt;- \n  map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"Response_to_selection_female &gt; 0\") %&gt;% \n  rename(Female_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_male &lt;-\n  map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"Response_to_selection_male &gt; 0\") %&gt;% \n  rename(Male_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_overall &lt;- \n    map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"R_overall &gt; 0\") %&gt;% \n  rename(Overall_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_diff &lt;- \n    map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"R_diff &gt; 0\") %&gt;% \n  rename(Diff_Evid_Ratio = Evid.Ratio)\n\n# write each result to csv \n\nevidence_ratios_transcriptome_female &lt;-\n  R_evidence_ratios_female %&gt;% \n  left_join(R_evidence_ratios_male) %&gt;% \n  left_join(R_evidence_ratios_overall) %&gt;% \n  left_join(R_evidence_ratios_diff) %&gt;% \n  select(Trait, everything()) %&gt;% \n  rename(Female_Evid_Ratio = Female_evidence_ratio) %&gt;%  # fixing small typo\n  mutate(Trait_Sex = \"Female\")\n\nwrite_csv(evidence_ratios_transcriptome_female, \"data/transcriptome_output/evidence_ratios_transcriptome_female.csv\")\n\n} else evidence_ratios_transcriptome_female &lt;- read_csv(\"data/transcriptome_output/evidence_ratios_transcriptome_female.csv\")\n\n\n\n\nShow the code\n# find evidence ratios for the traits measured in males\n\nif(!file.exists(\"data/transcriptome_output/evidence_ratios_transcriptome_male.csv\")){ # name refers to traits measured in females\n\nR_transcriptome &lt;-\n  cbind(\n  rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_7.csv\")\n  ),\n   rbind(\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_1.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_2.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_3.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_4.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_5.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_6.csv\"),\n    read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_7.csv\")) %&gt;% \n      select(-Trait)\n   )\n\nR_transcriptome &lt;- \n  R_transcriptome %&gt;% \n  mutate(R_overall = (Response_to_selection_female - Response_to_selection_male) / 2,\n         R_diff = Response_to_selection_female - Response_to_selection_male) \n  \n# calculate evidence ratios \n\nR_evidence_ratios_female &lt;- \n  map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"Response_to_selection_female &gt; 0\") %&gt;% \n  rename(Female_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_male &lt;-\n  map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"Response_to_selection_male &gt; 0\") %&gt;% \n  rename(Male_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_overall &lt;- \n    map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"R_overall &gt; 0\") %&gt;% \n  rename(Overall_Evid_Ratio = Evid.Ratio)\n\nR_evidence_ratios_diff &lt;- \n    map_dfr(transcript_list, \n          find_evidence_ratios_transcriptome, \n          \"R_diff &gt; 0\") %&gt;% \n  rename(Diff_Evid_Ratio = Evid.Ratio)\n\nevidence_ratios_transcriptome_male &lt;-\n  R_evidence_ratios_female %&gt;% \n  left_join(R_evidence_ratios_male) %&gt;% \n  left_join(R_evidence_ratios_overall) %&gt;% \n  left_join(R_evidence_ratios_diff) %&gt;% \n  select(Trait, everything()) %&gt;% \n  rename(Female_Evid_Ratio = Female_evidence_ratio) %&gt;%  # fixing small typo\n  mutate(Trait_Sex = \"Male\")\n\nwrite_csv(evidence_ratios_transcriptome_male, \"data/transcriptome_output/evidence_ratios_transcriptome_male.csv\")\n\n} else \n  evidence_ratios_transcriptome_male &lt;- read_csv(\"data/transcriptome_output/evidence_ratios_transcriptome_male.csv\")\n\n\nTo calculate evidence ratios for sexually concordant responses to selection we use the same function as for the organismal-level phenotypic traits. Run the function in chunks, save them to hard-disk, clear memory and repeat. If already done, just load.\n\n\nShow the code\nif(!file.exists(\"data/transcriptome_output/concord_evidence_ratio_data.csv\")){\n\nfemale_transcripts_1 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_1.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_1.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_1 &lt;- unique(female_transcripts_1$Trait)\n\nf1 &lt;- get_evidence_ratios(female_transcripts_1, trait_list_1, \"Female\")\n\nrm(female_transcripts_1)\ninvisible(gc())\n\nfemale_transcripts_2 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_2.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_2.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_2 &lt;- unique(female_transcripts_2$Trait)\n\nf2 &lt;- get_evidence_ratios(female_transcripts_2, trait_list_2, \"Female\")\n\nrm(female_transcripts_2)\ninvisible(gc())\n\nfemale_transcripts_3 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_3.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_3.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_3 &lt;- unique(female_transcripts_3$Trait)\n\nf3 &lt;- get_evidence_ratios(female_transcripts_3, trait_list_3, \"Female\")\n\nrm(female_transcripts_3)\ninvisible(gc())\n\nfemale_transcripts_4 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_4.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_4.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_4 &lt;- unique(female_transcripts_4$Trait)\n\nf4 &lt;- get_evidence_ratios(female_transcripts_4, trait_list_4, \"Female\")\n\nrm(female_transcripts_4)\ninvisible(gc())\n\nfemale_transcripts_5 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_5.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_5.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_5 &lt;- unique(female_transcripts_5$Trait)\n\nf5 &lt;- get_evidence_ratios(female_transcripts_5, trait_list_5, \"Female\")\n\nrm(female_transcripts_5)\ninvisible(gc())\n\nfemale_transcripts_6 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_6.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_6.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_6 &lt;- unique(female_transcripts_6$Trait)\n\nf6 &lt;- get_evidence_ratios(female_transcripts_6, trait_list_6, \"Female\")\n\nrm(female_transcripts_6)\ninvisible(gc())\n\nfemale_transcripts_7 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RFF_transcript_7.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RMF_transcript_7.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\ntrait_list_7 &lt;- unique(female_transcripts_7$Trait)\n\nf7 &lt;- get_evidence_ratios(female_transcripts_7, trait_list_7, \"Female\")\n\nrm(female_transcripts_7)\ninvisible(gc())\n\n# now the transcripts measured in males\n\nmale_transcripts_1 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_1.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_1.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_1 &lt;- unique(male_transcripts_1$Trait)\n\nm1 &lt;- get_evidence_ratios(male_transcripts_1, m_trait_list_1, \"Male\")\n\nrm(male_transcripts_1)\ninvisible(gc())\n\nmale_transcripts_2 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_2.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_2.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_2 &lt;- unique(male_transcripts_2$Trait)\n\nm2 &lt;- get_evidence_ratios(male_transcripts_2, m_trait_list_2, \"Male\")\n\nrm(male_transcripts_2)\ninvisible(gc())\n\nmale_transcripts_3 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_3.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_3.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_3 &lt;- unique(male_transcripts_3$Trait)\n\nm3 &lt;- get_evidence_ratios(male_transcripts_3, m_trait_list_3, \"Male\")\n\nrm(male_transcripts_3)\ninvisible(gc())\n\nmale_transcripts_4 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_4.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_4.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_4 &lt;- unique(male_transcripts_4$Trait)\n\nm4 &lt;- get_evidence_ratios(male_transcripts_4, m_trait_list_4, \"Male\")\n\nrm(male_transcripts_4)\ninvisible(gc())\n\nmale_transcripts_5 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_5.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_5.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_5 &lt;- unique(male_transcripts_5$Trait)\n\nm5 &lt;- get_evidence_ratios(male_transcripts_5, m_trait_list_5, \"Male\")\n\nrm(male_transcripts_5)\ninvisible(gc())\n\nmale_transcripts_6 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_6.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_6.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_6 &lt;- unique(male_transcripts_6$Trait)\n\nm6 &lt;- get_evidence_ratios(male_transcripts_6, m_trait_list_6, \"Male\")\n\nrm(male_transcripts_6)\ninvisible(gc())\n\nmale_transcripts_7 &lt;-\n  left_join(read_csv(\"data/transcriptome_output/transcriptome_chunks/RMM_transcript_7.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(),\n            read_csv(\"data/transcriptome_output/transcriptome_chunks/RFM_transcript_7.csv\") %&gt;% \n              group_by(Trait) %&gt;% \n              mutate(draw = row_number()) %&gt;% \n              ungroup(), by = c(\"Trait\", \"draw\"))\n\nm_trait_list_7 &lt;- unique(male_transcripts_7$Trait)\n\nm7 &lt;- get_evidence_ratios(male_transcripts_7, m_trait_list_7, \"Male\")\n\nrm(male_transcripts_7)\ninvisible(gc())\n\nconcord_evidence_ratio_data &lt;- \n  bind_rows(f1, f2, f3, f4, f5, f6, f7, m1, m2, m3, m4, m5, m6, m7)\n\nwrite_csv(concord_evidence_ratio_data, \"data/transcriptome_output/concord_evidence_ratio_data.csv\")\n\n} else concord_evidence_ratio_data &lt;- read_csv(\"data/transcriptome_output/concord_evidence_ratio_data.csv\")\n\n\nBind all the evidence ratios together\n\n\nShow the code\nevidence_ratios_transcriptome &lt;-\n  evidence_ratios_transcriptome_female %&gt;% \n  bind_rows(evidence_ratios_transcriptome_male %&gt;% rename(Male_Evid_Ratio = Male_evidence_ratio)) %&gt;%  # fix a typo\n  left_join(concord_evidence_ratio_data %&gt;% rename(Concord_Evid_Ratio = evidence_ratio_concord) %&gt;% select(Trait, Trait_Sex, Concord_Evid_Ratio),\n            by = c(\"Trait\", \"Trait_Sex\")) %&gt;% \n  left_join(gene_annotations %&gt;% rename(Trait = FBID)) %&gt;% \n  mutate(chromosome_numeric = case_when(chromosome == \"2L\" ~ 1,\n                                        chromosome == \"2R\" ~ 2,\n                                        chromosome == \"3L\" ~ 3,\n                                        chromosome == \"3R\" ~ 4,\n                                        chromosome == \"X\" ~ 5)) %&gt;% \n  arrange(chromosome, Trait) %&gt;% \n  mutate(position = 1:n(),\n         gene_symbol = case_when(Trait_Sex == \"Female\" ~ paste(gene_symbol, \"(F)\", sep = \" \"),\n                                Trait_Sex == \"Male\" ~ paste(gene_symbol, \"(M)\", sep = \" \"),\n                                .default = gene_symbol),\n         Trait_Sex = if_else(Trait_Sex == \"Female\", \"Traits measured in females\",\n                                         \"Traits measured in males\")) %&gt;% \n  select(Trait, everything())\n\n\nFind the number of evidence ratios &gt; 39 or &lt; 1/39 for each partition of \\(R\\)\n\n\nShow the code\nresponse_pos &lt;- evidence_ratios_transcriptome %&gt;% filter(Overall_Evid_Ratio &gt; 39) %&gt;% arrange(-Overall_Evid_Ratio)\n\nresponse_neg &lt;- evidence_ratios_transcriptome %&gt;% filter(Overall_Evid_Ratio &lt; 1/39) %&gt;% arrange(Overall_Evid_Ratio)\n\nresponse_to_female_pos &lt;- evidence_ratios_transcriptome %&gt;% filter(Female_Evid_Ratio &gt; 39) %&gt;% arrange(-Female_Evid_Ratio)\n\nresponse_to_female_neg &lt;- evidence_ratios_transcriptome %&gt;% filter(Female_Evid_Ratio &lt; 1/39) %&gt;% arrange(Female_Evid_Ratio)\n\nresponse_to_male_pos &lt;- evidence_ratios_transcriptome %&gt;% filter(Male_Evid_Ratio &gt; 39) %&gt;% arrange(-Male_Evid_Ratio)\n\nresponse_to_male_neg &lt;- evidence_ratios_transcriptome %&gt;% filter(Male_Evid_Ratio &lt; 1/39) %&gt;% arrange(Male_Evid_Ratio)\n\nresponse_sexes_diff &lt;- \n  evidence_ratios_transcriptome %&gt;% filter(Diff_Evid_Ratio &gt; 39 | Diff_Evid_Ratio &lt; 1/39) %&gt;% arrange(-Diff_Evid_Ratio)\n\nsexually_concordant &lt;- evidence_ratios_transcriptome %&gt;% filter(Concord_Evid_Ratio &gt; 39) %&gt;% arrange(-Concord_Evid_Ratio)\n\nsexually_antagonistic &lt;- evidence_ratios_transcriptome %&gt;% filter(Concord_Evid_Ratio &lt; 1/39) %&gt;% arrange(Concord_Evid_Ratio)\n\n\n\n684 transcripts are predicted to have a positive overall response to selection, while 844 transcripts ar expected to have a negative overall response.\nIn response to selection on females, 424 transcripts are expected to increase in expression, whereas 530 are expected to decrease in mean expression.\nIn response to selection on males, 468 transcripts are expected to increase in expression, whereas 619 are expected to decrease in mean expression.\n575 transcripts have notably different responses to selection on females compared with males.\n1 transcripts are expected to have a sexually antagonistic response to selection, while 25 transcripts are expected to have a sexually concordant response. From these numbers, we can roughly estimate that 3.8% of transcripts that are responding to selection in both sexes are sexually antagonistic.\n\nBuild the evidence ratio plots\n\n\nShow the code\nx_labels &lt;- evidence_ratios_transcriptome %&gt;% \n  group_by(chromosome) %&gt;% \n  summarise(position = min(position) + (max(position) - min(position))/2)\n\n\nguild_pal_transcriptome &lt;- c(\"#6e7cb9\", \"#7bbcd5\", \"#d0e2af\", \"#f5db99\",\n               \"#e89c81\", \"#d2848d\")\n\nFig_S4_data &lt;-\nevidence_ratios_transcriptome %&gt;% \n  mutate(Female_Evid_Ratio = case_when(is.infinite(Female_Evid_Ratio) ~ 8000,\n                                        Female_Evid_Ratio == 0 ~ 1/8000,\n                                        .default = Female_Evid_Ratio),\n         Male_Evid_Ratio = case_when(is.infinite(Male_Evid_Ratio) ~ 8000,\n                                        Male_Evid_Ratio == 0 ~ 1/8000,\n                                        .default = Male_Evid_Ratio),\n         Overall_Evid_Ratio = case_when(is.infinite(Overall_Evid_Ratio) ~ 8000,\n                                        Overall_Evid_Ratio == 0 ~ 1/8000,\n                                        .default = Overall_Evid_Ratio))\n\nplot_transcriptome_a &lt;- \n  Fig_S4_data %&gt;% \n  ggplot(aes(x = position, y = log2(Female_Evid_Ratio))) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Female_Evid_Ratio != 8000 | Female_Evid_Ratio != 1/8000),\n             aes(colour = chromosome),\n             size = 2.5, alpha = 0.8, shape = 16) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Female_Evid_Ratio == 8000 | Female_Evid_Ratio == 1/8000),\n             aes(fill = chromosome),\n             size = 3.5, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal_transcriptome) +\n  scale_fill_manual(values = guild_pal_transcriptome) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$chromosome) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14), \n                     labels = c(paste(\"1/\",2 ^ c(14, 12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12,14)), \n                     limits = c(-16, 16)) +\n  labs(x = NULL, y = \"_R~F~_ log~2~(ER)\") +\n  geom_label_repel(data = Fig_S4_data %&gt;% \n                     filter(Female_Evid_Ratio &gt; 3000 | Female_Evid_Ratio &lt; 1/3000 ), \n                   aes(label = gene_symbol),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 10),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_transcriptome_b &lt;- \n  Fig_S4_data %&gt;% \n  ggplot(aes(x = position, y = log2(Male_Evid_Ratio))) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Male_Evid_Ratio != 8000 | Male_Evid_Ratio != 1/8000),\n             aes(colour = chromosome),\n             size = 2.5, alpha = 0.8, shape = 16) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Male_Evid_Ratio == 8000 | Male_Evid_Ratio == 1/8000),\n             aes(fill = chromosome),\n             size = 3.5, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal_transcriptome) +\n  scale_fill_manual(values = guild_pal_transcriptome) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$chromosome) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14), \n                     labels = c(paste(\"1/\",2 ^ c(14, 12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12,14)), \n                     limits = c(-15, 15)) +\n  labs(x = NULL, y = \"_R~M~_ log~2~(ER)\") +\n  geom_label_repel(data = Fig_S4_data %&gt;% \n                     filter(Male_Evid_Ratio &gt; 3000 | Male_Evid_Ratio &lt; 1/3000 ),  \n                   aes(label = gene_symbol),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 10),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_transcriptome_c &lt;- \n  Fig_S4_data %&gt;% \n  ggplot(aes(x = position, y = log2(Overall_Evid_Ratio))) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Overall_Evid_Ratio != 8000 | Overall_Evid_Ratio != 1/8000),\n             aes(colour = chromosome),\n             size = 2.5, alpha = 0.8, shape = 16) +\n  geom_point(data = Fig_S4_data %&gt;% filter(Overall_Evid_Ratio == 8000 | Overall_Evid_Ratio == 1/8000),\n             aes(fill = chromosome),\n             size = 3.5, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal_transcriptome) +\n  scale_fill_manual(values = guild_pal_transcriptome) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$chromosome) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14), \n                     labels = c(paste(\"1/\",2 ^ c(14, 12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12,14)), \n                     limits = c(-18, 18)) +\n  labs(x = \"Chromosome arm\",\n       y = \"_R_  log~2~(ER)\") +\n  geom_label_repel(data = Fig_S4_data %&gt;% \n                     filter(Overall_Evid_Ratio &gt; 3000 | Overall_Evid_Ratio &lt; 1/3000),  \n                   aes(label = gene_symbol),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 10),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\n(Figure_S3 &lt;- plot_transcriptome_a / plot_transcriptome_b / plot_transcriptome_c +\n  plot_annotation(tag_levels = 'a')\n)\n\n\n\n\n\n\n\n\n\nFigure S3. Points show evidence ratios (ERs) for gene expression traits. a shows ERs for positive evolutionary change in traits in response to selection on females (\\(R_{F}\\)), b shows ERs for positive evolutionary change in traits in response to selection on males (\\(R_{M}\\)) and c ERs for the total evolutionary response to selection (\\(\\frac{1}{2}(R_F + R_M)\\)). The dashed lines indicate an evidence ratio of 1, where the probability that \\(R\\) &gt; 0 is equal to the probability that \\(R\\) &lt; 0. ER &gt; 1 indicates a positive response is more likely, whereas ER &lt; 1 indicates a negative response is more likely. The upper dotted line on each plot indicates an evidence ratio of 39, while the lower dotted line indicates an evidence ratio of 1/39; these correspond strongly with the frequentist \\(p\\) = 0.05. Genes represented by large points with black outlines indicate very extreme cases where evidence ratios could not be calculated, as the entire posterior distribution was found on one side of zero. Traits with the most extreme evidence ratios are labelled.\n\n\nShow the code\nplot_transcriptome_d &lt;- \n  evidence_ratios_transcriptome %&gt;% \n  ggplot(aes(x = position, y = log2(Diff_Evid_Ratio))) +\n  geom_point(aes(colour = chromosome),\n             size = 2.5, alpha = 0.8, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal_transcriptome) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$chromosome) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12), \n                     labels = c(paste(\"1/\",2 ^ c(12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12)), \n                     limits = c(-13, 13)) +\n  labs(x = \"Chromosome arm\",\n       y = \"&Delta;_R_  log~2~(ER)\") +\n  geom_label_repel(data = evidence_ratios_transcriptome %&gt;% \n                     filter(Diff_Evid_Ratio &gt; 1000 | Diff_Evid_Ratio &lt; 1/1000 ),  \n                   aes(label = gene_symbol),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\nplot_transcriptome_e &lt;- \n  evidence_ratios_transcriptome %&gt;% \n  ggplot(aes(x = position, y = log2(Concord_Evid_Ratio))) +\n  geom_point(aes(colour = chromosome),\n             size = 2.5, alpha = 0.8, shape = 16) +\n  geom_hline(yintercept = log2(1), linetype = 2, linewidth = 1) +\n  geom_hline(yintercept = log2(39), linetype = 3, linewidth = 0.9) +\n  geom_hline(yintercept = log2(1/39), linetype = 3, linewidth = 0.9) +\n  scale_colour_manual(values = guild_pal_transcriptome) +\n  scale_x_continuous(breaks = x_labels$position, labels = x_labels$chromosome) +\n  scale_y_continuous(expand = c(0.01, 0), breaks = c(-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12), \n                     labels = c(paste(\"1/\",2 ^ c(12, 10, 8, 6, 4, 2), sep = \"\"), 2 ^ c(0, 2,4,6,8,10,12)), limits = c(-12, 12)) +\n  labs(x = \"Chromosome arm\",\n       y = \"Sexual concordance log~2~(ER)\") +\n  geom_label_repel(data = evidence_ratios_transcriptome %&gt;% \n                     filter(Concord_Evid_Ratio &gt; 39 | Concord_Evid_Ratio &lt; 1/39), \n                   aes(label = gene_symbol),\n                   fill = \"white\",\n                   size = 3, alpha = 0.9,\n                   min.segment.length = 0, seed = 1,\n                   box.padding = 0.5, point.padding = 0.5,\n                   max.overlaps = 30) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.text.x=element_text(size = 15),\n        axis.title.x = element_text(size = 15),\n        axis.title.y = element_markdown(size = 15),\n        strip.text = element_text(size = 15),\n        plot.margin = unit(c(0,0,0,0), \"mm\"))\n\n\n(Figure_4 &lt;- plot_transcriptome_d/ plot_transcriptome_e + plot_annotation(tag_levels = \"a\")\n)\n\n\n\n\n\n\n\n\n\nFigure 4. Points show evidence ratios (ERs) for a \\(\\Delta R\\) (\\(R\\) in females - \\(R\\) in males) and b sexual concordance, for all measured traits in the transcriptome. Dashed and dotted lines are as in Figure 3. In a, traits with ER &gt; 1000 or &lt; 1/1000 are labelled with gene symbols, whereas in b, traits with ER &gt; 39 or &lt; 1/39 are labelled."
  },
  {
    "objectID": "Main_analysis.html#table-s3-supplementary-dataset-3",
    "href": "Main_analysis.html#table-s3-supplementary-dataset-3",
    "title": "Analysis",
    "section": "Table S3/ Supplementary dataset 3",
    "text": "Table S3/ Supplementary dataset 3\nTable S3 / Supplementary dataset 3: \\(R\\) partitions and associated evidence ratios for the gene expression trait dataset. Data can be downloaded as a .csv file from the github repository associated with this project.\n\n\nShow the code\nall_transcriptome_summary &lt;-\n  R_summarised_transcriptome %&gt;% \n  select(-c(sd, absolute_R)) %&gt;% \n  pivot_wider(names_from = c(Fitness_Sex), values_from = 2:4) %&gt;% \n  rename(`R female` = median_Female,\n         `R female 2.5% CI` = `2.5%_Female`,\n         `R female 97.5% CI` = `97.5%_Female`,\n         `R male` = median_Male,\n         `R male 2.5% CI` = `2.5%_Male`,\n         `R male 97.5% CI` = `97.5%_Male`) %&gt;% \n  left_join(\n    \n    R_overall_transcript_summarised %&gt;%\n      select(-sd) %&gt;% \n      rename( R = R_overall,\n              `R 2.5% CI` = `2.5%`,\n              `R 97.5% CI` = `97.5%`),\n    by = c(\"Trait\", \"Trait_Sex\")) %&gt;% \n  left_join(\n    R_diff_transcript_summarised %&gt;%\n      select(-sd) %&gt;% \n      rename(`Delta R` = R_diff,\n             `Delta R 2.5% CI` = `2.5%`,\n             `Delta R 97.5% CI` = `97.5%`),\n    by = c(\"Trait\", \"Trait_Sex\")) %&gt;% \n  \n  left_join(evidence_ratios_transcriptome %&gt;% \n              mutate(Trait_Sex = case_when(Trait_Sex == \"Traits measured in females\" ~ \"Female\",\n                                           Trait_Sex == \"Traits measured in males\" ~ \"Male\")) %&gt;% \n              select(-c(entrez_id, chromosome, chromosome_numeric, position)) %&gt;% \n              rename(`R ER` = Overall_Evid_Ratio, `R female ER` = Female_Evid_Ratio,\n                     `R male ER` = Male_Evid_Ratio, `Delta R ER` = Diff_Evid_Ratio,\n                     `Sexual concordance ER` = Concord_Evid_Ratio)) %&gt;% \n  rename(`Sex trait was measured in` = Trait_Sex) %&gt;% \n    select(Trait, gene_name, gene_symbol, `Sex trait was measured in`, R, `R 2.5% CI`, `R 97.5% CI`, `R ER`, \n           `R female`, `R female 2.5% CI`, `R female 97.5% CI`, `R female ER`,\n           `R male`, `R male 2.5% CI`, `R male 97.5% CI`, `R male ER`,\n           `Delta R`, `Delta R 2.5% CI`, `Delta R 97.5% CI`, `Delta R ER`, `Sexual concordance ER`) %&gt;% \n  mutate(across(c(5,6,7,9,10,11,13,14,15,17,18,19), ~round(.x, 3)),\n         across(ends_with(\"ER\"), ~ round(.x, 4))) \n\nwrite_csv(all_transcriptome_summary, \"data/transcriptome_output/Supplementary_dataset_4.csv\")\n\nmy_data_table(all_transcriptome_summary)"
  },
  {
    "objectID": "Main_analysis.html#estimate-the-correlation-between-r_f-and-r_m-1",
    "href": "Main_analysis.html#estimate-the-correlation-between-r_f-and-r_m-1",
    "title": "Analysis",
    "section": "Estimate the correlation between \\(R_F\\) and \\(R_M\\)",
    "text": "Estimate the correlation between \\(R_F\\) and \\(R_M\\)\nTo estimate the correlation between the evolutionary response to selection on females and males, while accounting for measurement error in selection response estimates, we use a bootstrapping approach. For each trait, we generate an \\(R_F\\) and \\(R_M\\) estimate, drawn from a normal distribution, parameterised with the mean and standard error we have empirically estimated. We then calculate the correlation for this particular draw of trait values. We repeat this process 10,000 times, and find the median correlation with associated 2.5% and 97.5% uncertainty intervals.\n\n\nShow the code\nR_medians &lt;-\n  R_long_form %&gt;%\n  group_by(Trait, Fitness_Sex, Trait_Sex) %&gt;% \n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  select(-c(variable))\n\nR_medians_summarised_transcriptome &lt;-\n  R_summarised_transcriptome %&gt;% \n  select(Trait, Trait_Sex, Fitness_Sex, median, sd) %&gt;% \n  pivot_wider(names_from = c(Fitness_Sex), values_from = 4:5) \n\nget_bootstrap_cor_transcriptome &lt;- function(){\n  \n  x &lt;- R_medians_summarised_transcriptome %&gt;% \n    mutate(boot_f = rnorm(28536, median_Female, sd_Female), # draw from the R_F distribution of each trait\n           boot_m = rnorm(28536, median_Male, sd_Male)) # draw from the R_M distribution of each trait\n  \n  cor(x$boot_f, x$boot_m, method = \"spearman\")\n}\n\n# generate the correlation 10,000 times, using different draws each time\nif(!file.exists(\"data/transcriptome_output/R_between_sex_correlation_transcriptome.csv\")){\n  R_between_sex_correlation_transcriptome &lt;- tibble(cor = lapply(1:10000, function(x) get_bootstrap_cor_transcriptome()) %&gt;% \n                                                      unlist())\n  \n  write_csv(R_between_sex_correlation_transcriptome, \"data/transcriptome_output/R_between_sex_correlation_transcriptome.csv\")\n} else{\n  R_between_sex_correlation_transcriptome &lt;- read_delim(\"data/transcriptome_output/R_between_sex_correlation_transcriptome.csv\", delim = \" \")}\n\nSummary_R_between_sex_correlation_transcriptome &lt;- median_qi(R_between_sex_correlation_transcriptome) %&gt;% \n  select(1:3) %&gt;% \n  rename(`Correlation median estimate` = cor,\n         `2.5% uncertainty interval` = .lower,\n         `97.5% uncertainty interval` = .upper)\n\nSummary_R_between_sex_correlation_transcriptome %&gt;% \n  mutate(across(1:3, ~ round(.x, 3))) %&gt;% \n  pander(split.cell = 40, split.table = Inf)\n\n\n\n\n\n\n\n\n\n\nCorrelation median estimate\n2.5% uncertainty interval\n97.5% uncertainty interval\n\n\n\n\n0.08\n0.07\n0.09"
  },
  {
    "objectID": "Main_analysis.html#build-panel-b-for-figure-2",
    "href": "Main_analysis.html#build-panel-b-for-figure-2",
    "title": "Analysis",
    "section": "Build Panel B for Figure 2",
    "text": "Build Panel B for Figure 2\n\n\nShow the code\nR_pB &lt;-\n  R_medians_summarised_transcriptome %&gt;% \n  left_join(evidence_ratios_transcriptome %&gt;% \n              select(Trait, Trait_Sex, Concord_Evid_Ratio) %&gt;%\n              mutate(ER_log = log(Concord_Evid_Ratio),\n                     Trait_Sex = if_else(str_detect(Trait_Sex, \"females\"), \"Female\", \"Male\"))) %&gt;% # log of the evidence ratio is log-odds\n  ggplot(aes(x = median_Female, y = median_Male, fill = ER_log)) +\n  geom_point(shape = 21, size = 5, alpha = 0.85) +\n  stat_ellipse(alpha = 0.8, type = \"norm\", linetype = 1, linewidth = 1) +\n  geom_hline(yintercept = 0, linetype = 2) +\n  geom_vline(xintercept = 0, linetype = 2) +\n  scale_fill_gradientn(colours = met.brewer(name = \"Paquin\", 7),\n                       limits = c(-6, 6)) +\n  guides(fill = guide_colourbar(barwidth = 8, barheight = 1)) +\n  labs(x = \"Reponse to selection on females\",\n       y = \"Reponse to selection on males\",\n       fill = \"Sexual concordance (log odds)\") +\n  coord_fixed(xlim = c(-0.35, 0.35), ylim = c(-0.35, 0.35)) +\n  scale_x_continuous(breaks = c(-0.3, -0.2,-0.1, 0, 0.1 ,0.2,0.3)) +\n  scale_y_continuous(breaks = c(-0.3, -0.2,-0.1, 0, 0.1 ,0.2,0.3)) +\n  theme_bw() +\n  theme(legend.position = \"bottom\",\n        strip.background = element_rect(fill = \"aliceblue\"),\n        legend.title = element_markdown(),\n        text = element_text(size = 14))\n\nR_pB"
  },
  {
    "objectID": "Main_analysis.html#estimate-overliner-in-each-sex",
    "href": "Main_analysis.html#estimate-overliner-in-each-sex",
    "title": "Analysis",
    "section": "Estimate \\(\\overline{|R|}\\) in each sex",
    "text": "Estimate \\(\\overline{|R|}\\) in each sex\n\nThe model\nFit the model to test whether \\(\\overline{|R|}\\) depends on the sex fitness and trait values were measured in:\n\n\nShow the code\n# fit the model\n\nmedian_R_transcriptome_model &lt;- \n  brm(absolute_R | weights(1/sd) ~ 1 + Fitness_Sex * Trait_Sex,\n      family = brmsfamily(family = \"Gamma\"), # gamma is appropriate for the half-normal distribution created by taking the absolute\n      data = R_summarised_transcriptome,\n      prior = c(prior(normal(-2.2, 1), class = Intercept),\n                prior(exponential(1), class = shape),\n                prior(normal(0, 0.25), class = b)),\n      warmup = 2000, iter = 6000,\n      seed = 1, cores = 4, chains = 4,\n      control = list(adapt_delta = 0.8, max_treedepth = 10),\n      file = \"fits/median_R_transcriptome_model_2\")\n\nprint(median_R_transcriptome_model)\n\n\n Family: gamma \n  Links: mu = log; shape = identity \nFormula: absolute_R | weights(1/sd) ~ 1 + Fitness_Sex * Trait_Sex \n   Data: R_summarised_transcriptome (Number of observations: 57072) \n  Draws: 4 chains, each with iter = 6000; warmup = 2000; thin = 1;\n         total post-warmup draws = 16000\n\nRegression Coefficients:\n                              Estimate Est.Error l-95% CI u-95% CI Rhat\nIntercept                        -2.64      0.00    -2.65    -2.64 1.00\nFitness_SexMale                  -0.01      0.00    -0.01    -0.00 1.00\nTrait_SexMale                    -0.10      0.00    -0.10    -0.09 1.00\nFitness_SexMale:Trait_SexMale     0.04      0.00     0.03     0.05 1.00\n                              Bulk_ESS Tail_ESS\nIntercept                         8910    10688\nFitness_SexMale                   7500     9506\nTrait_SexMale                     6910     9027\nFitness_SexMale:Trait_SexMale     6346     8000\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nshape     1.36      0.00     1.36     1.37 1.00    16552    11897\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nTo check how does the gamma distribution fares at capturing the shape of the data, we use the model to recapitulate the data it was trained on. Given the shape of the predicted data is similar to the real data, thereâs a high chance weâve used an appropriate distribution family.\n\n\nShow the code\npp_check(median_R_transcriptome_model)\n\n\n\n\n\n\n\n\n\nGet model predictions. Once again, we only do this once and save for later convenience.\n\n\nShow the code\nnew_data &lt;- expand_grid(Fitness_Sex = c(\"Female\", \"Male\"),\n                        Trait_Sex = c(\"Female\", \"Male\"))\n\nR_transcriptome_fitted &lt;-\n  fitted(median_R_transcriptome_model, newdata = new_data, re_formula = NA, summary = F) %&gt;% \n  as.data.frame() %&gt;% \n  rename(FemaleFitness_FemaleTrait = V1, FemaleFitness_MaleTrait = V2, \n         MaleFitness_FemaleTrait = V3, MaleFitness_MaleTrait = V4) %&gt;% \n  as_tibble() %&gt;% \n  mutate(prop_response_male_ftrait = MaleFitness_FemaleTrait / (MaleFitness_FemaleTrait + FemaleFitness_FemaleTrait),\n         prop_response_male_mtrait = MaleFitness_MaleTrait / (MaleFitness_MaleTrait + FemaleFitness_MaleTrait),\n         percent_diff_female = ((MaleFitness_FemaleTrait - FemaleFitness_FemaleTrait) / FemaleFitness_FemaleTrait)*100,\n         percent_diff_male = ((MaleFitness_MaleTrait - FemaleFitness_MaleTrait)/ FemaleFitness_MaleTrait)*100) %&gt;% \n  pivot_longer(cols = everything(), names_to = \"Parameter\", values_to = \"R_mean\") %&gt;% \n  mutate(Fitness_Sex = case_when(str_detect(Parameter, \"FemaleFitness\") ~ \"Female\",\n                                 str_detect(Parameter, \"MaleFitness\") ~ \"Male\"),\n         Trait_Sex = case_when(str_detect(Parameter, \"FemaleTrait\") ~ \"Female\",\n                               str_detect(Parameter, \"MaleTrait\") ~ \"Male\",\n                               str_detect(Parameter, \"percent_diff_female\") ~ \"Female\",\n                               str_detect(Parameter, \"percent_diff_male\") ~ \"Male\",\n                               str_detect(Parameter, \"ftrait\") ~ \"Female\",\n                               str_detect(Parameter, \"mtrait\") ~ \"Male\"))\n\n\n\n\nComplete Figure 2\nCreate panels D and F\n\n\nShow the code\nR_pE &lt;-\n  R_transcriptome_fitted %&gt;% \n  filter(!str_detect(Parameter, \"percent\") & !str_detect(Parameter, \"prop\")) %&gt;% \n  ggplot(aes(x = R_mean, y = Trait_Sex, fill = Fitness_Sex)) + \n  stat_slab(alpha = 0.9, shape = 21) +\n  labs(x = expression(\"Mean |\"* italic(R) * \"| for gene expression traits\"),\n       y = \"Phenotyped sex\",\n       fill = \"Sex under selection\") +\n  scale_fill_manual(values = c(carto_pal(7, \"Purp\")[5], carto_pal(7, \"Peach\")[5])) +\n  coord_cartesian(xlim = c(0.05, 0.11)) +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='transparent'),\n        panel.grid.minor.y = element_blank(),\n        plot.background = element_rect(fill='transparent', color=NA),\n        legend.position = \"bottom\",\n        text = element_text(size=13))\n\nR_pF &lt;-\n  R_transcriptome_fitted %&gt;% \n  filter(str_detect(Parameter, \"prop\")) %&gt;%\n  ggplot(aes(x = R_mean, y = Trait_Sex)) +\n  stat_halfeye(.width = c(0.66, 0.95), alpha = 0.9, fill = carto_pal(7, \"Emrld\")[2],\n               point_interval = \"median_qi\", point_fill = \"white\",\n               shape = 21, point_size = 4, stroke = 1.2) + # width indicates the uncertainty intervals: here we have 66% and 95% intervals + # width indicates the uncertainty intervals: here we have 66% and 95% intervals+\n  geom_vline(xintercept = 0.5, linetype = 2, linewidth = 1.2) +\n  coord_cartesian(xlim = c(0.45, 0.6)) +\n  xlab(expression(\"prop. \"*italic(R)* \" that occurs through males\")) +\n  ylab(\"Phenotyped sex\") +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='transparent'),\n        panel.grid.minor.y = element_blank(),\n        plot.background = element_rect(fill='transparent', color=NA),\n        legend.position = \"none\",\n        text = element_text(size=13))\n\n\nProduce the complete figure\n\n\nShow the code\ntop &lt;- \n  R_pA + R_pB + \n  plot_layout(guides = \"collect\", axis_titles = \"collect\") & \n  theme(legend.position = \"bottom\")\n\nbottom &lt;- (R_pC + R_pE + plot_layout(guides = \"collect\") &\n             theme(legend.position = \"bottom\")) / (R_pD + R_pF)\n\ntop / bottom & \n  plot_annotation(tag_levels = \"a\") \n\n\n\n\n\n\n\n\n\nFigure 2. a and b show mean \\(R_F\\) and \\(R_M\\) estimates for organismal and gene expression traits, respectively. Ellipses show where 95% of traits fall in multivariate normal trait space. c shows the posterior distribution for |\\(\\overline{R_F}\\)| and |\\(\\overline{R_M}\\)| across organismal-level traits, the mean expected response to selection (absolute value) in females and males and split by the sex the trait was measured in. d shows |\\(\\overline{R_F}\\)| and |\\(\\overline{R_M}\\)| across gene-expression traits. |\\(\\overline{R}\\)| is expressed in trait standard deviations. e and f show the proportion of evolutionary change in response to selection predicted to occur through males, in the organismal and gene expression datasets, respectively. Points indicate the estimated mean with associated 66 and 95% credible intervals (where wide enough to be visible).\nCalculating stats for the results section\n\n\nShow the code\nR_transcriptome_fitted %&gt;% \n  group_by(Parameter) %&gt;% \n  median_qi(R_mean)\n\n\n# A tibble: 8 Ã 7\n  Parameter                  R_mean  .lower  .upper .width .point .interval\n  &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1 FemaleFitness_FemaleTrait  0.0710  0.0707  0.0713   0.95 median qi       \n2 FemaleFitness_MaleTrait    0.0644  0.0641  0.0646   0.95 median qi       \n3 MaleFitness_FemaleTrait    0.0705  0.0702  0.0708   0.95 median qi       \n4 MaleFitness_MaleTrait      0.0664  0.0661  0.0667   0.95 median qi       \n5 percent_diff_female       -0.800  -1.39   -0.199    0.95 median qi       \n6 percent_diff_male          3.22    2.61    3.84     0.95 median qi       \n7 prop_response_male_ftrait  0.498   0.497   0.500    0.95 median qi       \n8 prop_response_male_mtrait  0.508   0.506   0.509    0.95 median qi       \n\n\nGet the total mean response of the transcriptome\n\n\nShow the code\nmedian_R_total_model_transcriptome &lt;- \n  brm(absolute_R | weights(1/sd) ~ 1,\n      family = brmsfamily(family = \"Gamma\"), # gamma is appropriate for the half-normal distribution created by taking the absolute\n      data = R_summarised_transcriptome,\n      prior = c(prior(normal(-2.2, 1), class = Intercept),\n                prior(exponential(1), class = shape)),\n      warmup = 4000, iter = 12000,\n      seed = 1, cores = 4, chains = 4,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      file = \"fits/median_R_total_model_transcriptome\")\n\nmedian_R_total_model_transcriptome %&gt;% \n  as_draws_df() %&gt;% \n  mutate(R = exp(b_Intercept)) %&gt;% \n  select(R) %&gt;%\n  summarise_draws(\"median\", \"sd\", ~quantile(.x, probs = c(0.025, 0.975), na.rm = TRUE))\n\n\n# A tibble: 1 Ã 5\n  variable median        sd `2.5%` `97.5%`\n  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 R        0.0681 0.0000732 0.0679  0.0682"
  },
  {
    "objectID": "Main_analysis.html#load-packages-and-data",
    "href": "Main_analysis.html#load-packages-and-data",
    "title": "Analysis",
    "section": "Load packages and data",
    "text": "Load packages and data\n\n\nShow the code\nDGRP_data_unscaled &lt;- \n  left_join(\n    read_csv(\"data/data_collation/output/all.dgrp.phenos_unscaled.csv\") %&gt;% \n      mutate(line = as.factor(line)),\n    read_csv(\"data/data_collation/output/meta_data_for_all_traits.csv\") %&gt;%\n      group_by(Reference) %&gt;% \n      mutate(study_ID = as.factor(cur_group_id()),\n             Pooled = if_else(Sex == \"Pooled\", \"Yes\", \"No\"))) %&gt;% \n  left_join(read_rds(\"data/trait_names.rds\"))\n  \n  \n# Apply the selection criteria with the filter() function, then add a column each for female and male fitness\n\ntrait_data_unscaled &lt;-\n  DGRP_data_unscaled %&gt;%  \n  filter(!str_detect(Trait, \"fitness\"),\n         `# lines measured` &gt;= 80 &\n           Pooled != \"Yes\" & \n           Reference != \"Jin et al (2020) PLOS Genetics\" & \n           Reference != \"Everett et al (2020) Genome Research\") %&gt;% \n  # join the early life fitness data from Wong and Holman\n  left_join(\n    DGRP_data_unscaled %&gt;%\n      filter(str_detect(Trait, \"fitness.early.life\")) %&gt;% \n      select(line, Trait, trait_value) %&gt;% \n      pivot_wider(names_from = Trait, values_from = trait_value) %&gt;% \n      rename(female_fitness = fitness.early.life.f, male_fitness = fitness.early.life.m))\n\n# Define a function to randomly select one trait per study, \n# from among the traits measured in at least 80 DGRP lines\nget_independent_traits &lt;- function(){\n  set.seed(1) # Set the seed for reproducibility\n  clean_meta_data %&gt;%\n    #filter(`# lines measured` &gt;= 80) %&gt;% # Only analyse traits that measured at least 80 lines\n    group_by(Reference) %&gt;%\n    sample_n(1) %&gt;% # Randomly sample one phenotype per study\n    pull(Trait) %&gt;% sort() \n}"
  },
  {
    "objectID": "Main_analysis.html#testing-for-a-difference-in-mean-genetic-variance-between-male-and-female-traits",
    "href": "Main_analysis.html#testing-for-a-difference-in-mean-genetic-variance-between-male-and-female-traits",
    "title": "Analysis",
    "section": "Testing for a difference in mean genetic variance between male and female traits",
    "text": "Testing for a difference in mean genetic variance between male and female traits\n\nCalculating genetic variance and the coefficient of genetic variation\nThe following code chunk first compiles a list of male and female traits for which a similar trait was measured in both sexes, by a single study, and then excludes all traits where this condition was not met. For example, Schmidt et al (2017) measured âDDT resistance knockdownâ in both sexes in separate assays, and so we kept DDT resistance knockdown (female) and DDT resistance knockdown (male) in the dataset.\nFor each male or female trait, we then calculate the variance in line mean trait values, \\(\\sigma_L^2\\). \\(\\sigma_L^2\\) approximates the genetic variance (i.e.Â the variance in breeding values), since line means are estimates of the breeding value of that lineâs genotype.\nWe additionally calculated the coefficient of genetic variation (\\(CV_G\\)), defined as \\(100\\sigma_L^2/\\mu\\), where \\(\\mu\\) is the mean of the line means. This quantity was only calculated for traits where \\(\\mu\\) was positive. We also excluded traits where \\(\\mu\\) &lt; 0.0001, since many of these traits appeared to have been mean-centered by the original authors (with rounding error explaining why \\(\\mu\\) was not exactly zero).\nFinally, for both the dataset of \\(\\sigma_L^2\\) estimates and the dataset of \\(CV_G\\) estimates, we produced a reduced dataset that retained only a single randomly-selected pair of matching male and female traits per study. Analysis of these reduced datasets was intended to prevent individual studies that measured many traits from unduly influencing the results.\n\n\nShow the code\nvariance_estimates &lt;- trait_data_unscaled %&gt;% \n  split(.$Reference) %&gt;% \n  map_df(~ {\n    traits &lt;- unique(.x$Trait) # for each study, only keep traits where there are matching male and female versions of the trait\n    nc &lt;- nchar(traits)\n    sexes &lt;- substr(traits, nc-1, nc)\n    traits &lt;- traits[sexes %in% c(\".m\", \".f\")]\n    sex_removed_traits &lt;- substr(traits, 1, nc-2)\n    tally &lt;- table(sex_removed_traits)\n    eligible_traits &lt;- names(tally)[tally==2]\n    eligible_traits &lt;- c(paste(eligible_traits, \".f\",sep=\"\"), \n                         paste(eligible_traits, \".m\",sep=\"\"))\n    .x %&gt;% filter(Trait %in% eligible_traits)\n  }) %&gt;% \n  split(.$Trait) %&gt;% \n  map_df(~ .x %&gt;% \n           summarise(\n             Trait = Trait[1],\n             Sex = Sex[1],\n             Reference = Reference[1],\n             Variance = var(trait_value),\n             Mean  = mean(trait_value))) %&gt;% \n  mutate(No_sex_trait = substr(Trait, 1, nchar(Trait)-2)) \n\nCV_G_estimates &lt;- variance_estimates %&gt;% \n  mutate(CV_G = 100 * Variance/(Mean),\n         No_sex_trait = substr(Trait, 1, nchar(Trait)-2)) %&gt;% \n  filter(Mean &gt; 0.0001) %&gt;%  # positive means of at least 0.0001 only\n  select(-Variance, -Mean)\n\n# Set up the data for paired Wilcoxon signed rank tests, for the variance estimates:\npaired_test_data_var &lt;- variance_estimates %&gt;% \n  select(No_sex_trait, Reference, Sex, Variance) %&gt;% \n  pivot_wider(names_from = Sex, values_from = Variance)\n\n# And the reduced dataset with a single random male-female trait pair per study\nset.seed(1)\none_study_paired_test_data_var &lt;- paired_test_data_var %&gt;% \n  sample_n(size = n()) %&gt;% \n  distinct(Reference, .keep_all = T) %&gt;% arrange(Reference)\n\n# Set up the data for paired Wilcoxon signed rank tests, for the CV_G estimates:\npaired_test_data_CV_G &lt;- CV_G_estimates %&gt;% \n  select(No_sex_trait, Reference, Sex, CV_G) %&gt;% \n  pivot_wider(names_from = Sex, values_from = CV_G)\n\n# And the reduced dataset with a single random male-female trait pair per study\none_study_paired_test_data_CV_G &lt;- paired_test_data_CV_G %&gt;% \n  sample_n(size = n()) %&gt;% \n  distinct(Reference, .keep_all = T) %&gt;% arrange(Reference)\n\n\n\n\nRunning Wilcoxon signed rank tests\nThe following runs four paired Wilcoxon signed rank tests examining the null hypothesis that there is no difference in \\(\\sigma_L^2\\) or \\(CV_G\\) between male and female traits, using either the full or reduced datasets. In all cases, the null hypothesis is not rejected at \\(\\alpha=0.05\\), suggesting that male and female traits do not consistently differ in genetic variance.\n\nVariance (full data)\n\n\nShow the code\nwilcox.test(paired_test_data_var$Female, \n            paired_test_data_var$Male, paired=TRUE)\n\n\n\n    Wilcoxon signed rank test with continuity correction\n\ndata:  paired_test_data_var$Female and paired_test_data_var$Male\nV = 5289, p-value = 0.5723\nalternative hypothesis: true location shift is not equal to 0\n\n\nShow the code\ncat(\"Number of male-female trait pairs analysed:\", nrow(paired_test_data_var))\n\n\nNumber of male-female trait pairs analysed: 149\n\n\n\n\nVariance (reduced data)\n\n\nShow the code\nwilcox.test(one_study_paired_test_data_var$Female, \n            one_study_paired_test_data_var$Male, paired=TRUE)\n\n\n\n    Wilcoxon signed rank exact test\n\ndata:  one_study_paired_test_data_var$Female and one_study_paired_test_data_var$Male\nV = 251, p-value = 0.4365\nalternative hypothesis: true location shift is not equal to 0\n\n\nShow the code\ncat(\"Number of male-female trait pairs analysed:\", nrow(one_study_paired_test_data_var))\n\n\nNumber of male-female trait pairs analysed: 34\n\n\n\n\n\\(CV_G\\) (full data)\n\n\nShow the code\nwilcox.test(paired_test_data_CV_G$Female, \n            paired_test_data_CV_G$Male, paired=TRUE)\n\n\n\n    Wilcoxon signed rank test with continuity correction\n\ndata:  paired_test_data_CV_G$Female and paired_test_data_CV_G$Male\nV = 5331, p-value = 0.7283\nalternative hypothesis: true location shift is not equal to 0\n\n\nShow the code\ncat(\"Number of male-female trait pairs analysed:\", nrow(paired_test_data_CV_G))\n\n\nNumber of male-female trait pairs analysed: 148\n\n\n\n\n\\(CV_G\\) (reduced data)\n\n\nShow the code\nwilcox.test(one_study_paired_test_data_CV_G$Female, \n            one_study_paired_test_data_CV_G$Male, paired=TRUE)\n\n\n\n    Wilcoxon signed rank exact test\n\ndata:  one_study_paired_test_data_CV_G$Female and one_study_paired_test_data_CV_G$Male\nV = 372, p-value = 0.2087\nalternative hypothesis: true location shift is not equal to 0\n\n\nShow the code\ncat(\"Number of male-female trait pairs analysed:\", nrow(one_study_paired_test_data_CV_G))\n\n\nNumber of male-female trait pairs analysed: 34"
  },
  {
    "objectID": "Main_analysis.html#testing-for-sex-effects-on-mean-genetic-covariance-between-traits",
    "href": "Main_analysis.html#testing-for-sex-effects-on-mean-genetic-covariance-between-traits",
    "title": "Analysis",
    "section": "Testing for sex effects on mean genetic covariance between traits",
    "text": "Testing for sex effects on mean genetic covariance between traits\n\nCalculate genetic covariances between pairs of traits\nThis analysis does not use all the traits in our dataset, because trait pairs measured in the same study (and often the same individuals) may be especially similar due to confounding environmental sources of phenotypic covariance, which would inflate estimates of the genetic covariance. To deal with this issue simply and robustly, we randomly retained a single trait (which could be either male or female) per study, and discarded all other traits. Only traits measured in at least 80 lines are used in this analysis, and the line means were scaled to mean=0, variance=1 prior to analysis.\nWe then calculate the covariance in line means (using all pairwise complete observations), which is an estimate of the genetic covariance (given that line means are estimates of the breeding values). Each calculated covariance is then classified as either a female-female, male-male, or between-sex covariance for subsequent statistical testing and plotting.\n\n\nShow the code\n# Get a single random male or female trait per study \n# (only including traits measured in at least 80 lines)\n# Scale all the line means to mean=0, variance=1\nall_traits &lt;- trait_data_unscaled %&gt;% \n  filter(Trait %in% get_independent_traits()) %&gt;% \n  select(line, Trait, trait_value) %&gt;% \n  distinct(.keep_all = T) %&gt;% \n  spread(Trait, trait_value) %&gt;% \n  select(-line) %&gt;% \n # as.data.frame() %&gt;% \n  mutate_all(~ as.numeric(scale(.x)))\n\n# Calculate all pairwise covariances between traits\ncovs &lt;- cov(all_traits, \n            use = \"pairwise.complete.obs\") %&gt;%\n  as.data.frame() %&gt;% \n  rownames_to_column() %&gt;% \n  gather(trait, cov, -rowname) %&gt;% \n  as_tibble() %&gt;% \n  rename(trait1 = rowname, trait2 = trait) %&gt;% \n  mutate(sex1 = substr(trait1, nchar(trait1)-1, nchar(trait1)),\n         sex2 = substr(trait2, nchar(trait2)-1, nchar(trait2))) %&gt;% \n  filter((sex1 %in% c(\".m\", \".f\")) & (sex2 %in% c(\".m\", \".f\"))) %&gt;% \n  mutate(sex_combo = paste(sex1, sex2), trait_combo=\"a\")\n\n# Create a trait_combo column that labels each unique pair of traits\n# Necessary because G_f and G_m are symmetrical, and we don't want to double-count these covariances \nfor(i in 1:nrow(covs)) {\n  covs$trait_combo[i] &lt;- paste0(\n    sort(c(covs$trait1[i],\n           covs$trait2[i])), collapse = \"~\")\n}\n\n\n\n\nTest for sex effects on genetic covariance\nThe following statistical test examines the null hypothesis that there is no difference in mean genetic covariance between 3 kinds of trait pairs: pairs of female traits, pairs of male traits, and pairs in which one is a female trait and one a male trait (i.e elements of \\(G_f\\), \\(G_m\\) and \\(B\\) respectively). Whether using ANOVA or a Kruskal-Wallis test (a non-parametric 1-way ANOVA), there is no significant difference in genetic covariance.\n\nANOVA results\n\n\nShow the code\ndata_for_test &lt;- covs %&gt;% \n  filter(trait1 != trait2) %&gt;% \n  distinct(trait_combo, .keep_all = T) %&gt;% \n  mutate(sex_combo = replace(sex_combo, sex_combo == \".f .f\", \"Female-female\"),\n         sex_combo = replace(sex_combo, sex_combo == \".m .m\", \"Male-male\"),\n         sex_combo = replace(sex_combo, sex_combo == \".f .m\", \"Between-sex\"),\n         sex_combo = replace(sex_combo, sex_combo == \".m .f\", \"Between-sex\"))\n\nanova(lm(cov ~ sex_combo, data = data_for_test))\n\n\nAnalysis of Variance Table\n\nResponse: cov\n            Df Sum Sq  Mean Sq F value Pr(&gt;F)\nsex_combo    2  0.022 0.010951  0.8828 0.4137\nResiduals 2847 35.314 0.012404               \n\n\n\n\nKruskal-Wallis results\n\n\nShow the code\nkruskal.test(cov ~ sex_combo, data = data_for_test)\n\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  cov by sex_combo\nKruskal-Wallis chi-squared = 0.68109, df = 2, p-value = 0.7114\n\n\n\n\n\nPlot the estimated G matrix\n\n\nShow the code\nf &lt;- covs %&gt;% filter(sex_combo == \".f .f\") %&gt;% \n  select(trait1, trait2, cov) %&gt;%  \n  spread(trait1, cov)\n\nG_f &lt;- as.matrix(f[,-1])\n\nrownames(G_f) &lt;- f$trait2\n\nfemale_order &lt;- hclust(as.dist(1 - G_f))$labels\n\nm &lt;- covs %&gt;% filter(sex_combo == \".m .m\") %&gt;% \n  select(trait1, trait2, cov) %&gt;%  \n  spread(trait1, cov)\n\nG_m &lt;- as.matrix(m[,-1])\n\nrownames(G_m) &lt;- m$trait2\n\nmale_order &lt;- hclust(as.dist(1 - G_m))$labels\n\ntrait_order &lt;- c(female_order, male_order)\n\nplot_data_covs &lt;- covs %&gt;% \n  arrange(trait1) %&gt;% \n  arrange(sex1, sex2) %&gt;% \n  mutate(trait1 = factor(trait1, trait_order),\n         trait2 = factor(trait2, rev(trait_order))) %&gt;% \n  mutate(cov = replace(cov, trait1 == trait2, 0))\n\n\nggplot(plot_data_covs, aes(trait1, trait2, fill = cov)) +\n  geom_tile(colour = \"grey20\") + \n  geom_hline(yintercept = 34.5, linewidth = 1) + \n  geom_vline(xintercept = 42.5, linewidth = 1) + \n  xlab(NULL) + ylab(NULL) +\n  scale_fill_gradient2(mid=\"white\", low = \"purple\", high = \"orange\", name = \"Cov\") + \n  theme(axis.text.x = element_text(angle=90, vjust = 1, hjust=1, size = 8),\n        axis.text.y = element_text(size = 8))\n\n\n\n\n\n\n\n\n\nFigure S4. The estimated G matrix. \\(G_f\\) is shown in the top left quadrant, \\(G_m\\) in the bottom right, and \\(B\\) in the top right and bottom left. There is no clear pattern: genetic correlations are of similar magnitude within \\(G_f\\), \\(G_m\\), and \\(B\\). The rows are sorted within sexes using hierarchical clustering, though rather few blocks of genetically co-varying traits are evident.\n\n\nPlot distribution of genetic covariances\n\n\nShow the code\nplot_data_covs %&gt;% \n  filter(trait1 != trait2) %&gt;% \n  distinct(trait_combo, .keep_all = T) %&gt;% \n  mutate(sex_combo = replace(sex_combo, sex_combo==\".f .f\", \"a. Female-female covariances\"),\n         sex_combo = replace(sex_combo, sex_combo==\".f .m\", \"b. Between-sex covariances\"),\n         sex_combo = replace(sex_combo, sex_combo==\".m .m\", \"c. Male-male covariances\"),\n         sex_combo = factor(sex_combo, c(\"a. Female-female covariances\", \n                                         \"b. Between-sex covariances\", \n                                         \"c. Male-male covariances\"))) %&gt;% \n  ggplot(aes(abs(cov), fill=sex_combo)) + \n  geom_histogram(aes(y = after_stat(density)), colour = \"grey20\") + \n  facet_wrap(~sex_combo,nrow = 3) + \n  xlab(\"Absolute genetic covariance\") + ylab(\"Frequency\") + \n  theme_linedraw() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nFigure S5. the distribution of genetic covariances between traits a expressed in females, b expressed in different sexes and c expressed in males."
  },
  {
    "objectID": "Data_collation.html",
    "href": "Data_collation.html",
    "title": "Data collation",
    "section": "",
    "text": "Show the code\nlibrary(tidyverse)\nlibrary(DT) # for interactive tables\n\n\n\n\n\n\nMost of the papers that report DGRP data provide estimates of the mean phenotype of multiple DGRP lines (âline mean dataâ). We conducted a non-exhaustive search of the literature for phenotypic trait measurements for DGRP lines, and collated all the line mean data in two csv files; all.line.mean.phenos.csv which contains line mean values for each trait and all.line.mean.phenos_metadata.csv which contains study meta-data. The R code below combines these files.\n\n\nShow the code\nall.line.mean.phenos &lt;- read_csv(\"data/data_collation/input/all.line.mean.phenos.csv\") %&gt;% \n  left_join(read_csv(\"data/data_collation/input/all.line.mean.phenos_metadata.csv\"), by = \"Trait\")\n\n\n\n\n\nSome studies only provide the raw data they collected when measuring DGRP phenotypes (e.g.Â measurements of individual flies, with replicates within each DGRP line). We need line mean data to calculate genetic correlations between traits and run typical GWA analyses. To get line means, we estimated them from the raw data as described in the script analysis/get_line_means_from_raw_data.Rmd, which can be viewed here.\n\n\nShow the code\nline.mean.phenos.from.raw.data &lt;- read_csv(\"data/data_collation/output/dgrp_phenos_calculated_from_raw_data.csv\") %&gt;% \n  left_join(read_csv(\"data/data_collation/output/dgrp_phenos_calculated_from_raw_data_meta_data.csv\"), by = \"Trait\") %&gt;% \n  filter(!is.na(trait_value))\n\n\nCombine the data from these two sources:\n\n\nShow the code\nall.dgrp.phenos_combined &lt;-\n  rbind(all.line.mean.phenos, \n        line.mean.phenos.from.raw.data) %&gt;% \n  mutate(Sex = recode(Sex, Both = \"Pooled\"))\n\nnum_unique_lines &lt;- length(unique(all.dgrp.phenos_combined$line))\n\n\n\n\n\n\n\n\nWe have phenotype line means for {r num_unique_lines} lines, which is more than we expected. There appear to be some lines that have been used in very few studies, suggesting some of these lines reflect labelling errors.\nAfter checking the Bloomington Drosophila Stock Centre and Flybase we found the following anomalies:\n\nChapman et al (2020): lines 273, 331, 501, 568, 709, 831, 846 - these lines are not phenotyped in any other study and are not documented on flybase.\nPalmer et al (2018): line 575 - not on Flybase\nChowdhury et al (2019): line 471 - not on Flybase (only aberrant line from study)\nHouston (2019): line 285 - not on Flybase\nWatanabe and Riddle (2021): line 854 - not on Flybase\nBattlay et al (2016): lines 226, 847 and 917 - there is no obvious reason for these mysterious lines. There are no obvious typos and the paper states they conduct GWA with 178 lines, which matches the number reported in File S2, which is where we sourced the data.\nKatzenberger et al (2015): line 521 - no obvious typo (data is ordered by increasing trait value). One-off issue. Not on Flybase.\nTurner, Miller and Cochrane (2013): line 760 - no obvious typo. One off. Not on Flybase.\nMontgomery et al (2014): lines 424 and 766 - Errors appear to be mislabelled lines. Table S3 includes RAL lines 424 and 766. Line 766 is out of numeric order in the Table. Most likely to actually be line 776 or 786, but we cannot be sure.\nHe et al (2014): Bloomington stock number 28120 - Error appears to be a typo. Line 28120 is included in the raw data, but isnât listed in Table S2 which shows the lines used in the study. One-off issue.\nLafluente, Duneau and Beldade (2018): line 809 - Likely to be a typo or a labelling error. One-off issue.\n\nThe following code removes these putatively erroneous lines from the dataset:\n\n\nShow the code\n# check how many traits each line has been phenotyped for\nline_test &lt;- all.dgrp.phenos_combined %&gt;% group_by(line) %&gt;% \n  summarise(n_traits = length(Trait)) %&gt;% \n  arrange(n_traits)\n\n# check specific lines\n\n#print(all.dgrp.phenos_combined %&gt;% \n # filter(line == \"556\"), n = 31)\n\n# remove the aberrant lines\naberrant_lines &lt;- c(226, 273, 285, 331, 424, 471, 501, \n                    521, 568, 575, 709, 760, 766, 809, \n                    831, 846, 847, 854, 917)\n\nall.dgrp.phenos_combined &lt;-\n  all.dgrp.phenos_combined %&gt;% \n  filter(!(line %in% aberrant_lines))\n\n\nThis still leaves 219 lines, which was unexpected because most studies state that the DGRP consists of 205 lines. However, the DGRP record on Flybase (http://flybase.org/reports/FBlc0000504.html) indicates that a total of 219 lines have been included in the DGRP at some point since its creation. We infer that some lines were withdrawn from the Bloomington stock centre, explaining their absence from most DGRP studies.\nThe lines that have been withdrawn but are included in our dataset are: 80, 272, 343, 378, 387, 393, 398, 476, 514, 554, 556, 591, 750, 771. We chose not to remove these lines from our dataset, as many of the studies we include in our dataset make use of these lines.\n\n\n\nSome studies report data that has been previously used (in a way that we missed in our initial data collection), leading to perfect or near perfect correlations between traits. We here remove one such duplicate trait.\nAnother study includes data that we entered into the database incorrectly: one trait was measured in 10 lines (below our cutoff) but was entered for 99 lines. We remove this error from the dataset.\n\n\nShow the code\nall.dgrp.phenos_combined_subset &lt;-\n  all.dgrp.phenos_combined %&gt;% filter(Trait != \"rapid.cold.hardening.25C\",\n                                      Trait != \"dopamine.response.to.paraquat.2021.m\")\n\n\n\n\n\nSome traits have been measured in heterozygotes. This generally occurs when the goal of a study is to observe whether genetic variation affects the response to a genetic disease encoded by a particular variant or the expression of a transgenic construct. These studies are not ideal for our database, as the phenotypes they observe may be affected be dominance and epistatic interactions that are absent in the nearly completely homozygous DGRP lines. We remove these studies from our dataset.\n\n\nShow the code\n# Remove traits measured in heterozyogtes and traits entered incorrectly\n\nall.dgrp.phenos_combined_subset &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  filter(Trait != \"recombination.rate.3R.f\", \n         Trait != \"recombination.rate.X.f\", \n         Trait != \"eye.area.diabetes.susceptibility.2014a.m\", \n         Trait != \"eye.area.diabetes.susceptibility.2014a.f\",\n         Trait != \"eye.area.Drop.susceptibility.2014a.f\", \n         Trait != \"eye.area.Drop.susceptibility.2014a.m\", \n         Trait != \"eye.area.Lobe.susceptibility.2014a.f\", \n         Trait != \"eye.area.Lobe.susceptibility.2014a.m\", \n         Trait != \"notum.bristles.diabetes.susceptibility.2014a.f\", \n         Trait != \"notum.bristles.diabetes.susceptibility.2014a.m\", \n         Trait != \"CRISPR.full.resistance.embryo.formation.f\", \n         Trait != \"CRISPR.germline.conversion.rate.f\", \n         Trait != \"CRISPR.mosaic.resistance.embryo.formation.f\", \n         Trait != \"CRISPR.wildtype.rate.m\", \n         Trait != \"Canton S(B).olfactory.response.benzaldehyde.f\", \n         Trait != \"neur.olfactory.response.benzaldehyde.f\", \n         Trait != \"Sema5c.olfactory.response.benzaldehyde.f\") \n\n\n\n\n\nFor some traits, a small number of lines had &gt;1 trait value. We fixed these datasets in the original spreadsheet before it entered R, but document our fixes here for transparency.\n\nUnckless, Rottschaefer and Lazzaro (2015, G3) include line 287 twice in their provided data. The trait values were identical, so we simply removed the duplication.\nChow, Wolfner and Clark (2013, PNAS) include line 287 twice in their data (coincidence?). They measured two traits: a hazard ratio for tunicamycin-induced survival and an LT50 value. Line 287 has two different hazard ratios, but the same LT50 value. We therefore removed line 287 completely from the hazard ratio dataset, but only removed the duplicate in the LT50 dataset.\nHotson and Schneider (2015, G3) include line 712 twice in their provided data, for the trait L.monocytogenes.load.m. The duplicates provide different values. Due to this ambiguity, we removed line 712 from the dataset.\nAdebambo et al (2020, Frontiers in Genetics) include the line 229 twice. The trait values were identical, so we simply removed the duplication.\n\n\n\nShow the code\n# the code below reports lines that have &gt; 1 measurement for any of the traits in our dataset \n\n# If there are 0 rows in the tibble, it means no errors remain\nproblems &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  group_by(line, Trait) %&gt;% \n  summarise(n = n()) %&gt;% \n  arrange(-n) %&gt;% \n  filter(n &gt; 1)\n\n\n\n\n\nHere, we save the {r n_traits_after_cleaning} traits as a .csv file called data/derived/all.dgrp.phenos_unscaled.csv, which you may wish to download and use in your research. The file contains 4 columns which give the name of the DGRP line (line), the name of the trait being measured (Trait), the reference (Reference), and the estimated mean value of the focal trait in the focal DGRP line (trait_value).\nTo help interpret the contents of this file, we also save a metadata file called data/derived/meta_data_for_all_traits.csv, which gives information about each trait. This file is also shown in the HTML Table below. The columns are interpreted as follows:\n\nTrait: The name of the trait. This matches the traits listed in data/derived/all.dgrp.phenos_unscaled.csv, and can be used to combine the two spreadsheets (e.g.Â by using a left join, as in: dplyr::left_join(all.dgrp.phenos_unscaled, meta_data_for_all_traits))\n# lines measured: Number of DGRP lines for estimates of the line mean trait value was available.\nSex: The sex of the flies being measured (Female, Male, or Pooled, where the latter means flies of both sexes were measured)\nLife_stage: the life stage at which flies were phenotyped (Juvenile: all life stages that precede eclosion, and adulthood: post eclosion)\nTrait guild: A categorisation of the type of trait that was manually assigned by us to aid visualisation in figures.\nTrait description: A description of how the trait, including an explanation of the meaning of relatively high and low values.\nReference: The source for the data.\n\n\n\nShow the code\nlines_measured &lt;- \n  all.dgrp.phenos_combined_subset %&gt;% \n  group_by(Trait) %&gt;% \n  summarise(`# lines measured` = n()) %&gt;% \n  arrange(Trait)\n\ntable &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  distinct(Trait, .keep_all = TRUE) %&gt;% \n  arrange(Trait) %&gt;% \n  select(-c(trait_value))\n  \ncomplete_metadata &lt;- left_join(lines_measured, table) %&gt;% \n  select(Trait, `# lines measured`, Sex, Life_stage, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(`Trait guild`, Trait, Reference)\n\nall.dgrp.phenos_combined_subset %&gt;% \n  select(line, Trait, trait_value, Reference) %&gt;% \n  arrange(Trait) %&gt;% \n  write_csv(file = \"data/data_collation/output/all.dgrp.phenos_unscaled.csv\")\n\ncomplete_metadata %&gt;% \n  write_csv(file = \"data/data_collation/output/meta_data_for_all_traits.csv\")\n\n\nThe full list of traits in the dataset, and metadata about each one, is shown in this table:\n\n\nShow the code\n# Create a function to build HTML searchable tables\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Trait_table')),\n      pageLength = 2115\n    )\n  )\n}\n\nmy_data_table(complete_metadata)\n\n\n\n\n\n\n\n\n\n\nSome of our traits have already been scaled to have a mean of zero and standard deviation of 1. For consistency, and to aid comparison of variances between traits, we also create and save a version of the complete dataset where all traits have been standardised (by subtracting the mean from each value and dividing by the standard deviation, via Râs scale() function).\n\n\nShow the code\nall.dgrp.phenos_scaled &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  select(line, Trait, trait_value, Reference) %&gt;% \n  group_by(Trait) %&gt;% \n  mutate(trait_value = as.numeric(scale(trait_value)))\n\nwrite_csv(all.dgrp.phenos_scaled, file = \"data/data_collation/output/all.dgrp.phenos_scaled.csv\")"
  },
  {
    "objectID": "Data_collation.html#loading-and-combining-the-data-from-various-sources",
    "href": "Data_collation.html#loading-and-combining-the-data-from-various-sources",
    "title": "Data collation",
    "section": "",
    "text": "Most of the papers that report DGRP data provide estimates of the mean phenotype of multiple DGRP lines (âline mean dataâ). We conducted a non-exhaustive search of the literature for phenotypic trait measurements for DGRP lines, and collated all the line mean data in two csv files; all.line.mean.phenos.csv which contains line mean values for each trait and all.line.mean.phenos_metadata.csv which contains study meta-data. The R code below combines these files.\n\n\nShow the code\nall.line.mean.phenos &lt;- read_csv(\"data/data_collation/input/all.line.mean.phenos.csv\") %&gt;% \n  left_join(read_csv(\"data/data_collation/input/all.line.mean.phenos_metadata.csv\"), by = \"Trait\")\n\n\n\n\n\nSome studies only provide the raw data they collected when measuring DGRP phenotypes (e.g.Â measurements of individual flies, with replicates within each DGRP line). We need line mean data to calculate genetic correlations between traits and run typical GWA analyses. To get line means, we estimated them from the raw data as described in the script analysis/get_line_means_from_raw_data.Rmd, which can be viewed here.\n\n\nShow the code\nline.mean.phenos.from.raw.data &lt;- read_csv(\"data/data_collation/output/dgrp_phenos_calculated_from_raw_data.csv\") %&gt;% \n  left_join(read_csv(\"data/data_collation/output/dgrp_phenos_calculated_from_raw_data_meta_data.csv\"), by = \"Trait\") %&gt;% \n  filter(!is.na(trait_value))\n\n\nCombine the data from these two sources:\n\n\nShow the code\nall.dgrp.phenos_combined &lt;-\n  rbind(all.line.mean.phenos, \n        line.mean.phenos.from.raw.data) %&gt;% \n  mutate(Sex = recode(Sex, Both = \"Pooled\"))\n\nnum_unique_lines &lt;- length(unique(all.dgrp.phenos_combined$line))"
  },
  {
    "objectID": "Data_collation.html#cleaning-the-data",
    "href": "Data_collation.html#cleaning-the-data",
    "title": "Data collation",
    "section": "",
    "text": "We have phenotype line means for {r num_unique_lines} lines, which is more than we expected. There appear to be some lines that have been used in very few studies, suggesting some of these lines reflect labelling errors.\nAfter checking the Bloomington Drosophila Stock Centre and Flybase we found the following anomalies:\n\nChapman et al (2020): lines 273, 331, 501, 568, 709, 831, 846 - these lines are not phenotyped in any other study and are not documented on flybase.\nPalmer et al (2018): line 575 - not on Flybase\nChowdhury et al (2019): line 471 - not on Flybase (only aberrant line from study)\nHouston (2019): line 285 - not on Flybase\nWatanabe and Riddle (2021): line 854 - not on Flybase\nBattlay et al (2016): lines 226, 847 and 917 - there is no obvious reason for these mysterious lines. There are no obvious typos and the paper states they conduct GWA with 178 lines, which matches the number reported in File S2, which is where we sourced the data.\nKatzenberger et al (2015): line 521 - no obvious typo (data is ordered by increasing trait value). One-off issue. Not on Flybase.\nTurner, Miller and Cochrane (2013): line 760 - no obvious typo. One off. Not on Flybase.\nMontgomery et al (2014): lines 424 and 766 - Errors appear to be mislabelled lines. Table S3 includes RAL lines 424 and 766. Line 766 is out of numeric order in the Table. Most likely to actually be line 776 or 786, but we cannot be sure.\nHe et al (2014): Bloomington stock number 28120 - Error appears to be a typo. Line 28120 is included in the raw data, but isnât listed in Table S2 which shows the lines used in the study. One-off issue.\nLafluente, Duneau and Beldade (2018): line 809 - Likely to be a typo or a labelling error. One-off issue.\n\nThe following code removes these putatively erroneous lines from the dataset:\n\n\nShow the code\n# check how many traits each line has been phenotyped for\nline_test &lt;- all.dgrp.phenos_combined %&gt;% group_by(line) %&gt;% \n  summarise(n_traits = length(Trait)) %&gt;% \n  arrange(n_traits)\n\n# check specific lines\n\n#print(all.dgrp.phenos_combined %&gt;% \n # filter(line == \"556\"), n = 31)\n\n# remove the aberrant lines\naberrant_lines &lt;- c(226, 273, 285, 331, 424, 471, 501, \n                    521, 568, 575, 709, 760, 766, 809, \n                    831, 846, 847, 854, 917)\n\nall.dgrp.phenos_combined &lt;-\n  all.dgrp.phenos_combined %&gt;% \n  filter(!(line %in% aberrant_lines))\n\n\nThis still leaves 219 lines, which was unexpected because most studies state that the DGRP consists of 205 lines. However, the DGRP record on Flybase (http://flybase.org/reports/FBlc0000504.html) indicates that a total of 219 lines have been included in the DGRP at some point since its creation. We infer that some lines were withdrawn from the Bloomington stock centre, explaining their absence from most DGRP studies.\nThe lines that have been withdrawn but are included in our dataset are: 80, 272, 343, 378, 387, 393, 398, 476, 514, 554, 556, 591, 750, 771. We chose not to remove these lines from our dataset, as many of the studies we include in our dataset make use of these lines.\n\n\n\nSome studies report data that has been previously used (in a way that we missed in our initial data collection), leading to perfect or near perfect correlations between traits. We here remove one such duplicate trait.\nAnother study includes data that we entered into the database incorrectly: one trait was measured in 10 lines (below our cutoff) but was entered for 99 lines. We remove this error from the dataset.\n\n\nShow the code\nall.dgrp.phenos_combined_subset &lt;-\n  all.dgrp.phenos_combined %&gt;% filter(Trait != \"rapid.cold.hardening.25C\",\n                                      Trait != \"dopamine.response.to.paraquat.2021.m\")\n\n\n\n\n\nSome traits have been measured in heterozygotes. This generally occurs when the goal of a study is to observe whether genetic variation affects the response to a genetic disease encoded by a particular variant or the expression of a transgenic construct. These studies are not ideal for our database, as the phenotypes they observe may be affected be dominance and epistatic interactions that are absent in the nearly completely homozygous DGRP lines. We remove these studies from our dataset.\n\n\nShow the code\n# Remove traits measured in heterozyogtes and traits entered incorrectly\n\nall.dgrp.phenos_combined_subset &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  filter(Trait != \"recombination.rate.3R.f\", \n         Trait != \"recombination.rate.X.f\", \n         Trait != \"eye.area.diabetes.susceptibility.2014a.m\", \n         Trait != \"eye.area.diabetes.susceptibility.2014a.f\",\n         Trait != \"eye.area.Drop.susceptibility.2014a.f\", \n         Trait != \"eye.area.Drop.susceptibility.2014a.m\", \n         Trait != \"eye.area.Lobe.susceptibility.2014a.f\", \n         Trait != \"eye.area.Lobe.susceptibility.2014a.m\", \n         Trait != \"notum.bristles.diabetes.susceptibility.2014a.f\", \n         Trait != \"notum.bristles.diabetes.susceptibility.2014a.m\", \n         Trait != \"CRISPR.full.resistance.embryo.formation.f\", \n         Trait != \"CRISPR.germline.conversion.rate.f\", \n         Trait != \"CRISPR.mosaic.resistance.embryo.formation.f\", \n         Trait != \"CRISPR.wildtype.rate.m\", \n         Trait != \"Canton S(B).olfactory.response.benzaldehyde.f\", \n         Trait != \"neur.olfactory.response.benzaldehyde.f\", \n         Trait != \"Sema5c.olfactory.response.benzaldehyde.f\") \n\n\n\n\n\nFor some traits, a small number of lines had &gt;1 trait value. We fixed these datasets in the original spreadsheet before it entered R, but document our fixes here for transparency.\n\nUnckless, Rottschaefer and Lazzaro (2015, G3) include line 287 twice in their provided data. The trait values were identical, so we simply removed the duplication.\nChow, Wolfner and Clark (2013, PNAS) include line 287 twice in their data (coincidence?). They measured two traits: a hazard ratio for tunicamycin-induced survival and an LT50 value. Line 287 has two different hazard ratios, but the same LT50 value. We therefore removed line 287 completely from the hazard ratio dataset, but only removed the duplicate in the LT50 dataset.\nHotson and Schneider (2015, G3) include line 712 twice in their provided data, for the trait L.monocytogenes.load.m. The duplicates provide different values. Due to this ambiguity, we removed line 712 from the dataset.\nAdebambo et al (2020, Frontiers in Genetics) include the line 229 twice. The trait values were identical, so we simply removed the duplication.\n\n\n\nShow the code\n# the code below reports lines that have &gt; 1 measurement for any of the traits in our dataset \n\n# If there are 0 rows in the tibble, it means no errors remain\nproblems &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  group_by(line, Trait) %&gt;% \n  summarise(n = n()) %&gt;% \n  arrange(-n) %&gt;% \n  filter(n &gt; 1)\n\n\n\n\n\nHere, we save the {r n_traits_after_cleaning} traits as a .csv file called data/derived/all.dgrp.phenos_unscaled.csv, which you may wish to download and use in your research. The file contains 4 columns which give the name of the DGRP line (line), the name of the trait being measured (Trait), the reference (Reference), and the estimated mean value of the focal trait in the focal DGRP line (trait_value).\nTo help interpret the contents of this file, we also save a metadata file called data/derived/meta_data_for_all_traits.csv, which gives information about each trait. This file is also shown in the HTML Table below. The columns are interpreted as follows:\n\nTrait: The name of the trait. This matches the traits listed in data/derived/all.dgrp.phenos_unscaled.csv, and can be used to combine the two spreadsheets (e.g.Â by using a left join, as in: dplyr::left_join(all.dgrp.phenos_unscaled, meta_data_for_all_traits))\n# lines measured: Number of DGRP lines for estimates of the line mean trait value was available.\nSex: The sex of the flies being measured (Female, Male, or Pooled, where the latter means flies of both sexes were measured)\nLife_stage: the life stage at which flies were phenotyped (Juvenile: all life stages that precede eclosion, and adulthood: post eclosion)\nTrait guild: A categorisation of the type of trait that was manually assigned by us to aid visualisation in figures.\nTrait description: A description of how the trait, including an explanation of the meaning of relatively high and low values.\nReference: The source for the data.\n\n\n\nShow the code\nlines_measured &lt;- \n  all.dgrp.phenos_combined_subset %&gt;% \n  group_by(Trait) %&gt;% \n  summarise(`# lines measured` = n()) %&gt;% \n  arrange(Trait)\n\ntable &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  distinct(Trait, .keep_all = TRUE) %&gt;% \n  arrange(Trait) %&gt;% \n  select(-c(trait_value))\n  \ncomplete_metadata &lt;- left_join(lines_measured, table) %&gt;% \n  select(Trait, `# lines measured`, Sex, Life_stage, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(`Trait guild`, Trait, Reference)\n\nall.dgrp.phenos_combined_subset %&gt;% \n  select(line, Trait, trait_value, Reference) %&gt;% \n  arrange(Trait) %&gt;% \n  write_csv(file = \"data/data_collation/output/all.dgrp.phenos_unscaled.csv\")\n\ncomplete_metadata %&gt;% \n  write_csv(file = \"data/data_collation/output/meta_data_for_all_traits.csv\")\n\n\nThe full list of traits in the dataset, and metadata about each one, is shown in this table:\n\n\nShow the code\n# Create a function to build HTML searchable tables\nmy_data_table &lt;- function(df){\n  datatable(\n    df, rownames=FALSE,\n    autoHideNavigation = TRUE,\n    extensions = c(\"Scroller\",  \"Buttons\"),\n    options = list(\n      autoWidth = TRUE,\n      dom = 'Bfrtip',\n      deferRender=TRUE,\n      scrollX=TRUE, scrollY=1000,\n      scrollCollapse=TRUE,\n      buttons =\n        list('pageLength', 'colvis', 'csv', list(\n          extend = 'pdf',\n          pageSize = 'A4',\n          orientation = 'landscape',\n          filename = 'Trait_table')),\n      pageLength = 2115\n    )\n  )\n}\n\nmy_data_table(complete_metadata)"
  },
  {
    "objectID": "Data_collation.html#save-the-cleaned-dataset-with-traits-measured-in-standard-units",
    "href": "Data_collation.html#save-the-cleaned-dataset-with-traits-measured-in-standard-units",
    "title": "Data collation",
    "section": "",
    "text": "Some of our traits have already been scaled to have a mean of zero and standard deviation of 1. For consistency, and to aid comparison of variances between traits, we also create and save a version of the complete dataset where all traits have been standardised (by subtracting the mean from each value and dividing by the standard deviation, via Râs scale() function).\n\n\nShow the code\nall.dgrp.phenos_scaled &lt;- all.dgrp.phenos_combined_subset %&gt;% \n  select(line, Trait, trait_value, Reference) %&gt;% \n  group_by(Trait) %&gt;% \n  mutate(trait_value = as.numeric(scale(trait_value)))\n\nwrite_csv(all.dgrp.phenos_scaled, file = \"data/data_collation/output/all.dgrp.phenos_scaled.csv\")"
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "How to navigate this document",
    "section": "",
    "text": "This website presents an analysis of the predicted evolutionary response to selection in a population of Drosophila melanogaster. It accompanies the manuscript âThe complication of sex: estimating adaptation when selection acts on females and malesâ in review at Evolution, and is designed so that our methods can be fully reproduced with relative ease. The data collation tab contains information on our dataset and documents how it was quality controlled. Our analysis relies on using the mean phenotypic values for near-isogenic lines of flies. Each line carries a single genotype so these phenotypic means can be used as estimates of breeding values. The âFinding line meansâ tab documents the statistical modelling we used to find line means when only raw, individual level data was provided by the original study. The final tab documents our analysis. It includes the code to wrangle the data, run the models and build the figures.\nWe welcome any queries or comments concerning our analysis; please email tkeaney@uni-mainz.de\n\nAnalysis system environment:\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nlocale: LC_COLLATE=English_Germany.utf8, LC_CTYPE=English_Germany.utf8, LC_MONETARY=English_Germany.utf8, LC_NUMERIC=C and LC_TIME=English_Germany.utf8\nattached base packages: stats, graphics, grDevices, utils, datasets, methods and base\nother attached packages: dplyr(v.1.1.4) and pander(v.0.6.5)\nloaded via a namespace (and not attached): digest(v.0.6.36), utf8(v.1.2.4), R6(v.2.5.1), fastmap(v.1.2.0), tidyselect(v.1.2.1), xfun(v.0.45), magrittr(v.2.0.3), glue(v.1.7.0), tibble(v.3.2.1), knitr(v.1.48), pkgconfig(v.2.0.3), htmltools(v.0.5.8.1), generics(v.0.1.3), rmarkdown(v.2.27), lifecycle(v.1.0.4), cli(v.3.6.3), fansi(v.1.0.6), vctrs(v.0.6.5), compiler(v.4.4.1), rstudioapi(v.0.16.0), tools(v.4.4.1), pillar(v.1.9.0), evaluate(v.0.24.0), Rcpp(v.1.0.12), yaml(v.2.3.9), rlang(v.1.1.4), jsonlite(v.1.8.8) and htmlwidgets(v.1.6.4)"
  },
  {
    "objectID": "Get_line_means_from_raw_data.html",
    "href": "Get_line_means_from_raw_data.html",
    "title": "Estimating line means from raw data",
    "section": "",
    "text": "Show the code\nlibrary(Matrix)\nlibrary(tidyverse)\nlibrary(brms) # for bayesian models\nlibrary(tidybayes) # for more bayesian things\nlibrary(broom) # convert results of functions into tables\n\nif(!dir.exists(\"fits/raw_data_fits\")) dir.create(\"fits/raw_data_fits\")\nmy_scale &lt;- function(x) as.numeric(scale(x))\n\n\n\n\nSome studies/authors provided the raw data that was collected when measuring DGRP phenotypes (e.g.Â measurements of individual flies), although we need line mean data to calculate the response to selection. To get line means, we fitted Bayesian mixed effect models and used these to estimate mean trait values for each line, using the model formula that made the most sense to us given the studyâs experimental design (see annotations in the code below). Often, but not always, this conformed with the original analysis. Our analyses of each paperâs data are presented in a separate tab below.\nWhere the response follows a Gaussian distribution, we standardise the response to have a mean of 0 and a standard deviation of 1, in order to make prior specification more straightforward. In these cases, the estimated line means are converted back to the response scale.\nThe Bayesian models wonât run unless you have stan and the brms package installed. To install stan follow these instructions.\n\n\n\n\n\n\n\nShow the code\nJumbo_mito_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Jumbo_Lucioni_2012.csv\") %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Gender),\n         Rep = as.factor(Rep),\n         po_ratio = na_if(`po ratio`, \".\"),\n         po_ratio = as.numeric(po_ratio)) %&gt;% \n  rename(state_3 = `st 3 (pmol/s*mg protein)`,\n         state_4 = `st 4 (pmol/s*mg protein)`) %&gt;% \n  select(line, Sex, Rep, state_3, state_4, po_ratio) %&gt;% \n  filter(!is.na(line))\n\n# standardise \nJumbo_mito_data &lt;-\n  Jumbo_mito_data %&gt;% \n  mutate(st_state_3 = my_scale(state_3),\n         st_state_4 = my_scale(state_4),\n         st_po_ratio = my_scale(po_ratio)) \n\n\n\n# respiration state 3 model\n\nstate_3_model &lt;- brm(st_state_3 ~ 1 + Sex + (Sex|line),\n                      data = Jumbo_mito_data, family = gaussian,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/state_3.model\")\n\n#pp_check(state_3_model)\n\nnew_data &lt;-\n  expand_grid(line = Jumbo_mito_data$line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(line, Sex)\n\n     \nfitted_state_3 &lt;- fitted(state_3_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3),\n         Q2.5 = Q2.5*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3),\n         Q97.5 = Q97.5*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3))\n\nstate_3_estimates &lt;- tibble(new_data, fitted_state_3) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# build a function to create tibbles holding sex specific line means\n\nJumbo_line_means &lt;- function(estimates, y, Trait, description){\n  estimates %&gt;% \n  filter(Sex == y) %&gt;% \n  mutate(Trait = Trait,\n         Reference = \"Jumbo-Lucioni et al (2012) BMC Genomics\",\n         `Trait guild` = \"Physiological\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\n# create the state 3 tibbles\n\n# females\n\nstate_3_f_line_means &lt;- Jumbo_line_means(state_3_estimates, \"Female\", \"mitochondrial.state.3.respiration.f\", \"Mean mitochondrial state 3 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 3 respiration occurs when protons re-enter the mitochondrial matrix in the presence of ADP, which results in the production of ATP. Higher values indicate higher respiration rates.\")\n\n\n# males\n\nstate_3_m_line_means &lt;- Jumbo_line_means(state_3_estimates, \"Male\", \"mitochondrial.state.3.respiration.m\", \"Mean mitochondrial state 3 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 3 respiration occurs when protons re-enter the mitochondrial matrix in the presence of ADP, which results in the production of ATP. Higher values indicate higher respiration rates.\")\n\n\n# respiration state 4 model\n\nstate_4_model &lt;- brm(st_state_4 ~ 1 + Sex + (Sex|line),\n                     data = Jumbo_mito_data, family = gaussian,\n                     prior = c(prior(normal(0, 0.5), class = Intercept),\n                               prior(normal(0, 0.5), class = b),\n                               prior(exponential(1), class = sd)),\n                     iter = 10000, warmup = 4000, chains = 4, cores = 4,\n                     control = list(adapt_delta = 0.95, max_treedepth = 10),\n                     seed = 2, file = \"fits/raw_data_fits/state_4.model\")\n\n#pp_check(state_4_model)\n\n     \nfitted_state_4 &lt;- fitted(state_4_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4),\n         Q2.5 = Q2.5*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4),\n         Q97.5 = Q97.5*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4))\n\nstate_4_estimates &lt;- tibble(new_data, fitted_state_4) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# create the state 4 tibbles\n\n# females\n\nstate_4_f_line_means &lt;- Jumbo_line_means(state_4_estimates, \"Female\", \"mitochondrial.state.4.respiration.f\", \"Mean mitochondrial state 4 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 4 respiration occurs when protons leak into the mitochondrial matrix in the absence of ADP, which is required for ATP synthase. Higher values indicate higher respiration rates.\")\n\n# males\n\nstate_4_m_line_means &lt;- Jumbo_line_means(state_4_estimates, \"Male\", \"mitochondrial.state.4.respiration.m\", \"Mean mitochondrial state 4 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 4 respiration occurs when protons leak into the mitochondrial matrix in the absence of ADP, which is required for ATP synthase. Higher values indicate higher respiration rates.\")\n\n# P:O ratio model\n\n\n\nPO_ratio_model &lt;- brm(st_po_ratio ~ 1 + Sex + (Sex|line),\n                      data = Jumbo_mito_data %&gt;% filter(po_ratio != \"NA\"), family = gaussian,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/PO_ratio.model\")\n\n#pp_check(PO_ratio_model)\n\nJumbo_PO_data &lt;- Jumbo_mito_data %&gt;% filter(po_ratio != \"NA\")\n     \nfitted_PO_ratio &lt;- fitted(PO_ratio_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio),\n         Q2.5 = Q2.5*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio),\n         Q97.5 = Q97.5*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio))\n\nPO_ratio_estimates &lt;- tibble(new_data, fitted_PO_ratio) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# create the P:O ratio tibbles\n\n# females\n\nPO_ratio_f_line_means &lt;- Jumbo_line_means(PO_ratio_estimates, \"Female\", \"mitochondrial.PO.ratio.f\", \"Mean phosphate/oxygen ratio (P:O ratio) - a measure of the efficiency with which mitochondria convert oxygen into ATP. The ratio was here calculated as the amount of ADP consumed per oxygen being reduced during state 3 respriation. Mitochondria were sourced from the thorax and respiration was measured in vitro. Higher values indicate more efficient ATP production.\")\n\n# males\n\nPO_ratio_m_line_means &lt;- Jumbo_line_means(PO_ratio_estimates, \"Male\", \"mitochondrial.PO.ratio.m\", \"Mean phosphate/oxygen ratio (P:O ratio) - a measure of the efficiency with which mitochondria convert oxygen into ATP. The ratio was here calculated as the amount of ADP consumed per oxygen being reduced during state 3 respriation. Mitochondria were sourced from the thorax and respiration was measured in vitro. Higher values indicate more efficient ATP production.\")\n\nJumbo_traits &lt;- \n  rbind(state_3_f_line_means, \n        state_3_m_line_means, \n        state_4_f_line_means, \n        state_4_m_line_means, \n        PO_ratio_f_line_means, \n        PO_ratio_m_line_means)\n\n\n\n\n\n\n\nShow the code\n# Grubbs et al 2013\n\nGrubbs_2013_leg_props &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Grubbs_2013_leg_props.csv\") %&gt;% \n  mutate(Sex = as.factor(Sex),\n         Line = as.factor(Line),\n         # standardise\n         st_Femur = my_scale(Femur),\n         st_Tibia = my_scale(Tibia),\n         st_Tarsus = my_scale(Tarsus), \n         st_Total = my_scale(Total))\n\nGrubbs_2013_T1_leg_props &lt;- Grubbs_2013_leg_props %&gt;% \nfilter(T1_T2 == \"T1\")\n\nGrubbs_2013_T2_leg_props &lt;- Grubbs_2013_leg_props %&gt;% \nfilter(T1_T2 == \"T2\")\n\n# mean total T1 leg length\n\nT1_leg_length_model &lt;- brm(st_Total ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1_leg.length.model\", control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nnew_data &lt;-\n  expand_grid(Line = Grubbs_2013_leg_props$Line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(Line, Sex)\n\nfitted_T1_leg_total &lt;- fitted(T1_leg_length_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total))\n\n# build a function to create tibbles holding sex specific line means\n\nGrubbs_line_means &lt;- function(estimates, y, Trait, guild, description){\n  estimates %&gt;% \n  filter(Sex == y) %&gt;% \n  mutate(line = str_remove(Line, \"line_\"),\n         Trait = Trait,\n         Reference = \"Grubbs et al (2013) PLOS One\",\n         `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nT1_leg_length_estimates &lt;- tibble(new_data, fitted_T1_leg_total) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\nT1_leg_length_f_line_means &lt;- Grubbs_line_means(T1_leg_length_estimates, \"Female\", \"T1.leg.length.f\", \"Morphological\", \"Mean leg length for legs originating on the first thoracic segment. Higher values indicate longer legs\")\n\n# T1 males\n\nT1_leg_length_m_line_means &lt;- Grubbs_line_means(T1_leg_length_estimates, \"Male\", \"T1.leg.length.m\", \"Morphological\", \"Mean leg length for legs originating on the first thoracic segment. Higher values indicate longer legs\")\n\n# mean total T2 leg length\n\nT2_leg_length_model &lt;- brm(st_Total ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = \"Gaussian\",\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2_leg.length.model\", control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T2_leg_total &lt;- fitted(T2_leg_length_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total))\n\n\nT2_leg_length_estimates &lt;- tibble(new_data, fitted_T2_leg_total) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\nT2_leg_length_f_line_means &lt;- Grubbs_line_means(T2_leg_length_estimates, \"Female\", \"T2.leg.length.f\", \"Morphological\", \"Mean leg length for legs originating on the second thoracic segment. Higher values indicate longer legs\")\n\n# T2 males\n\nT2_leg_length_m_line_means &lt;- Grubbs_line_means(T2_leg_length_estimates, \"Male\", \"T2.leg.length.m\", \"Morphological\", \"Mean leg length for legs originating on the second thoracic segment. Higher values indicate longer legs\")\n\n# Femur length\n\nT1_femur_model &lt;- brm(st_Femur ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.femur.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T1_femur &lt;- fitted(T1_femur_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur))\n\nT1_femur_estimates &lt;- tibble(new_data, fitted_T1_femur) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\nfemur_T1_f_line_means &lt;- Grubbs_line_means(T1_femur_estimates, \"Female\", \"T1.femur.f\", \"Morphological\", \"Mean femur length, for legs originating on the first thoracic segment. Higher values indicate longer femurs\")\n\n# T1 males\n\nfemur_T1_m_line_means &lt;- Grubbs_line_means(T1_femur_estimates, \"Male\", \"T1.femur.m\", \"Morphological\", \"Mean femur length, for legs originating on the first thoracic segment. Higher values indicate longer femurs\")\n\nT2_femur_model &lt;- brm(st_Femur ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.femur.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T2_femur &lt;- fitted(T2_femur_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur))\n\nT2_femur_estimates &lt;- tibble(new_data, fitted_T2_femur) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\nfemur_T2_f_line_means &lt;- Grubbs_line_means(T2_femur_estimates, \"Female\", \"T2.femur.f\", \"Morphological\", \"Mean femur length, for legs originating on the second thoracic segment. Higher values indicate longer femurs\")\n\n# T2 males\n\nfemur_T2_m_line_means &lt;- Grubbs_line_means(T2_femur_estimates, \"Male\", \"T2.femur.m\", \"Morphological\", \"Mean femur length, for legs originating on the second thoracic segment. Higher values indicate longer femurs\")\n\n# Tibia length\n\nT1_tibia_model &lt;- brm(st_Tibia ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.tibia.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T1_tibia &lt;- fitted(T1_tibia_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia))\n\nT1_tibia_estimates &lt;- tibble(new_data, fitted_T1_tibia) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\ntibia_T1_f_line_means &lt;- Grubbs_line_means(T1_tibia_estimates, \"Female\", \"T1.tibia.f\", \"Morphological\", \"Mean tibia length, for legs originating on the first thoracic segment. Higher values indicate longer tibias\")\n\n# T1 males\n\ntibia_T1_m_line_means &lt;- Grubbs_line_means(T1_tibia_estimates, \"Male\", \"T1.tibia.m\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\nT2_tibia_model &lt;- brm(st_Tibia ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 10000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.tibia.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T2_tibia &lt;- fitted(T2_tibia_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia))\n\nT2_tibia_estimates &lt;- tibble(new_data, fitted_T2_tibia) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\ntibia_T2_f_line_means &lt;- Grubbs_line_means(T2_tibia_estimates, \"Female\", \"T2.tibia.f\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\n# T2 males\n\ntibia_T2_m_line_means &lt;- Grubbs_line_means(T2_tibia_estimates, \"Male\", \"T2.tibia.m\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\n# Tarsus length\n\nT1_tarsus_model &lt;- brm(st_Tarsus ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.tarsus.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T1_tarsus &lt;- fitted(T1_tarsus_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus))\n\nT1_tarsus_estimates &lt;- tibble(new_data, fitted_T1_tarsus) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\ntarsus_T1_f_line_means &lt;- Grubbs_line_means(T1_tarsus_estimates, \"Female\", \"T1.tarsus.f\", \"Morphological\", \"Mean tarsus length, for legs originating on the first thoracic segment. Higher values indicate longer tarsus'.\")\n\n# T1 males\n\ntarsus_T1_m_line_means &lt;- Grubbs_line_means(T1_tarsus_estimates, \"Male\", \"T1.tarsus.m\", \"Morphological\", \"Mean tarsus length, for legs originating on the first thoracic segment. Higher values indicate longer tarsus'.\")\n\nT2_tarsus_model &lt;- brm(st_Tarsus ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.tarsus.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T2_tarsus &lt;- fitted(T2_tarsus_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus))\n\nT2_tarsus_estimates &lt;- tibble(new_data, fitted_T2_tarsus) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\ntarsus_T2_f_line_means &lt;- Grubbs_line_means(T2_tarsus_estimates, \"Female\", \"T2.tarsus.f\", \"Morphological\", \"Mean tarsus length, for legs originating on the second thoracic segment. Higher values indicate longer tarsus'.\")\n\n# T2 males\n\ntarsus_T2_m_line_means &lt;- Grubbs_line_means(T2_tarsus_estimates, \"Male\", \"T2.tarsus.m\", \"Morphological\", \"Mean tarsus length, for legs originating on the second thoracic segment. Higher values indicate longer tarsus'.\")\n\nGrubbs_traits &lt;- rbind(T1_leg_length_f_line_means, \n                       T1_leg_length_m_line_means, \n                       T2_leg_length_f_line_means, \n                       T2_leg_length_m_line_means,\n                       femur_T1_f_line_means, \n                       femur_T1_m_line_means, \n                       femur_T2_f_line_means, \n                       femur_T2_m_line_means,\n                       tibia_T1_f_line_means, \n                       tibia_T1_m_line_means, \n                       tibia_T2_f_line_means, \n                       tibia_T2_m_line_means,\n                       tarsus_T1_f_line_means, \n                       tarsus_T1_m_line_means, \n                       tarsus_T2_f_line_means, \n                       tarsus_T2_m_line_means)\n\n\n\n\n\nFrom Supplementary Table 1âs caption: âIn the second approach (c), simpler models were fitted, in which microbiota, weight and Wolbachia status were additive, with genotype nested in experimental block as a random effect. The statistical analysis presented in Fig.1b uses these models simplified by removal of non-significant factors.â\nWe follow this approach to best recapitulate the studyâs analysis, except that we allow the intercept for the random effect line to vary with microbiota treatment. This is needed in our modelling approach to estimate line-specific effects of microbiota. We also include day as a blocking factor, which represents a block of data collection involving a subset of lines. This controls for micro-environmental variance between blocks of phenotyping.\n\n\nShow the code\n# weight\n\nDobson_NI_microbiome.dryweight &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.dw.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_weight.5.flies = my_scale(weight.5.flies)) %&gt;% \n  select(-c(PC1, PC2, PC3, Code, RAL, ...1))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_NI_microbiome.dryweight %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_NI_microbiome.dryweight %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measurements in both treatments \n\nweight_microbiome_effect_lines &lt;- inner_join(a, b)\n\n# build a function to create tibbles holding specific line means\n\nDobson_line_means &lt;- function(estimates, Trait, guild, description){\n  estimates %&gt;% \n  mutate(Trait = Trait,\n         Sex = \"Male\",\n         Reference = \"Dobson et al (2015) Nature Communications\",\n          `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nweight_microbiome_model &lt;- brm(st_weight.5.flies ~ 1 + trt + wolb + day + (trt|line),\n                               data = Dobson_NI_microbiome.dryweight, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/weight.microbiome.model\")\n\n#pp_check(weight_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_NI_microbiome.dryweight$line,\n         trt = Dobson_NI_microbiome.dryweight$trt,\n         wolb = \"n\",\n         day = \"a\") %&gt;% \n  distinct(line, trt, wolb, day)\n              \n\nfitted_dryweight &lt;- fitted(weight_microbiome_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies),\n         Q2.5 = Q2.5*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies),\n         Q97.5 = Q97.5*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies))\n\ndry_weight_estimates_axenic &lt;- tibble(new_data, fitted_dryweight) %&gt;% \n  filter(trt == \"a\")\n\nweight.anexic_line_means &lt;- Dobson_line_means(dry_weight_estimates_axenic, \"weight.anexic.m\", \"Microbiome\", \"Mean combined dry weight of 5 adult flies that lacked a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate heavier flies.\")\n\ndry_weight_estimates_gnotobiotic &lt;- tibble(new_data, fitted_dryweight) %&gt;% \n  filter(trt == \"b\")\n\nweight.gnotobiotic_line_means &lt;- Dobson_line_means(dry_weight_estimates_gnotobiotic, \"weight.gnotobiotic.m\", \"Microbiome\", \"Mean combined dry weight of 5 adult flies that possessed a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate heavier flies.\")\n\n# Now get the difference between treatments\n\naxenic &lt;- \n  left_join(weight_microbiome_effect_lines, dry_weight_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto &lt;-\n  left_join(weight_microbiome_effect_lines, dry_weight_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\ndry_weight_estimates_diff &lt;-\n  left_join(axenic, gnoto) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_weight_line_means &lt;- Dobson_line_means(dry_weight_estimates_diff, \"weight.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined dry weight of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota had a greater positive effect on weight. Note that the presence of micriobiota on average increased dry weight.\")\n\n\n# Glucose\n\nDobson_glucose_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.glucose.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_glucose = my_scale(glucose)) %&gt;% \n  select(c(line, wolb, glucose, trt, day, weight.5.flies, st_glucose))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_glucose_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_glucose_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nglucose_microbiome_effect_lines &lt;- inner_join(a, b)\n\n# Note that we include weight as a moderator variable. This means we only estimate the direct effect of line on glucose levels, instead of the total effect. This is because line likely also affects weight which is likely to have a flow-on effect on glucose levels. \n\nglucose_microbiome_model &lt;- brm(st_glucose ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_glucose_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/glucose.microbiome.model\")\n\n#pp_check(glucose_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_glucose_microbiome$line,\n         trt = Dobson_glucose_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_glucose &lt;- fitted(glucose_microbiome_model,\n       newdata = new_data, allow_new_levels = TRUE) %&gt;% # Why do we need to allow new levels? Might be an issue\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose),\n         Q2.5 = Q2.5*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose),\n         Q97.5 = Q97.5*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose))\n\nglucose_estimates_axenic &lt;- tibble(new_data, fitted_glucose) %&gt;% \n  filter(trt == \"a\")\n\nglucose.anexic_line_means &lt;- Dobson_line_means(glucose_estimates_axenic, \"glucose.anexic.m\", \"Microbiome\", \"Mean combined glucose content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher glucose content.\")\n\nglucose_estimates_gnotobiotic &lt;- tibble(new_data, fitted_glucose) %&gt;% \n  filter(trt == \"b\")\n\nglucose.gnotobiotic_line_means &lt;- Dobson_line_means(glucose_estimates_gnotobiotic, \"glucose.gnotobiotic.m\", \"Microbiome\", \"Mean combined glucose content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher glucose content.\")\n\n# Now get the difference between treatments\n\naxenic_glucose &lt;- \n  left_join(glucose_microbiome_effect_lines, glucose_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_glucose &lt;-\n  left_join(glucose_microbiome_effect_lines, glucose_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nglucose_estimates_diff &lt;-\n  left_join(axenic_glucose, gnoto_glucose) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_glucose_line_means &lt;- Dobson_line_means(glucose_estimates_diff, \"glucose.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined glucose content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher glucose content. Note though that the presence of micriobiota on average decreased glucose content.\")\n\n\n# Glycogen\n\nDobson_glycogen_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.glycogen.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_glycogen = my_scale(glycogen)) %&gt;% \n  select(c(line, wolb, glycogen, st_glycogen, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_glycogen_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_glycogen_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nglycogen_microbiome_effect_lines &lt;- inner_join(a, b)\n\nglycogen_microbiome_model &lt;- brm(st_glycogen ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_glycogen_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/glycogen.microbiome.model\")\n\n#pp_check(glycogen_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_glycogen_microbiome$line,\n         trt = Dobson_glycogen_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_glycogen &lt;- fitted(glycogen_microbiome_model,\n       newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen),\n         Q2.5 = Q2.5*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen),\n         Q97.5 = Q97.5*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen))\n\nglycogen_estimates_axenic &lt;- tibble(new_data, fitted_glycogen) %&gt;% \n  filter(trt == \"a\")\n\nglycogen.anexic_line_means &lt;- Dobson_line_means(glycogen_estimates_axenic, \"glycogen.anexic.m\", \"Microbiome\", \"Mean combined glycogen content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher glycogen content.\")\n\nglycogen_estimates_gnotobiotic &lt;- tibble(new_data, fitted_glycogen) %&gt;% \n  filter(trt == \"b\")\n\nglycogen.gnotobiotic_line_means &lt;- Dobson_line_means(glycogen_estimates_gnotobiotic, \"glycogen.gnotobiotic.m\", \"Microbiome\",  \"Mean combined glycogen content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher glycogen content.\")\n\n# Now get the difference between treatments\n\naxenic_glycogen &lt;- \n  left_join(glycogen_microbiome_effect_lines, glycogen_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_glycogen &lt;-\n  left_join(glycogen_microbiome_effect_lines, glycogen_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nglycogen_estimates_diff &lt;-\n  left_join(axenic_glycogen, gnoto_glycogen) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_glycogen_line_means &lt;- Dobson_line_means(glycogen_estimates_diff, \"glycogen.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined glycogen content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher glycogen content. Note that the presence of micriobiota on average increased glycogen content.\")\n\n# Protein\n\nDobson_protein_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.protein.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_protein = my_scale(protein)) %&gt;% \n  select(c(line, wolb, protein, st_protein, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_protein_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_protein_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nprotein_microbiome_effect_lines &lt;- inner_join(a, b)\n\nprotein_microbiome_model &lt;- brm(st_protein ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_protein_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/protein.microbiome.model\")\n\n#pp_check(protein_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_protein_microbiome$line,\n         trt = Dobson_protein_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_protein &lt;- fitted(protein_microbiome_model,\n       newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein),\n         Q2.5 = Q2.5*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein),\n         Q97.5 = Q97.5*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein))\n\nprotein_estimates_axenic &lt;- tibble(new_data, fitted_protein) %&gt;% \n  filter(trt == \"a\")\n\nprotein.anexic_line_means &lt;- Dobson_line_means(protein_estimates_axenic, \"protein.anexic.m\", \"Microbiome\", \"Mean combined protein content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher protein content.\")\n\nprotein_estimates_gnotobiotic &lt;- tibble(new_data, fitted_protein) %&gt;% \n  filter(trt == \"b\")\n\nprotein.gnotobiotic_line_means &lt;- Dobson_line_means(protein_estimates_gnotobiotic, \"protein.gnotobiotic.m\", \"Microbiome\", \"Mean combined protein content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher protein content.\")\n\n# Now get the difference between treatments\n\naxenic_protein &lt;- \n  left_join(protein_microbiome_effect_lines, protein_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_protein &lt;-\n  left_join(protein_microbiome_effect_lines, protein_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nprotein_estimates_diff &lt;-\n  left_join(axenic_protein, gnoto_protein) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_protein_line_means &lt;- Dobson_line_means(protein_estimates_diff, \"protein.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined protein content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher protein content. Note that the presence of micriobiota on average increased protein content.\")\n\n# TAG glycerol\n\nDobson_TAG_glycerol_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.TAG_glycerol.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         #wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_TAG_glycerol = my_scale(TAG_glycerol)) %&gt;% \n  select(c(line, TAG_glycerol, st_TAG_glycerol, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_TAG_glycerol_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_TAG_glycerol_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nTAG_glycerol_microbiome_effect_lines &lt;- inner_join(a, b)\n\nTAG_glycerol_microbiome_model &lt;- brm(st_TAG_glycerol ~ 1 + trt + day + weight.5.flies + (trt|line),\n                               data = Dobson_TAG_glycerol_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/TAG_glycerol.microbiome.model\")\n\n#pp_check(TAG_glycerol_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_TAG_glycerol_microbiome$line,\n         trt = Dobson_TAG_glycerol_microbiome$trt,\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, day, weight.5.flies)\n              \n\nfitted_TAG_glycerol &lt;- fitted(TAG_glycerol_microbiome_model,\n                              newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol),\n         Q2.5 = Q2.5*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol),\n         Q97.5 = Q97.5*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol))\n\nTAG_glycerol_estimates_axenic &lt;- tibble(new_data, fitted_TAG_glycerol) %&gt;% \n  filter(trt == \"a\")\n\nTAG_glycerol.anexic_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_axenic, \"triglyceride.anexic.m\", \"Microbiome\", \"Mean combined triglyceride (TAG) content after glycerol substraction extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher TAG content.\")\n\nTAG_glycerol_estimates_gnotobiotic &lt;- tibble(new_data, fitted_TAG_glycerol) %&gt;% \n  filter(trt == \"b\")\n\nTAG_glycerol.gnotobiotic_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_gnotobiotic, \"triglyceride.gnotobiotic.m\", \"Microbiome\", \"Mean combined triglyceride (TAG) content after glycerol substraction extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher TAG content.\")\n\n# Now get the difference between treatments\n\naxenic_TAG_glycerol &lt;- \n  left_join(TAG_glycerol_microbiome_effect_lines, TAG_glycerol_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_TAG_glycerol &lt;-\n  left_join(TAG_glycerol_microbiome_effect_lines, TAG_glycerol_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nTAG_glycerol_estimates_diff &lt;-\n  left_join(axenic_TAG_glycerol, gnoto_TAG_glycerol) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_TAG_glycerol_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_diff, \"TAG.glycerol.microbiome.effect.m\", \"Microbiome\", \"Mean change in combined triglyceride content after glycerol substraction of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher TAG content. Note though that the presence of micriobiota on average decreased TAG content.\")\n\nDobson_traits &lt;- rbind(weight.anexic_line_means, \n                       weight.gnotobiotic_line_means, \n                       gnoto_anexic_diff_weight_line_means,\n                       glucose.anexic_line_means, \n                       glucose.gnotobiotic_line_means, \n                       gnoto_anexic_diff_glucose_line_means,\n                       glycogen.anexic_line_means, \n                       glycogen.gnotobiotic_line_means, \n                       gnoto_anexic_diff_glycogen_line_means,\n                       protein.anexic_line_means, \n                       protein.gnotobiotic_line_means, \n                       gnoto_anexic_diff_protein_line_means,\n                       TAG_glycerol.anexic_line_means, \n                       TAG_glycerol.gnotobiotic_line_means, \n                       gnoto_anexic_diff_TAG_glycerol_line_means)\n\n\n\n\n\n\n\nShow the code\nGaertner_2015_male_mating &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Gaertner_2015_male_mating.csv\") %&gt;% \n  select(Block, Day, Assay, Chamber, Line, Subject, SUM, orient_female, approach, wing, genital_lick, attempt_cop, copulate, sum_court) %&gt;%\n  rename(MMP = SUM) %&gt;% \n  mutate(Block = as.factor(Block),\n         line = as.factor(Line),\n         courtship_events = orient_female + approach + wing + genital_lick + attempt_cop,\n         mating_latency = 31 - copulate, # we subtract from 31 to tell the model that flies did not start the assay mating \n         censor = if_else(mating_latency == 31, 1, 0))\n\n# build a function to create tibbles holding specific line means\n\nGaertner_line_means &lt;- function(estimates, Trait, guild, description){\n  estimates %&gt;% \n  mutate(Trait = Trait,\n         Sex = \"Male\",\n         Reference = \"Gaertner et al (2015) G3\",\n          `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\n# We will model the 5 courtship processes individually (note that the courtship data is very zero inflated)\n\n# orientation towards females\n\norient_model &lt;- brm(orient_female ~ 1 + Block + (1|line),\n                    data = Gaertner_2015_male_mating, family = zero_inflated_poisson,\n                    prior = c(prior(normal(3, 0.5), class = Intercept),\n                              prior(normal(0, 0.2), class = b),\n                              prior(cauchy(0, 0.2), class = sd),\n                              prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                    iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                    seed = 2, file = \"fits/raw_data_fits/orient.female.model\",\n                    control = list(adapt_delta = 0.8, max_treedepth = 12))\n\nnew_data &lt;-\n  tibble(line = Gaertner_2015_male_mating$Line,\n         Block = 1) %&gt;% \n  distinct(line, Block)\n              \n\nfitted_orient &lt;- fitted(orient_model,\n       newdata = new_data,\n       re_formula = orient_female ~ (1|line)) %&gt;% \n  as_tibble()\n\norient_to_female_m_estimates &lt;- tibble(new_data, fitted_orient) \n\norient_to_female_m_line_means &lt;- Gaertner_line_means(orient_to_female_m_estimates, \"orient.towards.female.m\", \"Behavioural\", \"Mean number of times a DGRP male orientated towards a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of orientations, and potentially more persistent courtship.\")\n\n# approaching females\n\napproach_model &lt;- brm(approach ~ 1 + Block + (1|line),\n                      data = Gaertner_2015_male_mating, family = zero_inflated_poisson,\n                      prior = c(prior(normal(3, 0.5), class = Intercept),\n                                prior(normal(0, 0.2), class = b),\n                                prior(cauchy(0, 0.2), class = sd),\n                                prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/approach.female.model\",\n                      control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_approach &lt;- fitted(approach_model,\n       newdata = new_data,\n       re_formula = approach ~ (1|line)) %&gt;% \n  as_tibble()\n\napproach_female_m_estimates &lt;- tibble(new_data, fitted_approach) \n\napproach_female_m_line_means &lt;- Gaertner_line_means(approach_female_m_estimates, \"approach.female.m\", \"Behavioural\", \"Mean number of times a DGRP male approached a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of approaches, and potentially more persistent courtship.\")\n\n# wing display (singing)\n\nwing_display_model &lt;- brm(wing ~ 1 + Block + (1|line),\n                          data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                          prior = c(prior(normal(3, 0.5), class = Intercept),\n                                    prior(normal(0, 0.2), class = b),\n                                    prior(cauchy(0, 0.2), class = sd),\n                                    prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                          iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                          seed = 2, file = \"fits/raw_data_fits/wing.display.model\",\n                          control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_wing_display &lt;- fitted(wing_display_model,\n       newdata = new_data,\n       re_formula = wing ~ (1|line)) %&gt;% \n  as_tibble()\n\nwing_display_m_estimates &lt;- tibble(new_data, fitted_wing_display) \n\nwing_display_frequency_m_line_means &lt;- Gaertner_line_means(wing_display_m_estimates, \"wing.display.frequency.m\", \"Behavioural\", \"Mean number of times a DGRP male extended their wing at a 90 degree angle in rapid vibration while in the presence of a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of wing displays, and potentially more persistent courtship.\")\n\n# genital licking\n\ngenital_licking_model &lt;- brm(genital_lick ~ 1 + Block + (1|line),\n                             data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                             prior = c(prior(normal(3, 0.5), class = Intercept),\n                                       prior(normal(0, 0.2), class = b),\n                                       prior(cauchy(0, 0.2), class = sd),\n                                       prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                             iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                             seed = 2, file = \"fits/raw_data_fits/genital.lick.model\",\n                             control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_genital_licking &lt;- fitted(genital_licking_model,\n       newdata = new_data,\n       re_formula = genital_lick ~ (1|line)) %&gt;% \n  as_tibble()\n\ngenital_licking_m_estimates &lt;- tibble(new_data, fitted_genital_licking) \n\ngenital_licking_m_line_means &lt;- Gaertner_line_means(genital_licking_m_estimates, \"genital.licking.frequency.m\", \"Behavioural\", \"Mean number of genital licks by DGRP male while courting a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater frequency of genital licking, and potentially more persistent courtship.\")\n\n# attempted copulations\n\nattempted_copulations_model &lt;- brm(attempt_cop ~ 1 + Block + (1|line),\n                                   data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                                   prior = c(prior(normal(3, 0.5), class = Intercept),\n                                             prior(normal(0, 0.2), class = b),\n                                             prior(cauchy(0, 0.2), class = sd),\n                                             prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                                   iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                                   seed = 2, file = \"fits/raw_data_fits/attempt.cop.model\",\n                                   control = list(adapt_delta = 0.9, max_treedepth = 10))\n\nfitted_attempted_copulations &lt;- \n  fitted(attempted_copulations_model,\n         newdata = new_data) %&gt;% \n  as_tibble()\n\nattempted_copulations_m_estimates &lt;- tibble(new_data, fitted_attempted_copulations) \n\nattempted_copulations_m_line_means &lt;- Gaertner_line_means(attempted_copulations_m_estimates, \"attempted.copulation.frequency.m\", \"Behavioural\", \"Mean number of attempted copulations by DGRP male while courting a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater frequency of copulation attempts, and potentially more persistent courtship.\")\n\n# Mating latency (like a no choice trial)\n\n# The data is right censored for males that did not mate\n\nmating_latency_model &lt;-\n  brm(mating_latency | cens(censor) ~ 1 + Block + (1|line),\n      data = Gaertner_2015_male_mating, \n      family = weibull(), inits = 0,\n      prior = c(prior(normal(0, 1), class = Intercept), # the intercept in this model is the rate of decline in un-mated males\n                prior(exponential(1), class = sd)),\n      iter = 8000, warmup = 2000, chains = 4, cores = 4,\n      seed = 2, file = \"fits/raw_data_fits/mating.latency.model\",\n      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\nfitted_mating_latency &lt;- fitted(mating_latency_model,\n       newdata = new_data,\n       re_formula = mating_latency ~ (1|line)) %&gt;% \n  as_tibble()\n\nmating_latency_m_estimates &lt;- tibble(new_data, fitted_mating_latency) \n\nmating_latency_m_line_means &lt;- Gaertner_line_means(mating_latency_m_estimates, \"mating.latency.2015.m\", \"Behavioural\", \"Mean latency until a DGRP male was observed copulating with a virgin female, detected by scan sampling 30 times over a 15 minute period. Lower values indicate males that began mating faster, which could be interpreted as males that are more attractive to females.\")\n\nGaertner_traits &lt;- rbind(orient_to_female_m_line_means, \n                         approach_female_m_line_means, \n                         wing_display_frequency_m_line_means, \n                         genital_licking_m_line_means, \n                         attempted_copulations_m_line_means, \n                         mating_latency_m_line_means)\n\n\n\n\n\n\n\nShow the code\n# Line 34061 doesn't exist on Bloomington or flybase. There is a 34062 though (line 49). Currently removed\n\nNajarro_2015_caff_resistance &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Najarro_et_al_2015_caffeine_resistance.csv\") %&gt;% \n  # remove unidentified line\n  filter(line != 34061) %&gt;% \n  mutate(line = as.factor(line),\n         # standardise\n         st_CaffeineResistance = my_scale(CaffeineResistance))\n \n # mean caffeine resistance model\n\ncaffeine_resistance_model &lt;- brm(st_CaffeineResistance ~ 1 + (1|line),\n                      data = Najarro_2015_caff_resistance, family = \"Gaussian\",\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/caffeine.resistance.model\")\n\nnew_data &lt;-\n  tibble(line = Najarro_2015_caff_resistance$line) %&gt;% \n  distinct(line)\n\nfitted_caffeine_resistance &lt;- fitted(caffeine_resistance_model,\n                                     newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance),\n         Q2.5 = Q2.5*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance),\n         Q97.5 = Q97.5*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance))\n\ncaffeine_resistance_line_means &lt;- tibble(new_data, fitted_caffeine_resistance) %&gt;% \n  mutate(Trait = \"caffeine.resistance.f\",\n         Sex = \"Female\",\n         Reference = \"Najarro et al (2015) PLOS Genetics\",\n         `Trait guild` = \"Drug response\",\n         `Trait description` = \"Mean time, in hours, adult females survived during continuous exposure to medium supplemented with 1% caffeine. Higher values indicate greater resistance to caffeine\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nWe need to do some wrangling to fit an appropriate model for these data. The response is a learning score that is bounded between -100 to 100. It is the percentage of flies that approached a trained target compared with a control target. Negative values indicate that the flies preferred the control target; positive values indicate a preference for the trained target. This data generating process can be approximated using the beta distribution. However, we need to re-express the data so that it falls between 0 and 1.\nThe authors calculate the learning score using the formula \\(learning.score =\\frac{(Trained.odour - Control.odour)*100}{Trained.odour + control.odour}\\). A value of 0 represents an even split of flies between both odours. We can convert this to the proportion scale, where this even split now = 0.5.\nWe can transform our data using the following formula:\n\\(normalised.learning.score = \\frac{learning.score - min(learning.score)}{max(learing.score) - min(learning.score)}\\)\n\n\nShow the code\n## Punishment learning\n\nAppel_2016_memory_punishment &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Appel_2016_memory_learning.csv\") %&gt;% \n  filter(Test == \"Punishment\",\n         memory_score != \"-\") %&gt;% \n  mutate(line = as.factor(line),\n         Group_ID = as.factor(Group_ID),\n         Sex = as.factor(Sex),\n         memory_score = as.numeric(memory_score),\n         # ok here's our normalising step. Note that a value of -100 now = 0\n         # this means that lower values = greater learning i.e. a value of 0.1 means 90% of flies avoided the punishment associated odour\n         norm_mem_score = (memory_score - min(memory_score)) / (max(memory_score) - min(memory_score))\n                           )\n\n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\npunishment_memory_model &lt;- brm(norm_mem_score ~ 1 + Sex + (Sex|line),\n                       data = Appel_2016_memory_punishment, family = zero_one_inflated_beta(),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/punishment.memory.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n\nnew_data &lt;-\n  expand_grid(line = Appel_2016_memory_punishment$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_punishment_memory &lt;- fitted(punishment_memory_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\npunishment_memory_f_line_means &lt;- tibble(new_data, fitted_punishment_memory) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"punishment.memory.learning.f\",\n         Sex = \"Female\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean aversion towards an odour flies were trained to associate with the onset of an electric shock. Higher values indicate that flies showed a greater aversion toward the odour, suggesting that they associated the odor with 'punishment'. Higher values also indicate a higher learning score\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\npunishment_memory_m_line_means &lt;- tibble(new_data, fitted_punishment_memory) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"punishment.memory.learning.m\",\n         Sex = \"Male\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean aversion towards an odour flies were trained to associate with the onset of an electric shock. Higher values indicate that flies showed a greater aversion toward the odour, suggesting that they associated the odor with 'punishment'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n## Relief learning\n\nAppel_2016_memory_relief &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Appel_2016_memory_learning.csv\") %&gt;% \n  filter(Test == \"Relief\",\n         memory_score != \"-\") %&gt;% \n   mutate(line = as.factor(line),\n         Group_ID = as.factor(Group_ID),\n         Sex = as.factor(Sex),\n         memory_score = as.numeric(memory_score),\n          # ok here's our normalising step. Note that a value of -100 now = 0\n         # this means that lower values = greater learning i.e. a value of 0.1 means 90% of flies avoided the punishment associated odour\n         norm_mem_score = (memory_score - min(memory_score)) / (max(memory_score) - min(memory_score)))\n         \n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\nrelief_memory_model &lt;- brm(norm_mem_score ~ 1 + Sex + (Sex|line),\n                           data = Appel_2016_memory_relief, family = zero_one_inflated_beta(),\n                           iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                           seed = 2, file = \"fits/raw_data_fits/relief.memory.model\",\n                           control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(relief_memory_model)\n\nnew_data &lt;-\n  expand_grid(line = Appel_2016_memory_relief$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_relief_memory &lt;- fitted(relief_memory_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\nrelief_memory_f_line_means &lt;- tibble(new_data, fitted_relief_memory) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"relief.memory.learning.f\",\n         Sex = \"Female\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean preference for an odor flies were trained to associate with the end of an electric shock. Higher values indicate that flies showed a stronger preference towards the odor, suggesting that they associated the odor with 'relief'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nrelief_memory_m_line_means &lt;- tibble(new_data, fitted_relief_memory) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"relief.memory.learning.m\",\n         Sex = \"Male\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean preference for an odor flies were trained to associate with the end of an electric shock. Higher values indicate that flies showed a stronger preference towards the odor, suggesting that they associated the odor with 'relief'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nAppel_traits &lt;- rbind(punishment_memory_f_line_means,\n                      punishment_memory_m_line_means,\n                      relief_memory_f_line_means,\n                      relief_memory_m_line_means)\n\n\n\n\n\n\n\nShow the code\nMunoz_2016_wing_size &lt;- read_csv(\"data/data_collation/input/Raw_data_files/munoz_munoz_2016.csv\") %&gt;% \n  mutate(line = as.factor(Strain),\n         Repl = (as.factor(Repl)),\n         CS = as.double(CS),\n         # standardise\n         st_CS = my_scale(CS))\n\nwing_size_model &lt;- brm(st_CS ~ 1 + Sex + (Sex|line),\n                       data = Munoz_2016_wing_size, family = gaussian,\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/wing.size.model\",\n                       control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nnew_data &lt;-\n  expand_grid(line = Munoz_2016_wing_size$line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_size &lt;- fitted(wing_size_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS),\n         Q2.5 = Q2.5*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS),\n         Q97.5 = Q97.5*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS))\n\n# females\n\nwing_size_f_line_means &lt;- tibble(new_data, fitted_wing_size) %&gt;%\n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\")) %&gt;% \n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"wing.size.f\",\n         Sex = \"Female\",\n         Reference = \"MuÃ±oz-MuÃ±oz et al (2016) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean centroid size - the square root of the sum of squared distances of a set of wing landmarks to the centroid of this landmark configuration. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nwing_size_m_line_means &lt;- tibble(new_data, fitted_wing_size) %&gt;%\n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\")) %&gt;% \n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"wing.size.m\",\n         Sex = \"Male\",\n         Reference = \"MuÃ±oz-MuÃ±oz et al (2016) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean centroid size - the square root of the sum of squared distances of a set of wing landmarks to the centroid of this landmark configuration. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nMunoz_traits &lt;- rbind(wing_size_f_line_means,\n                      wing_size_m_line_means)\n\n\n\n\n\nWe have line mean data for larvae, but raw data for adults. Therefore, we only need to model the adult data here.\n\n\nShow the code\nFreda_2017_cold_hardiness &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2017_ThermalHardiness.csv\") %&gt;% \n  mutate(line = as.factor(line),\n         Sex = as.factor(Sex))\n\n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\ncold_hardiness_model &lt;- brm(Proportion_alive ~ 1 + Sex + (Sex|line),\n                           data = Freda_2017_cold_hardiness, family = zero_one_inflated_beta(),\n                           iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                           seed = 2, file = \"fits/raw_data_fits/cold_hardiness.model\",\n                           control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(cold_hardiness_model)\n\nnew_data &lt;-\n  expand_grid(line = Freda_2017_cold_hardiness$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_cold_hardiness &lt;- fitted(cold_hardiness_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\ncold_hardiness_f_line_means &lt;- tibble(new_data, fitted_cold_hardiness) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"cold.hardiness.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2017) Integrative and Comparative Biology\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of surviving adults 24 hours post exposure to an hour of cold shock (-5Â°C). Higher values indicate flies that are more resistant to cold shock.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\ncold_hardiness_m_line_means &lt;- tibble(new_data, fitted_cold_hardiness) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"cold.hardiness.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2017) Integrative and Comparative Biology\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of surviving adults 24 hours post exposure to an hour of cold shock (-5Â°C). Higher values indicate flies that are more resistant to cold shock.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nFreda_2017_traits &lt;- rbind(cold_hardiness_f_line_means,\n                      cold_hardiness_m_line_means)\n\n\n\n\n\n\n\nShow the code\nNajarro_2017_boric_acid &lt;- read_csv(\"data/data_collation/input/Raw_data_files/najarro_2017.csv\") %&gt;% \n  rename(lifespan = `life-span (hr) on 1.5% boric acid`) %&gt;% \n  mutate(line = as.factor(line),\n         st_lifespan = my_scale(lifespan))\n\nboric_acid_model &lt;- brm(st_lifespan ~ 1 + (1|line),\n                        data = Najarro_2017_boric_acid, family = \"Gaussian\",\n                        prior = c(prior(normal(0, 0.5), class = Intercept),\n                                  prior(exponential(1), class = sd)),\n                        iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                        seed = 2, file = \"fits/raw_data_fits/boric.acid.model\")\n\n\n\n# get predictions from the model for each line\n\nnew_data &lt;-\n  tibble(line = Najarro_2017_boric_acid$line) %&gt;% \n  distinct(line)\n\nfitted_boric_acid &lt;- fitted(boric_acid_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan),\n         Q2.5 = Q2.5*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan),\n         Q97.5 = Q97.5*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan))\n\nboric_acid_line_means &lt;- tibble(new_data, fitted_boric_acid) %&gt;% \n  mutate(line = str_remove(line, \"RAL\"),\n         Trait = \"boric.acid.resistance.f\",\n         Sex = \"Female\",\n         Reference = \"Najarro, Hackett and Macdonald (2017) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean lifespan, measured in hours, for mated females exposed to media supplemented with 1.5% boric acid (BH3O3, BP168). Boric acid is a common household pesticide. Higher values indicate a greater resistance to boric acid.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nTo model copulation latency Dean et al log transform the data and fit a linear model with a gaussian distribution. This model struggles to converge using brms, so we treat the data as time to event with right censoring for the flies that failed to mate within a 2 hour window (coded as 120 in the dataset). To model this data we fit a survival model, specifying a weibull distribution.\nTo model insemination capacity Dean et al specify a quasipoisson distribution family because they treat the data as underdispersed counts. There is no family like this in brms. However, we can treat the data as binomial, with each female treated as a YES/NO for mating success. The posterior predictive check suggests this is a good fit to the data. Our predictions are also a good match with those of Dean et al.\n\n\nShow the code\nDean_2018_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dean_2018.csv\") %&gt;% \n   mutate(line = as.factor(Line),\n          Rep = as.factor(Rep),\n          Block = as.factor(Block),\n          censor = if_else(LatCop == 120, 1, 0))\n\ncopulation_latency_model &lt;- brm(LatCop | cens(censor) ~ 1 + Block + (1|line),\n                       data = Dean_2018_data, family = weibull(),\n                       prior = c(prior(normal(0, 1), class = Intercept),\n                                 prior(normal(0, 1), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/copulation_latency.model\",\n                       control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(copulation_latency_model)\n\nnew_data &lt;-\n  tibble(line = Dean_2018_data$line,\n         Block = 1) %&gt;% \n  distinct(line, Block)\n\n\nfitted_cop_lat &lt;- fitted(copulation_latency_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncop_lat_line_means &lt;- tibble(new_data, fitted_cop_lat) %&gt;%\n  mutate(Trait = \"copulation.latency.m\",\n         Sex = \"Male\",\n         Reference = \"Dean et al (2020) Evolution\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean time (mins) from a male flies introduction to a female until the onset of mating. Lower values indicate shorter copulation latencies and potentially more attractive males\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Dean et al fit a quasipoisson model because they treat the data as underdispersed counts. There is no family like this in brms. However, I think we can treat the data as binomial with each female treated as a YES/NO for mating success. The posterior predictive check suggests this is a good fit to the data.\n\nDean_2018_data &lt;-\n  Dean_2018_data %&gt;% \n  mutate(Cohabiting_females = 10)\n\ninsemination_capacity_model &lt;- brm(promiscuity | trials(Cohabiting_females) ~ 1 + Block + (1|line),\n                                   data = Dean_2018_data, family = binomial,\n                                   prior = c(prior(normal(0, 0.5), class = Intercept),\n                                             prior(normal(0, 0.5), class = b),\n                                             prior(exponential(1), class = sd)),\n                                   iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                                   seed = 2, file = \"fits/raw_data_fits/insemination_capacity.model\",\n                                   control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n\n\n#pp_check(insemination_capacity_model)\n\nnew_data &lt;-\n  tibble(line = Dean_2018_data$line,\n         Cohabiting_females = 1,\n         Block =1) %&gt;% \n  distinct(line, Cohabiting_females, Block)\n\n\nfitted_insem_capac &lt;- fitted(insemination_capacity_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ninsem_capac_line_means &lt;- tibble(new_data, fitted_insem_capac) %&gt;%\n  mutate(Trait = \"insemination.capacity.m\",\n         Sex = \"Male\",\n         Reference = \"Dean et al (2020) Evolution\",\n         `Trait guild` = \"Life history\",\n         `Trait description` = \"Mean proportion of 10 females that a single male successfully inseminated in 48 hours. Insemination was verified by identification of viable pupal progeny. Higher values indicate males with a greater insemination capacity.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\nDean_traits &lt;- rbind(cop_lat_line_means,\n                     insem_capac_line_means)\n\n\n\n\n\nWe fit a slightly different parathion model to that presented in the manuscript. This is because some lines are resistant to parathion, leading to heavy sensoring. This results in two groups of lines: those that are susceptible and those that are resistant. The resistant lines have estimated mean survival times of 400+ days, which is not realistic for D. melanogaster. Therefore, I instead model resistance to parathion using a binomial response, which describes whether the line had surviving flies 48 hours after exposure to parathion.\n\n\nShow the code\n# Deltamethrin\n\nDuneau_2018_deltamethrin_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Duneau_2018/Duneau_2018_deltamethrin.csv\") %&gt;% \n   mutate(line = str_remove(DGRP_lines, \"line_\"),\n          Experiment = as.factor(Experiment),\n          line = as.factor(line)) %&gt;% \n  filter(Sample.size != \"NA\")\n\ndeltamethrin_model &lt;-\n  brm(Delta_Alive.at.48h | trials(Sample.size) ~ 1  + Experiment + (1|line),\n      data = Duneau_2018_deltamethrin_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = binomial(),\n      iter = 10000, warmup = 4000, chains = 4, cores = 4,\n      seed = 2, file = \"fits/raw_data_fits/deltamethrin.model\",\n      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n#pp_check(deltamethrin_model)\n\nnew_data_Duneau &lt;-\n  tibble(line = Duneau_2018_deltamethrin_data$line,\n         Experiment = \"Exp 1\",\n         Sample.size = 1) %&gt;% \n  distinct(line, Experiment, Sample.size)\n\n\nfitted_deltamethrin &lt;- fitted(deltamethrin_model,\n       newdata = new_data_Duneau,\n       allow_new_levels = TRUE) %&gt;% \n  as_tibble()\n\ndeltamethrin_line_means &lt;- tibble(new_data_Duneau, fitted_deltamethrin) %&gt;%\n  mutate(Trait = \"deltamethrin.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Duneau et al (2018) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean survival 48 hours after exposure to deltamethrin, a pyrethroid pesticide. Higher values indicate greater resistance to deltamethrin.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Parathion\n\n# set up data for right censoring in brms - it is the opposite to what the survival frequentist package uses. We don't use this but it is useful to know if we do choose to fit a time to event model\n\nDuneau_2018_parathion_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Duneau_2018/Duneau_2018_parathion.csv\") %&gt;% \n   mutate(line = str_remove(DGRP_lines, \"line_\"),\n          Experiment = as.factor(Experiment)) %&gt;% \n  mutate(line = as.factor(line),\n         Alive.at.48hr = if_else(Censor == 1, 0, 1),\n         Censor = if_else(Censor == 1, \"none\", \"right\")) \n\n# fit the new binomial model\n\nparathion_binomial_model &lt;-\n  brm(Alive.at.48hr ~ 1 + Experiment + (1|line),\n      data = Duneau_2018_parathion_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/parathion_binomial.model\")\n\n#pp_check(parathion_binomial_model) \n\nnew_data &lt;-\n  tibble(line = Duneau_2018_parathion_data$line,\n         Experiment = \"Experiment_1\") %&gt;% \n  distinct(line, Experiment)\n\n\nfitted_parathion_binomial &lt;- fitted(parathion_binomial_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nparathion_binomial_line_means &lt;- tibble(new_data, fitted_parathion_binomial) %&gt;%\n  mutate(Trait = \"parathion.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Duneau et al (2018) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean survival 48 hours after exposure to parathion, an organophosphate pesticide. Higher values indicate greater resistance to parathion.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nDuneau_traits &lt;- rbind(deltamethrin_line_means,\n                       parathion_binomial_line_means)\n\n\n\n\n\n\n\nShow the code\nPalmer_2018_KV_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Palmer_2018_kallithea.csv\") %&gt;% \n  group_by(Injection.date) %&gt;%\n  mutate(injection_date = as_factor(cur_group_id())) %&gt;% \n  ungroup() %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         value = as.numeric(value))\n  \n\nPalmer_2018_LT50 &lt;-\n  Palmer_2018_KV_data %&gt;% \n  filter(trait.column == \"Mortality\") %&gt;% \n  mutate(# standardise\n         st_value = my_scale(value))\n\n# LT50 model\n\nkv_LT50_model &lt;- brm(st_value ~ 1 + Sex + (Sex|line) + (1|injection_date),\n                       data = Palmer_2018_LT50, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 8000, warmup = 4000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/kv.LT50.model\",\n                       control = list(adapt_delta = 0.97, max_treedepth = 12))\n\n #pp_check(kv_LT50_model)\n\nnew_data &lt;-\n  expand_grid(line = Palmer_2018_LT50$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_kv_LT50 &lt;- fitted(kv_LT50_model,\n       newdata = new_data,\n       re_formula = value ~ (Sex|line),\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value),\n         Q2.5 = Q2.5*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value),\n         Q97.5 = Q97.5*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value))\n\n# females\n\nkv_LT50_f_line_means &lt;- tibble(new_data, fitted_kv_LT50) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"kallithea.resistance.LT50.f\",\n         Sex = \"Female\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Median number of days adult flies survived post infection with Kallithea virus (50 nL of 105 ID50 originally injected). Measured as LT50 - the point at which 50% of 10 flies died. Higher values indicate greater resistance to Kallithea virus.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nkv_LT50_m_line_means &lt;- tibble(new_data, fitted_kv_LT50) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"kallithea.resistance.LT50.m\",\n         Sex = \"Male\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Median number of days adult flies survived post infection with Kallithea virus (50 nL of 105 ID50 originally injected). Measured as LT50 - the point at which 50% of 10 flies died. Higher values indicate greater resistance to Kallithea virus.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# titre model\n\nPalmer_2018_KV_titre_data &lt;-\n  Palmer_2018_KV_data %&gt;% \n  filter(trait.column == \"titre\") %&gt;% \n   mutate(# standardise\n         st_value = my_scale(value))\n\nkv_titre_model &lt;- brm(st_value ~ 1 + (1|line) + (1|injection_date),\n                       data = Palmer_2018_KV_titre_data, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/kv.titre.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\nnew_data &lt;-\n  expand_grid(line = Palmer_2018_KV_titre_data$line,\n              Sex = \"Female\") %&gt;% \n  distinct(line, Sex)\n\nfitted_kv_titre &lt;- fitted(kv_titre_model,\n       newdata = new_data,\n       re_formula = value ~ (1|line),\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value),\n         Q2.5 = Q2.5*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value),\n         Q97.5 = Q97.5*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value))\n\n# females\n\nkv_titre_f_line_means &lt;- tibble(new_data, fitted_kv_titre) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"kallithea.viral.load.f\",\n         Sex = \"Female\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Mean viral titre of kallithea virus found in groups of 10 adult females, 8 days after injection of 50 nL of 105 ID50 KV.  This is a measure of viral load, with higher values indicating greater viral load.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nPalmer_traits &lt;- rbind(kv_LT50_f_line_means,\n                       kv_LT50_m_line_means,\n                       kv_titre_f_line_means)\n\n\n\n\n\nCumulative cold tolerance data was supplied by the authors in line mean form, so we do not model it here.\n\n\nShow the code\nTeets_2018_cold_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Teets_Hahn_2018_data.csv\") %&gt;% \n  mutate(line = as.factor(`Line (DGRP)`),\n         Temp = as.factor(Temp))\n\ncold_survival_model &lt;- brm(Live | trials(Total) ~ 1 + Temp + (Temp|line),\n                       data = Teets_2018_cold_data, family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/cold.survival.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\n#pp_check(cold_survival_model)\n\nnew_data &lt;-\n  expand_grid(line = Teets_2018_cold_data$line,\n              Temp = Teets_2018_cold_data$Temp,\n              Total = 1) %&gt;% \n  distinct(line, Temp, Total)\n\nfitted_cold_survival &lt;- fitted(cold_survival_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_survival_line_means_data &lt;- tibble(new_data, fitted_cold_survival) %&gt;% \n  mutate(Sex = \"Female\")\n\n# build a function to create tibbles holding line and temp specific line means\n\nTeets_line_means &lt;- function(estimates, value, Trait, description){\n  estimates %&gt;%\n  filter(Temp == value) %&gt;% \n  mutate(Trait = Trait,\n         Reference = \"Teets and Hahn (2018) Journal of Evolutionary Biology\",\n         `Trait guild` =\"Temperature related\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nneg1_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-1\", \"cold.tolerance.-1.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -1 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg2_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-2\", \"cold.tolerance.-2.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -2 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg3_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-3\", \"cold.tolerance.-3.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -3 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg4_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-4\", \"cold.tolerance.-4.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -4 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg5_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-5\", \"cold.tolerance.-5.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -5 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg6_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-6\", \"cold.tolerance.-6.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -6 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg7_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-7\", \"cold.tolerance.-7.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -7 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nTeets_traits &lt;- rbind(neg1_cold_tolerance_line_means,\n                      neg2_cold_tolerance_line_means,\n                      neg3_cold_tolerance_line_means,\n                      neg4_cold_tolerance_line_means,\n                      neg5_cold_tolerance_line_means,\n                      neg6_cold_tolerance_line_means,\n                      neg7_cold_tolerance_line_means)\n\n\n\n\n\n\n\nShow the code\nEverman_2019_starvation_resistance &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Everman_2019_starvation_res.csv\") %&gt;% \n  mutate(line = as.factor(line),\n         Sex = as.factor(Sex),\n         Lifespan_hrs = as.numeric(Lifespan_hrs),\n         # standardise\n         st_Lifespan_hrs = my_scale(Lifespan_hrs))\n\n\nstarvation_resistance_model &lt;- brm(st_Lifespan_hrs ~ 1 + Sex + (Sex|line),\n                       data = Everman_2019_starvation_resistance, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/starvation.res.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(starvation_resistance_model)\n\n\nnew_data &lt;-\n  expand_grid(line = Everman_2019_starvation_resistance$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_starvation_resistance &lt;- fitted(starvation_resistance_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs),\n         Q2.5 = Q2.5*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs),\n         Q97.5 = Q97.5*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs))\n\n# females\n\nstarvation_resistance_f_line_means &lt;- tibble(new_data, fitted_starvation_resistance) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"starvation.resistance.2019.f\",\n         Sex = \"Female\",\n         Reference = \"Everman et al (2019) Genetics\",\n         `Trait guild` = \"Stress response\",\n         `Trait description` = \"Mean hours survived on inedible food medium, used as a measure of starvation resistance. Higher values indicate flies that exhibited greater starvation resistance.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nstarvation_resistance_m_line_means &lt;- tibble(new_data, fitted_starvation_resistance) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"starvation.resistance.2019.m\",\n         Sex = \"Male\",\n         Reference = \"Everman et al (2019) Genetics\",\n         `Trait guild` = \"Stress response\",\n         `Trait description` = \"Mean hours survived on inedible food medium, used as a measure of starvation resistance. Higher values indicate flies that exhibited greater starvation resistance.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nEverman_traits &lt;- rbind(starvation_resistance_f_line_means,\n                        starvation_resistance_m_line_means)\n\n\n\n\n\n\n\nShow the code\nFreda_2019a &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Cold18.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\nFreda_2019b &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Cold25.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline)) %&gt;% \n  filter(n &gt; 0)\n\nFreda_2019c &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Heat18.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\nFreda_2019d &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Heat25.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\n# Cold hardiness at 18C for larvae model\n\ncold_hardiness_18_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_larvae_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_ch_18_l &lt;- fitted(cold_hardiness_18_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# larvae\n\ncold_hardiness_18_l_line_means &lt;- tibble(new_data, fitted_ch_18_l) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to -6.5Â°C for an hour. These larvae were otherwise reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Cold hardiness at 18C for females model\n\ncold_hardiness_18_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_f_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_ch_18_f &lt;- fitted(cold_hardiness_18_f_model,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output\n  as_tibble()\n\n# female\n\ncold_hardiness_18_f_line_means &lt;- tibble(new_data, fitted_ch_18_f) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Cold hardiness at 18C for males model\n\ncold_hardiness_18_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_m_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_ch_18_m &lt;- fitted(cold_hardiness_18_m_model,\n       newdata = new_data,\n              allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble()\n\ncold_hardiness_18_m_line_means &lt;- tibble(new_data, fitted_ch_18_m) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n#################\n\n# Cold hardiness at 25C for larvae model\n\ncold_hardiness_25_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_larvae_model)\n\nFreda_2019b_larvae_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_ch_25_l &lt;- fitted(cold_hardiness_25_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# larvae\n\ncold_hardiness_25_l_line_means &lt;- tibble(new_data, fitted_ch_25_l) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to -6.5Â°C for an hour. These larvae were otherwise reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Cold hardiness at 25C for females model\n\ncold_hardiness_25_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_f_model)\n\nFreda_2019b_f_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_ch_25_f &lt;- fitted(cold_hardiness_25_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_hardiness_25_f_line_means &lt;- tibble(new_data, fitted_ch_25_f) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Cold hardiness at 25C for males model\n\ncold_hardiness_25_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_m_model)\n\nFreda_2019b_m_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_ch_25_m &lt;- fitted(cold_hardiness_25_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_hardiness_25_m_line_means &lt;- tibble(new_data, fitted_ch_25_m) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n##############\n\n# Heat hardiness at 18C for larvae model\n\nheat_hardiness_18_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_larvae_model)\n\nFreda_2019c_larvae_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_hh_18_l &lt;- fitted(heat_hardiness_18_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_l_line_means &lt;- tibble(new_data, fitted_hh_18_l) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to 38Â°C for an hour. These larvae were otherwise reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Heat hardiness at 18C for females model\n\nheat_hardiness_18_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_f_model)\n\nFreda_2019c_f_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_hh_18_f &lt;- fitted(heat_hardiness_18_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_f_line_means &lt;- tibble(new_data, fitted_hh_18_f) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Heat hardiness at 18C for males model\n\nheat_hardiness_18_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_m_model)\n\nFreda_2019c_m_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_hh_18_m &lt;- fitted(heat_hardiness_18_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_m_line_means &lt;- tibble(new_data, fitted_hh_18_m) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n#################\n\n# Heat hardiness at 25C for larvae model\n\nheat_hardiness_25_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_larvae_model)\n\nFreda_2019d_larvae_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_hh_25_l &lt;- fitted(heat_hardiness_25_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\nheat_hardiness_25_l_line_means &lt;- tibble(new_data, fitted_ch_25_l) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to 38Â°C for an hour. These larvae were otherwise reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Heat hardiness at 25C for females model\n\nheat_hardiness_25_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_f_model)\n\nFreda_2019d_f_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_hh_25_f &lt;- fitted(heat_hardiness_25_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_25_f_line_means &lt;- tibble(new_data, fitted_hh_25_f) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Heat hardiness at 25C for males model\n\nheat_hardiness_25_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_m_model)\n\nFreda_2019d_m_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_hh_25_m &lt;- fitted(heat_hardiness_25_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_25_m_line_means &lt;- tibble(new_data, fitted_hh_25_m) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nFreda_2019_traits &lt;- rbind(cold_hardiness_18_l_line_means,\n                           cold_hardiness_18_f_line_means,\n                           cold_hardiness_18_m_line_means,\n                           cold_hardiness_25_l_line_means,\n                           cold_hardiness_25_f_line_means,\n                           cold_hardiness_25_m_line_means,\n                           heat_hardiness_18_l_line_means,\n                           heat_hardiness_18_f_line_means,\n                           heat_hardiness_18_m_line_means,\n                           heat_hardiness_25_l_line_means,\n                           heat_hardiness_25_f_line_means,\n                           heat_hardiness_25_m_line_means)\n\n\n\n\n\nThis study measures wing shape and area. They then run a multivariate GWA. Here, we just model the mean centroid size for each line.\nFor whatever reason, this is a hard trait to model.\n\n\nShow the code\nPitchers_2019_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Pitchers_2019_wing_multivariate.csv\") %&gt;% \n  mutate(line = as.factor(Linenum),\n         Lab = as.factor(Lab),\n         Perp = as.factor(Perp),\n         block = as.factor(block),\n         Sex = as.factor(Sex))\n\nHoule_data &lt;- Pitchers_2019_data %&gt;% \n  filter(Lab == \"Hou\") %&gt;% \n  mutate(\n    # standardise\n    st_csmm = my_scale(csmm))\n\nDworkin_data &lt;- Pitchers_2019_data %&gt;% \n  filter(Lab == \"Dwo\") %&gt;% \n   mutate(\n    # standardise\n    st_csmm = my_scale(csmm))\n\n# Houle lab model\n\nwing_centroid_size_model_Hou &lt;- brm(st_csmm ~ Sex + (Sex|line),\n                      family = gaussian, data = Houle_data,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Houle_cs_wing.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n#pp_check(wing_centroid_size_model_Hou)\n\nnew_data &lt;-\n  tibble(line = Houle_data$line,\n         Sex = Houle_data$Sex) %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_houle &lt;- fitted(wing_centroid_size_model_Hou,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Houle_data$csmm) + mean(Houle_data$csmm),\n         Q2.5 = Q2.5*sd(Houle_data$csmm) + mean(Houle_data$csmm),\n         Q97.5 = Q97.5*sd(Houle_data$csmm) + mean(Houle_data$csmm))\n\ncentroid_size_Houle_f_line_means &lt;- tibble(new_data, fitted_wing_houle) %&gt;%\n  filter(Sex == \"F\") %&gt;% \n  mutate(Trait = \"wing.centroid.size.2019_Houle.f\",\n         Sex = \"Female\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Houle lab. Images were taken of live flies using the 'Wingmachine' system. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\ncentroid_size_Houle_m_line_means &lt;- \n  tibble(new_data, fitted_wing_houle) %&gt;%\n  filter(Sex == \"M\") %&gt;% \n  mutate(Trait = \"wing.centroid.size.2019_Houle.m\",\n         Sex = \"Male\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Houle lab. Images were taken of live flies using the 'Wingmachine' system. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Dworkin lab model\n\nwing_centroid_size_model_Dwo_f &lt;- brm(st_csmm ~ (1|line),\n                      family = student, data = Dworkin_data %&gt;% filter(Sex == \"F\"),\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                               #prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 20000, warmup = 4000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Dwo_cs_wing.f.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n#pp_check(wing_centroid_size_model_Dwo_f)\n\ndworkin_f &lt;- Dworkin_data %&gt;% filter(Sex == \"F\")\n\nnew_data &lt;-\n  tibble(line = dworkin_f$line,\n         Sex = \"F\") %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_dworkin_f &lt;- fitted(wing_centroid_size_model_Dwo_f,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q2.5 = Q2.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q97.5 = Q97.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm))\n\ncentroid_size_Dworkin_f_line_means &lt;- tibble(new_data, fitted_wing_dworkin_f) %&gt;%\n  mutate(Trait = \"wing.centroid.size.2019_Dworkin.f\",\n         Sex = \"Female\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Dworkin lab. Images were taken of dissected wings using an Olympus microscope. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nwing_centroid_size_model_Dwo_m &lt;- brm(st_csmm ~ (1|line),\n                      family = student, data = Dworkin_data %&gt;% filter(Sex == \"M\"),\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                               #prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 20000, warmup = 4000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Dwo_cs_wing.m.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\ndworkin_m &lt;- Dworkin_data %&gt;% filter(Sex == \"M\")\n\nnew_data &lt;-\n  tibble(line = dworkin_m$line,\n         Sex = \"M\") %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_dworkin_m &lt;- fitted(wing_centroid_size_model_Dwo_m,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q2.5 = Q2.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q97.5 = Q97.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm))\n\ncentroid_size_Dworkin_m_line_means &lt;- tibble(new_data, fitted_wing_dworkin_m) %&gt;%\n  mutate(Trait = \"wing.centroid.size.2019_Dworkin.m\",\n         Sex = \"Male\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean wing centroid size for flies measured in the Dworkin lab. Images were taken of dissected wings using an Olympus microscope. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nPitchers_traits &lt;- \n  rbind(centroid_size_Houle_f_line_means,\n        centroid_size_Houle_m_line_means,\n        centroid_size_Dworkin_f_line_means,\n        centroid_size_Dworkin_m_line_means)\n\n\n\n\n\n\n\nShow the code\nRohde_2019_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Rohde_2019.csv\") %&gt;% \n  mutate(line = as.factor(DGRP_id),\n         arena_id = as.factor(arena_id),\n         treatment = as.factor(treatment),\n         day_id = as.factor(day_id),\n         neighbour = as.factor(neighbour),\n         plate_id = as.factor(plate_id),\n         # standardise\n         st_distance_cm = my_scale(distance_cm))\n\n# distance travelled\n\nactivity_model &lt;- brm(st_distance_cm ~ treatment + (1|day_id) + (1|plate_id) + (treatment|line),\n                      family = gaussian, data = Rohde_2019_data,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/activity.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n#pp_check(activity_model)\n\nnew_data &lt;-\n  tibble(line = Rohde_2019_data$line,\n         treatment = Rohde_2019_data$treatment) %&gt;% \n  distinct(line, treatment)\n\n\nfitted_activity &lt;- fitted(activity_model,\n       newdata = new_data,\n       re_formula = distance_cm ~ (treatment|line)) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm),\n         Q2.5 = Q2.5*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm),\n         Q97.5 = Q97.5*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm))\n\nactivity_line_estimates &lt;- tibble(new_data, fitted_activity) %&gt;% \n  select(line, treatment, Estimate) %&gt;% \n  mutate(treatment = if_else(treatment == 1, \"MPH\", \"SUC\"))\n\n# first lets get line means for activity in the control sucrose treatment\n\nactivity_line_means &lt;- activity_line_estimates %&gt;%\n  filter(treatment == \"SUC\") %&gt;% \n  mutate(Trait = \"activity.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height), following 24 hrs of exposure to a 5% sucrose solution diet. Higher values indicate more active flies.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# now get line means for activity in the mph treatment\n\nactivity_mph_line_means &lt;- activity_line_estimates %&gt;%\n  filter(treatment == \"MPH\") %&gt;% \n  mutate(Trait = \"activity.MPH.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height), following 24 hrs of exposure to a 5% sucrose solution diet, supplemented with MPH (1.5 mg ml^-1). MPH, methylphenidate, is a drug used to treat attention-deficit/hyperactivity disorder (ADHD) in humans. Higher values indicate more active flies.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# now lets get means for the effect of mph on movement by getting the difference between treatments\n\nSUC_activity &lt;- \n  activity_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(SUC_estimate = trait_value)\n\nmph_activity &lt;- \n  activity_mph_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(mph_estimate = trait_value)\n\nactivity_estimates_diff &lt;-\n  left_join(SUC_activity, mph_activity) %&gt;% \n  mutate(Estimate = mph_estimate - SUC_estimate)\n\nmph_effect_line_means &lt;- activity_estimates_diff %&gt;%\n  mutate(Trait = \"MPH.effect.on.activity.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Drug response\",\n         `Trait description` = \"Mean difference in distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height) between flies fed a control 5% sucrose solution and a 5% sucrose solution supplemented with 1.5 mg ml^-1 methylphenidate (MPH). MPH is a drug used to treat the symptoms of attention-deficit/hyperactivity disorder (ADHD) in humans. Positive values indicate greater activity when flies were supplemented with MPH.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nRohde_traits &lt;- rbind(activity_line_means,\n                      activity_mph_line_means,\n                      mph_effect_line_means)\n\n\n\n\n\nThis is mainly data wrangling. We find the mean from two data points for each line simply via the mean() function.\n\n\nShow the code\nEverett_2020_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Everett_microbiome_2020.csv\") \n\nmicrobiome_line_means &lt;- \n  Everett_2020_data %&gt;% \n  pivot_longer(!`Microbial Species`, names_to = \"line\", values_to = \"trait_value\") %&gt;% \n  mutate(Sex = if_else(str_detect(line, \"F\"), \"Female\", \"Male\"),\n         line = str_remove(line, \"_F1\"),\n         line = str_remove(line, \"_F2\"),\n         line = str_remove(line, \"_M1\"),\n         line = str_remove(line, \"_M2\")) %&gt;% \n  group_by(`Microbial Species`, line, Sex) %&gt;% \n  summarise(trait_value = mean(trait_value)) %&gt;% \n  mutate( Reference = \"Everett et al (2020) Genome Research\",\n          `Trait guild` = \"Microbiome\",\n          `Trait description` = \"Mean reads per million (originally Log2 normalised) values for reads from each DGRP RNA-seq sample uniquely aligning to each microbial species. Higher values indicate a greater load of the microbial species.\",\n          Trait = str_replace(`Microbial Species`, \" \", \".\"),\n          Trait_1 = if_else(str_detect(Sex, \"Female\"), \".f\", \".m\")) %&gt;% \n  unite(Trait, Trait, Trait_1, sep = \"\", remove = TRUE) %&gt;%\n  ungroup() %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(Trait, line, Sex)\n\n\n\n\n\nNote that I havenât included Wolbachia status in the model.\n\n\nShow the code\nChapman_2020_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Chapman_2020.csv\") %&gt;% \n   mutate(line = as.factor(Line),\n          Treatment = as.factor(Treatment),\n          Date = as.factor(Date))\n\n\nE.faecalis_model &lt;- brm(Alive_at_day5 | trials(number_infected) ~ 1 + Infector + Date + (1|Vial) + (1|line),\n                       data = Chapman_2020_data, family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/E.faecalis.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(E.faecalis_model)\n\n# set the fixed effects in the new data for which we will derive predictions to the reference levels in the model i.e. Infector = jo and Date = `5/3/17`\n\nnew_data &lt;-\n  tibble(line = Chapman_2020_data$line,\n         number_infected = 1,\n         Infector = \"Jo\",\n         Date = '5/3/17') %&gt;% \n  distinct(line, number_infected, Infector, Date) \n\n\nfitted_E.faecalis &lt;- fitted(E.faecalis_model,\n       newdata = new_data,\n       re_formula = Alive_at_day5 | trials(number_infected) ~ (1|line)) %&gt;% \n  as_tibble()\n\nE.faecalis_line_means &lt;- tibble(new_data, fitted_E.faecalis) %&gt;%\n  mutate(Trait = \"E.faecalis.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Chapman et al (2020) Genes\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Mean proportion of adult flies that were alive 5 days after infection with the bacterial pathogen E. faecalis. Higher values indicate greater resistance to E. faecalis\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nLine means are provided for the non-metabolome traits in the supplementary material. Raw data are provided for the metabolome traits, which we model below.\nThere are 453 metabolites. We need a quick and easy way to model these and find line means. To do this, we fit relatively simple gaussian models with Sex as a fixed effect (where this is applicable) and line as a random effect, with a sex-specific intercept.\nFive traits show no genetic variation in one of the sexes; that is, each line has the same value. We do not model these, but still need to model the trait for the sex that shows genetic variation. We fit a very similar model, except without the sex fixed effect.\n\n\nShow the code\nZhou_data &lt;- \n  read_csv(\"data/data_collation/input/Raw_data_files/Zhou_2020.csv\") %&gt;% \n  select(-c(`SUB PATHWAY`, `METABOLITE  ID`, PLATFORM, `CHEMICAL ID`,\n            `RETENTION INDEX`, MASS, CAS, PUBCHEM, KEGG, `CLIENT IDENTIFIER`)) %&gt;% \n  pivot_longer(cols = 3:242, names_to = \"ID\", values_to = \"Trait_value\") %&gt;% \n  separate(ID, into = c(\"Line\", \"Sex\", \"Rep\"), sep = \"-\", remove = TRUE) %&gt;% \n  mutate(line = as.factor(Line), Sex = as.factor(Sex)) %&gt;% \n  select(-Line) %&gt;% \n  # standardise\n  group_by(METABOLITE, Sex) %&gt;% \n  mutate(st_trait_value = my_scale(Trait_value)) %&gt;% \n  ungroup() %&gt;%\n  # some traits have the same value for every line; these can't be standardised because the SD = 0. We remove these traits from the dataset\n  filter(st_trait_value != \"NaN\")\n  \n\n# this is our model outline, based on one random metabolite. We can then update this model with new data (for another metabolite) to model every trait, which is advantageous because it prevents brms needing to recompile every time. With the model already compiled we can simply update the data, which saves a lot of time.\n\ndata &lt;- Zhou_data %&gt;% filter(METABOLITE == \"xanthurenate\")\n\nRun_function &lt;- FALSE # Change this to TRUE to re-run the models\n\nif(Run_function){\n  model_outline &lt;- brm(data = data,\n                       st_trait_value ~ 1 + Sex + (Sex|line),\n                       family = gaussian,\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, \n                       cores = 4, seed = 1, control = list(adapt_delta = 0.95, \n                                                           max_treedepth = 12))\n}\n\n## Now make a function to run a model for each trait and get the posterior line means for each sex \n\nmetabolite_modeller &lt;- function(selected_trait){\n  \n  data &lt;- Zhou_data %&gt;% filter(METABOLITE == selected_trait)\n  \n  model &lt;- update(model_outline, newdata = data) # same model, but with new data each time\n  \nfitted_new_data &lt;-\n  tibble(line = data$line,\n         Sex = data$Sex,\n         Trait = data$METABOLITE,\n         `Trait guild` = \"Metabolome\",\n         `Trait description` = \"Metabolites identified by mass spectrometry with scaled measurement for each sample (100 flies, replicated three times). Data were scaled to account for run-day blocks. Higher values indicate greater quantities.\",\n         Reference = \"Zhou et al (2020) Genome Research\") %&gt;% \n  distinct(line, Trait, Sex, `Trait guild`, `Trait description`, Reference)\n\n\nfitted_metabolite &lt;- fitted(model,\n       newdata = fitted_new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(trait_value = Estimate*sd(data$Trait_value) + mean(data$Trait_value),\n         Q2.5 = Q2.5*sd(data$Trait_value) + mean(data$Trait_value),\n         Q97.5 = Q97.5*sd(data$Trait_value) + mean(data$Trait_value))\n\nmetabolite_line_estimates &lt;- tibble(fitted_new_data, fitted_metabolite) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"),\n         Trait = if_else(Sex == \"Female\", paste(Trait, \"f\", sep = \".\"), paste(Trait, \"m\", sep = \".\")))\n  \n}\n\n# create a list of all trait to iterate our function over\n\nBoth_sexes &lt;-\n  Zhou_data %&gt;% \n  distinct(METABOLITE, Sex) %&gt;%\n  group_by(METABOLITE) %&gt;% \n  summarise(n = n()) %&gt;% \n  filter(n &gt; 1)\n\ntrait_list_both_sexes &lt;- Both_sexes$METABOLITE\n\n## Now make a function to run a model for each trait and get the posterior line means for traits only measured in a single sex\n\nmetabolite_modeller_single_sex &lt;- function(selected_trait){\n  \n  data &lt;- Zhou_data %&gt;% filter(METABOLITE == selected_trait)\n  \n  model &lt;- update(model_outline, newdata = data,\n                  st_trait_value ~ 1 + (1|line),\n                  family = gaussian,\n                  prior = c(prior(normal(0, 0.5), class = Intercept),\n                            prior(exponential(1), class = sd))) # same model, but with new data each time\n  \n  fitted_new_data &lt;-\n    tibble(line = data$line,\n           Sex = data$Sex,\n           Trait = data$METABOLITE,\n           `Trait guild` = \"Metabolome\",\n           `Trait description` = \"Metabolites identified by mass spectrometry with scaled measurement for each sample (100 flies, replicated three times). Data were scaled to account for run-day blocks. Higher values indicate greater quantities.\",\n           Reference = \"Zhou et al (2020) Genome Research\") %&gt;% \n    distinct(line, Trait, Sex, `Trait guild`, `Trait description`, Reference)\n  \n  \n  fitted_metabolite &lt;- fitted(model,\n                              newdata = fitted_new_data) %&gt;% \n    as_tibble() %&gt;%\n    # now we need to convert back to response scale (note I don't convert Est.Error)\n    mutate(trait_value = Estimate*sd(data$Trait_value) + mean(data$Trait_value),\n           Q2.5 = Q2.5*sd(data$Trait_value) + mean(data$Trait_value),\n           Q97.5 = Q97.5*sd(data$Trait_value) + mean(data$Trait_value))\n  \n  metabolite_line_estimates &lt;- tibble(fitted_new_data, fitted_metabolite) %&gt;% \n    select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n    mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"),\n           Trait = if_else(Sex == \"Female\", paste(Trait, \"f\", sep = \".\"), paste(Trait, \"m\", sep = \".\")))\n  \n}\n\n# create trait list to run function over\n\nSingle_sex &lt;-\n  Zhou_data %&gt;% \n  distinct(METABOLITE, Sex) %&gt;%\n  group_by(METABOLITE) %&gt;% \n  summarise(n = n()) %&gt;% \n  filter(n == 1)\n\ntrait_list_single_sex &lt;- Single_sex$METABOLITE\n\n# Run the models\n\nif(Run_function){\n  \n  models_both_sexes &lt;- map_dfr(trait_list_both_sexes, metabolite_modeller) # map_dfr returns a data frame created by row-binding each output\n  \n  models_single_sex &lt;- map_dfr(trait_list_single_sex, metabolite_modeller_single_sex)\n  \n  Zhou_line_means &lt;-\n    rbind(models_both_sexes,\n          models_single_sex)\n  \n  Zhou_line_means %&gt;% \n    write_csv(\"data/data_collation/output/Zhou_line_means.csv\")\n} else {\n  Zhou_line_means &lt;- read_csv(\"data/data_collation/output/Zhou_line_means.csv\") %&gt;% \n    mutate(Trait = str_replace_all(Trait, \"[/]\", \"_\"),\n           Trait = str_remove(Trait, \"[*]\"))  # replace invalid names\n}\n\n\n\n\n\nThe authors treat temperature as a continuous variable. But they only have measures at 3 temperatures, so we choose to consider temperature as an ordered predictor, following Solomon Kurzâs translation of McElreath (2020) to the brms framework. This approach results in an improved model fit.\n\n\nShow the code\nZwoinska_male_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Zwoinska_2020/Zwoinska_males_2020.csv\") %&gt;% \n  rename(line = DGRP) %&gt;% \n  mutate(line = as.factor(line),\n         Batch = as.factor(Batch),\n         Temperature_new = recode(Temperature,\n                                  \"25\" = 1,\n                                  \"27\" = 2,\n                                  \"29\" = 3) %&gt;% \n           as.integer())\n\n\nfertility_male_model_ordered &lt;-\n  brm(Larvae ~ 1 + mo(Temperature_new) + (mo(Temperature_new)|line),\n      data = Zwoinska_male_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(dirichlet(2, 2), class = simo, coef = moTemperature_new1),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 4000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/fertility_male.model_ordered\")\n\n\nnew_data &lt;-\n  tibble(line = Zwoinska_male_data$line,\n         Temperature_new = Zwoinska_male_data$Temperature_new,\n         Batch = 1) %&gt;% \n  distinct(line, Temperature_new, Batch)\n\n\nfitted_male_fertility &lt;- fitted(fertility_male_model_ordered,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nfertility_m_line_estimates &lt;- tibble(new_data, fitted_male_fertility) %&gt;% \n  mutate(.keep = \"unused\", \n            Temperature = recode(Temperature_new,\n                                  \"1\" = 25,\n                                  \"2\" = 27,\n                                  \"3\" = 29)) \n\n# build a function to create the line means tibbles\n\nZwoinska_line_means &lt;- function(estimates, value, Trait, sex, description){\n  estimates %&gt;%\n  filter(Temperature == value) %&gt;% \n  mutate(Trait = Trait,\n         Sex = sex,\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Life history\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nfertility_25C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"25\", \"fertility.25C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 25C. Higher values indicates greater fertility.\")\n\nfertility_27C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"27\", \"fertility.27C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 27C. Higher values indicates greater fertility\")\n\nfertility_29C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"29\", \"fertility.29C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 29C. Higher values indicates greater fertility\")\n\n# we need a plasticity measure\n\n## The code below uses the slope estimated by the model for each line as the plasticity measure.\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). The line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\nfertility_m_temp_effect_line_means &lt;- as_draws_df(fertility_male_model_ordered) %&gt;% \n  select(starts_with(\"r_line\") & contains(\"moTemperature\")) %&gt;% \n  gather() %&gt;% \n  group_by(key) %&gt;%\n  # the trait in question is plasticity, which is measured by the line specific random slope between treatments - we can get this straight from our posterior samples, without adding anything else \n  summarise(mean = mean(value) %&gt;% round(digits = 2)) %&gt;% \n  mutate(line = str_remove(key, \"r_line\")) %&gt;% \n  mutate(line = str_remove(line, \",moTemperature_new\")) %&gt;% \n  mutate(line = gsub(\"\\\\[|\\\\]\", \"\", line),\n         Trait = \"fertility.thermal.susceptibility.m\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Male\",\n         `Trait description` = \"Mean slope of the change in male fertility (the proportion of males that produced viable larvae), between 25C, 27C and 29C rearing conditions. Lower slope values indicate a greater decrease in fertility with an increase in temperature. This is a measure of thermal susceptibility.\",\n         trait_value = mean\n  ) %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Slopes are hard to interpret, so we also provide this data in a different format. Below we calculate the change in fertility between 25C and 29C for each line. Greater values indicate a greater loss in fertility. Note this approach produces a very similar line ordering to the above approach\n\nnew_data &lt;-\n  new_data %&gt;% \n  mutate(ID = paste0(\"V\", 1:372))\n  \n\nfitted_male_fertility &lt;- fitted(fertility_male_model_ordered,\n       newdata = new_data, summary = F) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = everything(), names_to = \"ID\", values_to = \"Estimate\")\n\nfitted_male_fertility &lt;- right_join(new_data, fitted_male_fertility) %&gt;% \n  as_tibble %&gt;% \n  select(-ID)\n\n# Different numbers of lines have been phenotyped for fertility in the 25C and 29C conditions. The code below finds the lines that are measured in one temp but not the other and removes them. We then find the difference in fertility between 25 and 29C conditions\n\na &lt;- \n  fitted_male_fertility %&gt;% \n  filter(Temperature_new == 1, line != \"38\" & line != \"83\" & line != \"395\", line != \"707\" & line != \"727\") %&gt;%\n  rename(Temp25 = Estimate)\n\nc &lt;- \n  fitted_male_fertility %&gt;%\n  filter(Temperature_new == 3, line != \"911\") %&gt;%\n  rename(Temp29 = Estimate) %&gt;%\n  select(-c(Temperature_new, Batch, line))\n\n#a_line &lt;- a %&gt;% distinct(line) \n#c_line &lt;- c %&gt;% distinct(line) # we remove the line column in the above code to make binding possible. This line of code will therefore not work, but it has already done its job.\n\n#anti_join(a_line, c_line) # this line finds the lines present in the a_line vector but not in the b_line vector\n#anti_join(c_line, a_line) # this line finds the lines present in the b_line vector but not in the a_line vector\n\n\nbackup_approach &lt;- cbind(a, c) %&gt;% \n  as_tibble() %&gt;% \n  mutate(fertility_diff = Temp25 - Temp29) %&gt;% \n  group_by(line) %&gt;% \n  summarise(trait_value = mean(fertility_diff)) %&gt;% \n  mutate(Trait = \"fertility.thermal.susceptibility.m\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Male\",\n         `Trait description` = \"Mean change in male fertility (the proportion of males that produced viable larvae), between 25C and 29C rearing conditions. Higher values indicate a greater decrease in fertility. This is a measure of thermal susceptibility or thermal plasticity in fertility.\") %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(-trait_value)\n\n\n# female fertility\n\nZwoinska_female_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Zwoinska_2020/Zwoinska_females_2020.csv\") %&gt;% \n  rename(line = DGRP) %&gt;% \n  mutate(line = as.factor(line),\n         Batch = as.factor(Batch),\n         Temperature_new = recode(Temperature,\n                                  \"25\" = 1,\n                                  \"27\" = 2,\n                                  \"29\" = 3) %&gt;% \n           as.integer())\n\n\n\nfertility_female_model_ordered &lt;-\n  brm(Larvae ~ 1 + mo(Temperature_new) + (mo(Temperature_new)|line),\n      data = Zwoinska_female_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(dirichlet(2, 2), class = simo, coef = moTemperature_new1),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 4000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/fertility_female.model_ordered\")\n\n\nnew_data &lt;-\n  tibble(line = Zwoinska_female_data$line,\n         Temperature_new = Zwoinska_female_data$Temperature_new,\n         Batch = 1) %&gt;% \n  distinct(line, Temperature_new, Batch)\n\n\nfitted_female_fertility &lt;- fitted(fertility_female_model_ordered,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nfertility_f_line_estimates &lt;- tibble(new_data, fitted_female_fertility) %&gt;% \n    mutate(.keep = \"unused\", \n            Temperature = recode(Temperature_new,\n                                  \"1\" = 25,\n                                  \"2\" = 27,\n                                  \"3\" = 29)) \n\nfertility_25C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"25\", \"fertility.25C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 25C. Higher values indicates greater fertility.\")\n\nfertility_27C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"27\", \"fertility.27C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 27C. Higher values indicates greater fertility\")\n\nfertility_29C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"29\", \"fertility.29C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 29C. Higher values indicates greater fertility\")\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). Once again, the line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\n# we need a plasticity measure\n\n## The code below uses the slope estimated by the model for each line as the plasticity measure.\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). The line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\nfertility_f_temp_effect_line_means &lt;- as_draws_df(fertility_female_model_ordered) %&gt;% \n  select(starts_with(\"r_line\") & contains(\"moTemperature\")) %&gt;% \n  gather() %&gt;% \n  group_by(key) %&gt;%\n  # the trait in question is plasticity, which is measured by the line specific random slope between treatments - we can get this straight from our posterior samples, without adding anything else \n  summarise(mean = mean(value) %&gt;% round(digits = 2)) %&gt;% \n  mutate(line = str_remove(key, \"r_line\")) %&gt;% \n  mutate(line = str_remove(line, \",moTemperature_new\")) %&gt;% \n  mutate(line = gsub(\"\\\\[|\\\\]\", \"\", line),\n         Trait = \"fertility.thermal.susceptibility.f\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Female\",\n         `Trait description` = \"Mean slope of the change in female fertility (the proportion of males that produced viable larvae), between 25C, 27C and 29C rearing conditions. Lower slope values indicate a greater decrease in fertility with an increase in temperature. This is a measure of thermal susceptibility.\",\n         trait_value = mean\n  ) %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Slopes are hard to interpret, so we also provide this data in a different format. Below we calculate the change in fertility between 25C and 29C for each line. Greater values indicate a greater loss in fertility. Note this approach produces a very similar line ordering to the bove approach\n\nnew_data &lt;-\n  new_data %&gt;% \n  mutate(ID = paste0(\"V\", 1:120))\n  \n\nfitted_female_fertility &lt;- fitted(fertility_female_model_ordered,\n       newdata = new_data, summary = F) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = everything(), names_to = \"ID\", values_to = \"Estimate\")\n\nfitted_female_fertility &lt;- right_join(new_data, fitted_female_fertility) %&gt;% \n  as_tibble %&gt;% \n  select(-ID)\n\n# phenotypes for all 40 lines are measured so no fancy steps for binding are needed\n\na_female &lt;- \n  fitted_female_fertility %&gt;% \n  filter(Temperature_new == 1) %&gt;%\n  rename(Temp25 = Estimate)\n\nc_female &lt;- \n  fitted_female_fertility %&gt;%\n  filter(Temperature_new == 3) %&gt;%\n  rename(Temp29 = Estimate) %&gt;%\n  select(-c(Temperature_new, Batch, line))\n\n\nbackup_approach &lt;- cbind(a_female, c_female) %&gt;% \n  as_tibble() %&gt;% \n  mutate(fertility_diff = Temp25 - Temp29) %&gt;% \n  group_by(line) %&gt;% \n  summarise(trait_value = mean(fertility_diff)) %&gt;% \n  mutate(Trait = \"fertility.thermal.susceptibility.f\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Female\",\n         `Trait description` = \"Mean change in female fertility (the proportion of males that produced viable larvae), between 25C and 29C rearing conditions. Higher values indicate a greater decrease in fertility. This is a measure of thermal susceptibility or thermal plasticity in fertility.\") %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(-trait_value)\n\n\n# combine all the data from this study into a simple dataframe\n\nZwoinska_traits &lt;- rbind(fertility_25C_m_line_means,\n                         fertility_27C_m_line_means,\n                         fertility_29C_m_line_means,\n                         fertility_m_temp_effect_line_means,\n                         fertility_25C_f_line_means,\n                         fertility_27C_f_line_means,\n                         fertility_29C_f_line_means,\n                         fertility_f_temp_effect_line_means)\n\n\n\n\n\n\n\nShow the code\nChowdhury_2021_aggressive_lunges &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Chowdhury_2021_aggression.csv\") %&gt;% \n  mutate(line = as.factor(line))\n\n\naggression_model &lt;- brm(agressive.lunges.per.20mins.m ~ 1 + (1|line),\n                       data = Chowdhury_2021_aggressive_lunges, family = zero_inflated_poisson(),\n                       prior = c(prior(normal(3, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/aggression.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(aggression_model)\n\n\nnew_data &lt;-\n  tibble(line = Chowdhury_2021_aggressive_lunges$line) %&gt;% \n  distinct(line)\n\nfitted_aggression &lt;- fitted(aggression_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n\n\naggression_m_line_means &lt;- tibble(new_data, fitted_aggression) %&gt;%\n  mutate(Trait = \"aggression.2021.m\",\n         Sex = \"Male\",\n         Reference = \"Chowdhury et al Nature Communications Biology\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean number of aggressive lunges made in 20 min window following removal of a divider, by pairs of DGRP males of same genotype. Trials were run after males were kept isolated for five days. Higher values indicate more aggressive males.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\n\n\nShow the code\nWatanabe_climbing_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Watanabe_Riddle_2021.csv\") %&gt;% \n  rename(line = Line) %&gt;% \n  mutate(line = str_remove(line, \"line_\"),\n         line = as.factor(line),\n         Vial = as.factor(Vial))\n\n# Females\n\nWatanabe_female_data &lt;-\n  Watanabe_climbing_data %&gt;% \n  filter(Sex == \"F\") %&gt;% \n  mutate(# standardise\n    st_Climbing = my_scale(Climbing))\n\nclimbing_female_model &lt;-\n  brm(st_Climbing ~ 1 +  Treatment + (1|Vial) + (Treatment|line),\n      data = Watanabe_female_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = gaussian,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/climbing_female.model\")\n\nnew_data &lt;-\n  tibble(line = Watanabe_female_data$line,\n         Treatment = Watanabe_female_data$Treatment,\n         Vial = 1) %&gt;% \n  distinct(line, Treatment, Vial)\n\n\nfitted_female_climbing &lt;- fitted(climbing_female_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing),\n         Q2.5 = Q2.5*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing),\n         Q97.5 = Q97.5*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing))\n\nclimbing_f_line_estimates &lt;- tibble(new_data, fitted_female_climbing)\n\n# build a function to create the line means tibbles\n\nWatanabe_line_means &lt;- function(estimates, value, Trait, sex, description){\n  estimates %&gt;%\n  filter(Treatment == value) %&gt;% \n  mutate(Trait = Trait,\n         Sex = sex,\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` =\"Activity\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nclimbing_f_line_means &lt;- Watanabe_line_means(climbing_f_line_estimates, \"C\", \"climbing.f\", \"Female\", \"Mean climbing index, following five days of standard conditions. Higher values indicate greater climbing ability.\")\n\nclimbing_post_exercise_f_line_means &lt;- Watanabe_line_means(climbing_f_line_estimates, \"T\", \"climbing.post.exercise.f\", \"Female\", \"Mean climbing index, following five days consecutive days of forced exercise (two hours a day). Higher values indicate greater climbing ability.\")\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). Once again, the line rankings produced here are very similar to the slopes estimates presented in Watanabe and Riddle (2021).\n\n# Now get the difference between treatments\n\ncontrol_climbing_f &lt;- \n  climbing_f_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(control_estimate = trait_value)\n\nexercise_climbing_f &lt;- \n  climbing_post_exercise_f_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(exercise_estimate = trait_value)\n\nclimbing_estimates_diff &lt;-\n  left_join(control_climbing_f, exercise_climbing_f) %&gt;% \n  mutate(Estimate = exercise_estimate - control_estimate)\n\nclimbing_f_exercise_effect_line_means &lt;- climbing_estimates_diff %&gt;%\n  mutate(Trait = \"climbing.exercise.effect.f\",\n         Sex = \"Female\",\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean change in the climbing ability of adults, between flies that were and were not exposed to exercise five days previously. Positive values indicate an increase in climbing ability with exercise.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nWatanabe_male_data &lt;-\n  Watanabe_climbing_data %&gt;% \n  filter(Sex == \"M\") %&gt;% \n  mutate(# standardise\n    st_Climbing = my_scale(Climbing))\n\nclimbing_male_model &lt;-\n  brm(st_Climbing ~ 1 +  Treatment + (1|Vial) + (Treatment|line),\n      data = Watanabe_male_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = gaussian,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.99, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/climbing_male.model\")\n\n#pp_check(climbing_male_model)\n\nnew_data &lt;-\n  tibble(line = Watanabe_male_data$line,\n         Treatment = Watanabe_male_data$Treatment,\n         Vial = 1) %&gt;% \n  distinct(line, Treatment, Vial)\n\n\nfitted_male_climbing &lt;- fitted(climbing_male_model,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing),\n         Q2.5 = Q2.5*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing),\n         Q97.5 = Q97.5*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing))\n\nclimbing_m_line_estimates &lt;- tibble(new_data, fitted_male_climbing)\n\nclimbing_m_line_means &lt;- Watanabe_line_means(climbing_m_line_estimates, \"C\", \"climbing.m\", \"Male\", \"Mean climbing index, following five days of standard conditions. Higher values indicate greater climbing ability.\")\n\nclimbing_post_exercise_m_line_means &lt;- Watanabe_line_means(climbing_m_line_estimates, \"T\", \"climbing.post.exercise.m\", \"Male\", \"Mean climbing index, following five days consecutive days of forced exercise (two hours a day). Higher values indicate greater climbing ability.\")\n\n# Now get the difference between treatments\n\ncontrol_climbing_m &lt;- \n  climbing_m_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(control_estimate = trait_value)\n\nexercise_climbing_m &lt;- \n  climbing_post_exercise_m_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(exercise_estimate = trait_value)\n\nclimbing_estimates_diff_m &lt;-\n  left_join(control_climbing_m, exercise_climbing_m) %&gt;% \n  mutate(Estimate = exercise_estimate - control_estimate)\n\nclimbing_m_exercise_effect_line_means &lt;- climbing_estimates_diff_m %&gt;%\n  mutate(Trait = \"climbing.exercise.effect.m\",\n         Sex = \"Male\",\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean change in the climbing ability of adults, between flies that were and were not exposed to exercise five days previously. Positive values indicate an increase in climbing ability with exercise.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\nWatanabe_traits &lt;- rbind(climbing_f_line_means,\n                         climbing_f_exercise_effect_line_means,\n                         climbing_post_exercise_f_line_means,\n                         climbing_m_line_means,\n                         climbing_m_exercise_effect_line_means,\n                         climbing_post_exercise_m_line_means)\n\n\n\n\n\n\n\n\nShow the code\nestimated_line_means &lt;-\n  rbind(Jumbo_traits,\n        Grubbs_traits,\n        Dobson_traits,\n        Gaertner_traits,\n        caffeine_resistance_line_means,\n        Appel_traits,\n        Munoz_traits,\n        Freda_2017_traits,\n        boric_acid_line_means,\n        Dean_traits,\n        Duneau_traits,\n        Palmer_traits,\n        Teets_traits,\n        Everman_traits,\n        Freda_2019_traits,\n        Pitchers_traits,\n        Rohde_traits,\n        microbiome_line_means,\n        E.faecalis_line_means,\n        Zhou_line_means,\n        Zwoinska_traits,\n        aggression_m_line_means,\n        Watanabe_traits)\n\nmeta_data &lt;- \n  left_join(by = \"Trait\",\n            estimated_line_means %&gt;% \n              select(Trait, Sex, `Trait guild`, `Trait description`, Reference) %&gt;% \n              distinct(),\n            read_csv(\"data/data_collation/input/Raw_data_files/Life_stage_screen.csv\")\n  ) %&gt;% \n  mutate(Life_stage = case_when(Life_stage == \"Juvenile\" ~ \"Juvenile\",\n                                is.na(Life_stage) ~ \"Adult\"))\n\ntrait_data &lt;- estimated_line_means %&gt;% \n  select(-Sex, -`Trait guild`, -`Trait description`, -Reference) \n\nwrite_csv(trait_data, \"data/data_collation/output/dgrp_phenos_calculated_from_raw_data.csv\")\nwrite_csv(meta_data, \"data/data_collation/output/dgrp_phenos_calculated_from_raw_data_meta_data.csv\")"
  },
  {
    "objectID": "Get_line_means_from_raw_data.html#estimating-line-means-from-raw-data",
    "href": "Get_line_means_from_raw_data.html#estimating-line-means-from-raw-data",
    "title": "Estimating line means from raw data",
    "section": "",
    "text": "Some studies/authors provided the raw data that was collected when measuring DGRP phenotypes (e.g.Â measurements of individual flies), although we need line mean data to calculate the response to selection. To get line means, we fitted Bayesian mixed effect models and used these to estimate mean trait values for each line, using the model formula that made the most sense to us given the studyâs experimental design (see annotations in the code below). Often, but not always, this conformed with the original analysis. Our analyses of each paperâs data are presented in a separate tab below.\nWhere the response follows a Gaussian distribution, we standardise the response to have a mean of 0 and a standard deviation of 1, in order to make prior specification more straightforward. In these cases, the estimated line means are converted back to the response scale.\nThe Bayesian models wonât run unless you have stan and the brms package installed. To install stan follow these instructions."
  },
  {
    "objectID": "Get_line_means_from_raw_data.html#analysis-of-raw-data",
    "href": "Get_line_means_from_raw_data.html#analysis-of-raw-data",
    "title": "Estimating line means from raw data",
    "section": "",
    "text": "Show the code\nJumbo_mito_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Jumbo_Lucioni_2012.csv\") %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Gender),\n         Rep = as.factor(Rep),\n         po_ratio = na_if(`po ratio`, \".\"),\n         po_ratio = as.numeric(po_ratio)) %&gt;% \n  rename(state_3 = `st 3 (pmol/s*mg protein)`,\n         state_4 = `st 4 (pmol/s*mg protein)`) %&gt;% \n  select(line, Sex, Rep, state_3, state_4, po_ratio) %&gt;% \n  filter(!is.na(line))\n\n# standardise \nJumbo_mito_data &lt;-\n  Jumbo_mito_data %&gt;% \n  mutate(st_state_3 = my_scale(state_3),\n         st_state_4 = my_scale(state_4),\n         st_po_ratio = my_scale(po_ratio)) \n\n\n\n# respiration state 3 model\n\nstate_3_model &lt;- brm(st_state_3 ~ 1 + Sex + (Sex|line),\n                      data = Jumbo_mito_data, family = gaussian,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/state_3.model\")\n\n#pp_check(state_3_model)\n\nnew_data &lt;-\n  expand_grid(line = Jumbo_mito_data$line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(line, Sex)\n\n     \nfitted_state_3 &lt;- fitted(state_3_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3),\n         Q2.5 = Q2.5*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3),\n         Q97.5 = Q97.5*sd(Jumbo_mito_data$state_3) + mean(Jumbo_mito_data$state_3))\n\nstate_3_estimates &lt;- tibble(new_data, fitted_state_3) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# build a function to create tibbles holding sex specific line means\n\nJumbo_line_means &lt;- function(estimates, y, Trait, description){\n  estimates %&gt;% \n  filter(Sex == y) %&gt;% \n  mutate(Trait = Trait,\n         Reference = \"Jumbo-Lucioni et al (2012) BMC Genomics\",\n         `Trait guild` = \"Physiological\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\n# create the state 3 tibbles\n\n# females\n\nstate_3_f_line_means &lt;- Jumbo_line_means(state_3_estimates, \"Female\", \"mitochondrial.state.3.respiration.f\", \"Mean mitochondrial state 3 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 3 respiration occurs when protons re-enter the mitochondrial matrix in the presence of ADP, which results in the production of ATP. Higher values indicate higher respiration rates.\")\n\n\n# males\n\nstate_3_m_line_means &lt;- Jumbo_line_means(state_3_estimates, \"Male\", \"mitochondrial.state.3.respiration.m\", \"Mean mitochondrial state 3 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 3 respiration occurs when protons re-enter the mitochondrial matrix in the presence of ADP, which results in the production of ATP. Higher values indicate higher respiration rates.\")\n\n\n# respiration state 4 model\n\nstate_4_model &lt;- brm(st_state_4 ~ 1 + Sex + (Sex|line),\n                     data = Jumbo_mito_data, family = gaussian,\n                     prior = c(prior(normal(0, 0.5), class = Intercept),\n                               prior(normal(0, 0.5), class = b),\n                               prior(exponential(1), class = sd)),\n                     iter = 10000, warmup = 4000, chains = 4, cores = 4,\n                     control = list(adapt_delta = 0.95, max_treedepth = 10),\n                     seed = 2, file = \"fits/raw_data_fits/state_4.model\")\n\n#pp_check(state_4_model)\n\n     \nfitted_state_4 &lt;- fitted(state_4_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4),\n         Q2.5 = Q2.5*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4),\n         Q97.5 = Q97.5*sd(Jumbo_mito_data$state_4) + mean(Jumbo_mito_data$state_4))\n\nstate_4_estimates &lt;- tibble(new_data, fitted_state_4) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# create the state 4 tibbles\n\n# females\n\nstate_4_f_line_means &lt;- Jumbo_line_means(state_4_estimates, \"Female\", \"mitochondrial.state.4.respiration.f\", \"Mean mitochondrial state 4 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 4 respiration occurs when protons leak into the mitochondrial matrix in the absence of ADP, which is required for ATP synthase. Higher values indicate higher respiration rates.\")\n\n# males\n\nstate_4_m_line_means &lt;- Jumbo_line_means(state_4_estimates, \"Male\", \"mitochondrial.state.4.respiration.m\", \"Mean mitochondrial state 4 respiration rate, measured as oxygen consumption (pmol/s* mg of protein). Mitochondria were sourced from the thorax and respiration was measured in vitro. State 4 respiration occurs when protons leak into the mitochondrial matrix in the absence of ADP, which is required for ATP synthase. Higher values indicate higher respiration rates.\")\n\n# P:O ratio model\n\n\n\nPO_ratio_model &lt;- brm(st_po_ratio ~ 1 + Sex + (Sex|line),\n                      data = Jumbo_mito_data %&gt;% filter(po_ratio != \"NA\"), family = gaussian,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/PO_ratio.model\")\n\n#pp_check(PO_ratio_model)\n\nJumbo_PO_data &lt;- Jumbo_mito_data %&gt;% filter(po_ratio != \"NA\")\n     \nfitted_PO_ratio &lt;- fitted(PO_ratio_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio),\n         Q2.5 = Q2.5*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio),\n         Q97.5 = Q97.5*sd(Jumbo_PO_data$po_ratio) + mean(Jumbo_PO_data$po_ratio))\n\nPO_ratio_estimates &lt;- tibble(new_data, fitted_PO_ratio) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# create the P:O ratio tibbles\n\n# females\n\nPO_ratio_f_line_means &lt;- Jumbo_line_means(PO_ratio_estimates, \"Female\", \"mitochondrial.PO.ratio.f\", \"Mean phosphate/oxygen ratio (P:O ratio) - a measure of the efficiency with which mitochondria convert oxygen into ATP. The ratio was here calculated as the amount of ADP consumed per oxygen being reduced during state 3 respriation. Mitochondria were sourced from the thorax and respiration was measured in vitro. Higher values indicate more efficient ATP production.\")\n\n# males\n\nPO_ratio_m_line_means &lt;- Jumbo_line_means(PO_ratio_estimates, \"Male\", \"mitochondrial.PO.ratio.m\", \"Mean phosphate/oxygen ratio (P:O ratio) - a measure of the efficiency with which mitochondria convert oxygen into ATP. The ratio was here calculated as the amount of ADP consumed per oxygen being reduced during state 3 respriation. Mitochondria were sourced from the thorax and respiration was measured in vitro. Higher values indicate more efficient ATP production.\")\n\nJumbo_traits &lt;- \n  rbind(state_3_f_line_means, \n        state_3_m_line_means, \n        state_4_f_line_means, \n        state_4_m_line_means, \n        PO_ratio_f_line_means, \n        PO_ratio_m_line_means)\n\n\n\n\n\n\n\nShow the code\n# Grubbs et al 2013\n\nGrubbs_2013_leg_props &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Grubbs_2013_leg_props.csv\") %&gt;% \n  mutate(Sex = as.factor(Sex),\n         Line = as.factor(Line),\n         # standardise\n         st_Femur = my_scale(Femur),\n         st_Tibia = my_scale(Tibia),\n         st_Tarsus = my_scale(Tarsus), \n         st_Total = my_scale(Total))\n\nGrubbs_2013_T1_leg_props &lt;- Grubbs_2013_leg_props %&gt;% \nfilter(T1_T2 == \"T1\")\n\nGrubbs_2013_T2_leg_props &lt;- Grubbs_2013_leg_props %&gt;% \nfilter(T1_T2 == \"T2\")\n\n# mean total T1 leg length\n\nT1_leg_length_model &lt;- brm(st_Total ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1_leg.length.model\", control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nnew_data &lt;-\n  expand_grid(Line = Grubbs_2013_leg_props$Line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(Line, Sex)\n\nfitted_T1_leg_total &lt;- fitted(T1_leg_length_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Total) + mean(Grubbs_2013_T1_leg_props$Total))\n\n# build a function to create tibbles holding sex specific line means\n\nGrubbs_line_means &lt;- function(estimates, y, Trait, guild, description){\n  estimates %&gt;% \n  filter(Sex == y) %&gt;% \n  mutate(line = str_remove(Line, \"line_\"),\n         Trait = Trait,\n         Reference = \"Grubbs et al (2013) PLOS One\",\n         `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nT1_leg_length_estimates &lt;- tibble(new_data, fitted_T1_leg_total) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\nT1_leg_length_f_line_means &lt;- Grubbs_line_means(T1_leg_length_estimates, \"Female\", \"T1.leg.length.f\", \"Morphological\", \"Mean leg length for legs originating on the first thoracic segment. Higher values indicate longer legs\")\n\n# T1 males\n\nT1_leg_length_m_line_means &lt;- Grubbs_line_means(T1_leg_length_estimates, \"Male\", \"T1.leg.length.m\", \"Morphological\", \"Mean leg length for legs originating on the first thoracic segment. Higher values indicate longer legs\")\n\n# mean total T2 leg length\n\nT2_leg_length_model &lt;- brm(st_Total ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = \"Gaussian\",\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2_leg.length.model\", control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T2_leg_total &lt;- fitted(T2_leg_length_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Total) + mean(Grubbs_2013_T2_leg_props$Total))\n\n\nT2_leg_length_estimates &lt;- tibble(new_data, fitted_T2_leg_total) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\nT2_leg_length_f_line_means &lt;- Grubbs_line_means(T2_leg_length_estimates, \"Female\", \"T2.leg.length.f\", \"Morphological\", \"Mean leg length for legs originating on the second thoracic segment. Higher values indicate longer legs\")\n\n# T2 males\n\nT2_leg_length_m_line_means &lt;- Grubbs_line_means(T2_leg_length_estimates, \"Male\", \"T2.leg.length.m\", \"Morphological\", \"Mean leg length for legs originating on the second thoracic segment. Higher values indicate longer legs\")\n\n# Femur length\n\nT1_femur_model &lt;- brm(st_Femur ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.femur.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T1_femur &lt;- fitted(T1_femur_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Femur) + mean(Grubbs_2013_T1_leg_props$Femur))\n\nT1_femur_estimates &lt;- tibble(new_data, fitted_T1_femur) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\nfemur_T1_f_line_means &lt;- Grubbs_line_means(T1_femur_estimates, \"Female\", \"T1.femur.f\", \"Morphological\", \"Mean femur length, for legs originating on the first thoracic segment. Higher values indicate longer femurs\")\n\n# T1 males\n\nfemur_T1_m_line_means &lt;- Grubbs_line_means(T1_femur_estimates, \"Male\", \"T1.femur.m\", \"Morphological\", \"Mean femur length, for legs originating on the first thoracic segment. Higher values indicate longer femurs\")\n\nT2_femur_model &lt;- brm(st_Femur ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.femur.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T2_femur &lt;- fitted(T2_femur_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Femur) + mean(Grubbs_2013_T2_leg_props$Femur))\n\nT2_femur_estimates &lt;- tibble(new_data, fitted_T2_femur) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\nfemur_T2_f_line_means &lt;- Grubbs_line_means(T2_femur_estimates, \"Female\", \"T2.femur.f\", \"Morphological\", \"Mean femur length, for legs originating on the second thoracic segment. Higher values indicate longer femurs\")\n\n# T2 males\n\nfemur_T2_m_line_means &lt;- Grubbs_line_means(T2_femur_estimates, \"Male\", \"T2.femur.m\", \"Morphological\", \"Mean femur length, for legs originating on the second thoracic segment. Higher values indicate longer femurs\")\n\n# Tibia length\n\nT1_tibia_model &lt;- brm(st_Tibia ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.tibia.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T1_tibia &lt;- fitted(T1_tibia_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Tibia) + mean(Grubbs_2013_T1_leg_props$Tibia))\n\nT1_tibia_estimates &lt;- tibble(new_data, fitted_T1_tibia) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\ntibia_T1_f_line_means &lt;- Grubbs_line_means(T1_tibia_estimates, \"Female\", \"T1.tibia.f\", \"Morphological\", \"Mean tibia length, for legs originating on the first thoracic segment. Higher values indicate longer tibias\")\n\n# T1 males\n\ntibia_T1_m_line_means &lt;- Grubbs_line_means(T1_tibia_estimates, \"Male\", \"T1.tibia.m\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\nT2_tibia_model &lt;- brm(st_Tibia ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 10000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.tibia.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n\nfitted_T2_tibia &lt;- fitted(T2_tibia_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Tibia) + mean(Grubbs_2013_T2_leg_props$Tibia))\n\nT2_tibia_estimates &lt;- tibble(new_data, fitted_T2_tibia) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\ntibia_T2_f_line_means &lt;- Grubbs_line_means(T2_tibia_estimates, \"Female\", \"T2.tibia.f\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\n# T2 males\n\ntibia_T2_m_line_means &lt;- Grubbs_line_means(T2_tibia_estimates, \"Male\", \"T2.tibia.m\", \"Morphological\", \"Mean tibia length, for legs originating on the second thoracic segment. Higher values indicate longer tibias\")\n\n# Tarsus length\n\nT1_tarsus_model &lt;- brm(st_Tarsus ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T1_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T1.tarsus.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T1_tarsus &lt;- fitted(T1_tarsus_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T1_leg_props$Tarsus) + mean(Grubbs_2013_T1_leg_props$Tarsus))\n\nT1_tarsus_estimates &lt;- tibble(new_data, fitted_T1_tarsus) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T1 females\n\ntarsus_T1_f_line_means &lt;- Grubbs_line_means(T1_tarsus_estimates, \"Female\", \"T1.tarsus.f\", \"Morphological\", \"Mean tarsus length, for legs originating on the first thoracic segment. Higher values indicate longer tarsus'.\")\n\n# T1 males\n\ntarsus_T1_m_line_means &lt;- Grubbs_line_means(T1_tarsus_estimates, \"Male\", \"T1.tarsus.m\", \"Morphological\", \"Mean tarsus length, for legs originating on the first thoracic segment. Higher values indicate longer tarsus'.\")\n\nT2_tarsus_model &lt;- brm(st_Tarsus ~ 1 + Sex + (Sex|Line),\n                      data = Grubbs_2013_T2_leg_props, family = gaussian,\n                      prior = c(prior(normal(0, 5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/T2.tarsus.model\", \n                      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\nfitted_T2_tarsus &lt;- fitted(T2_tarsus_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus),\n         Q2.5 = Q2.5*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus),\n         Q97.5 = Q97.5*sd(Grubbs_2013_T2_leg_props$Tarsus) + mean(Grubbs_2013_T2_leg_props$Tarsus))\n\nT2_tarsus_estimates &lt;- tibble(new_data, fitted_T2_tarsus) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"))\n\n# T2 females\n\ntarsus_T2_f_line_means &lt;- Grubbs_line_means(T2_tarsus_estimates, \"Female\", \"T2.tarsus.f\", \"Morphological\", \"Mean tarsus length, for legs originating on the second thoracic segment. Higher values indicate longer tarsus'.\")\n\n# T2 males\n\ntarsus_T2_m_line_means &lt;- Grubbs_line_means(T2_tarsus_estimates, \"Male\", \"T2.tarsus.m\", \"Morphological\", \"Mean tarsus length, for legs originating on the second thoracic segment. Higher values indicate longer tarsus'.\")\n\nGrubbs_traits &lt;- rbind(T1_leg_length_f_line_means, \n                       T1_leg_length_m_line_means, \n                       T2_leg_length_f_line_means, \n                       T2_leg_length_m_line_means,\n                       femur_T1_f_line_means, \n                       femur_T1_m_line_means, \n                       femur_T2_f_line_means, \n                       femur_T2_m_line_means,\n                       tibia_T1_f_line_means, \n                       tibia_T1_m_line_means, \n                       tibia_T2_f_line_means, \n                       tibia_T2_m_line_means,\n                       tarsus_T1_f_line_means, \n                       tarsus_T1_m_line_means, \n                       tarsus_T2_f_line_means, \n                       tarsus_T2_m_line_means)\n\n\n\n\n\nFrom Supplementary Table 1âs caption: âIn the second approach (c), simpler models were fitted, in which microbiota, weight and Wolbachia status were additive, with genotype nested in experimental block as a random effect. The statistical analysis presented in Fig.1b uses these models simplified by removal of non-significant factors.â\nWe follow this approach to best recapitulate the studyâs analysis, except that we allow the intercept for the random effect line to vary with microbiota treatment. This is needed in our modelling approach to estimate line-specific effects of microbiota. We also include day as a blocking factor, which represents a block of data collection involving a subset of lines. This controls for micro-environmental variance between blocks of phenotyping.\n\n\nShow the code\n# weight\n\nDobson_NI_microbiome.dryweight &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.dw.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_weight.5.flies = my_scale(weight.5.flies)) %&gt;% \n  select(-c(PC1, PC2, PC3, Code, RAL, ...1))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_NI_microbiome.dryweight %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_NI_microbiome.dryweight %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measurements in both treatments \n\nweight_microbiome_effect_lines &lt;- inner_join(a, b)\n\n# build a function to create tibbles holding specific line means\n\nDobson_line_means &lt;- function(estimates, Trait, guild, description){\n  estimates %&gt;% \n  mutate(Trait = Trait,\n         Sex = \"Male\",\n         Reference = \"Dobson et al (2015) Nature Communications\",\n          `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nweight_microbiome_model &lt;- brm(st_weight.5.flies ~ 1 + trt + wolb + day + (trt|line),\n                               data = Dobson_NI_microbiome.dryweight, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/weight.microbiome.model\")\n\n#pp_check(weight_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_NI_microbiome.dryweight$line,\n         trt = Dobson_NI_microbiome.dryweight$trt,\n         wolb = \"n\",\n         day = \"a\") %&gt;% \n  distinct(line, trt, wolb, day)\n              \n\nfitted_dryweight &lt;- fitted(weight_microbiome_model, newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies),\n         Q2.5 = Q2.5*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies),\n         Q97.5 = Q97.5*sd(Dobson_NI_microbiome.dryweight$weight.5.flies) + mean(Dobson_NI_microbiome.dryweight$weight.5.flies))\n\ndry_weight_estimates_axenic &lt;- tibble(new_data, fitted_dryweight) %&gt;% \n  filter(trt == \"a\")\n\nweight.anexic_line_means &lt;- Dobson_line_means(dry_weight_estimates_axenic, \"weight.anexic.m\", \"Microbiome\", \"Mean combined dry weight of 5 adult flies that lacked a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate heavier flies.\")\n\ndry_weight_estimates_gnotobiotic &lt;- tibble(new_data, fitted_dryweight) %&gt;% \n  filter(trt == \"b\")\n\nweight.gnotobiotic_line_means &lt;- Dobson_line_means(dry_weight_estimates_gnotobiotic, \"weight.gnotobiotic.m\", \"Microbiome\", \"Mean combined dry weight of 5 adult flies that possessed a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate heavier flies.\")\n\n# Now get the difference between treatments\n\naxenic &lt;- \n  left_join(weight_microbiome_effect_lines, dry_weight_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto &lt;-\n  left_join(weight_microbiome_effect_lines, dry_weight_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\ndry_weight_estimates_diff &lt;-\n  left_join(axenic, gnoto) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_weight_line_means &lt;- Dobson_line_means(dry_weight_estimates_diff, \"weight.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined dry weight of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota had a greater positive effect on weight. Note that the presence of micriobiota on average increased dry weight.\")\n\n\n# Glucose\n\nDobson_glucose_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.glucose.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_glucose = my_scale(glucose)) %&gt;% \n  select(c(line, wolb, glucose, trt, day, weight.5.flies, st_glucose))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_glucose_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_glucose_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nglucose_microbiome_effect_lines &lt;- inner_join(a, b)\n\n# Note that we include weight as a moderator variable. This means we only estimate the direct effect of line on glucose levels, instead of the total effect. This is because line likely also affects weight which is likely to have a flow-on effect on glucose levels. \n\nglucose_microbiome_model &lt;- brm(st_glucose ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_glucose_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/glucose.microbiome.model\")\n\n#pp_check(glucose_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_glucose_microbiome$line,\n         trt = Dobson_glucose_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_glucose &lt;- fitted(glucose_microbiome_model,\n       newdata = new_data, allow_new_levels = TRUE) %&gt;% # Why do we need to allow new levels? Might be an issue\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose),\n         Q2.5 = Q2.5*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose),\n         Q97.5 = Q97.5*sd(Dobson_glucose_microbiome$glucose) + mean(Dobson_glucose_microbiome$glucose))\n\nglucose_estimates_axenic &lt;- tibble(new_data, fitted_glucose) %&gt;% \n  filter(trt == \"a\")\n\nglucose.anexic_line_means &lt;- Dobson_line_means(glucose_estimates_axenic, \"glucose.anexic.m\", \"Microbiome\", \"Mean combined glucose content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher glucose content.\")\n\nglucose_estimates_gnotobiotic &lt;- tibble(new_data, fitted_glucose) %&gt;% \n  filter(trt == \"b\")\n\nglucose.gnotobiotic_line_means &lt;- Dobson_line_means(glucose_estimates_gnotobiotic, \"glucose.gnotobiotic.m\", \"Microbiome\", \"Mean combined glucose content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher glucose content.\")\n\n# Now get the difference between treatments\n\naxenic_glucose &lt;- \n  left_join(glucose_microbiome_effect_lines, glucose_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_glucose &lt;-\n  left_join(glucose_microbiome_effect_lines, glucose_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nglucose_estimates_diff &lt;-\n  left_join(axenic_glucose, gnoto_glucose) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_glucose_line_means &lt;- Dobson_line_means(glucose_estimates_diff, \"glucose.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined glucose content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher glucose content. Note though that the presence of micriobiota on average decreased glucose content.\")\n\n\n# Glycogen\n\nDobson_glycogen_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.glycogen.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_glycogen = my_scale(glycogen)) %&gt;% \n  select(c(line, wolb, glycogen, st_glycogen, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_glycogen_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_glycogen_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nglycogen_microbiome_effect_lines &lt;- inner_join(a, b)\n\nglycogen_microbiome_model &lt;- brm(st_glycogen ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_glycogen_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/glycogen.microbiome.model\")\n\n#pp_check(glycogen_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_glycogen_microbiome$line,\n         trt = Dobson_glycogen_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_glycogen &lt;- fitted(glycogen_microbiome_model,\n       newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen),\n         Q2.5 = Q2.5*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen),\n         Q97.5 = Q97.5*sd(Dobson_glycogen_microbiome$glycogen) + mean(Dobson_glycogen_microbiome$glycogen))\n\nglycogen_estimates_axenic &lt;- tibble(new_data, fitted_glycogen) %&gt;% \n  filter(trt == \"a\")\n\nglycogen.anexic_line_means &lt;- Dobson_line_means(glycogen_estimates_axenic, \"glycogen.anexic.m\", \"Microbiome\", \"Mean combined glycogen content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher glycogen content.\")\n\nglycogen_estimates_gnotobiotic &lt;- tibble(new_data, fitted_glycogen) %&gt;% \n  filter(trt == \"b\")\n\nglycogen.gnotobiotic_line_means &lt;- Dobson_line_means(glycogen_estimates_gnotobiotic, \"glycogen.gnotobiotic.m\", \"Microbiome\",  \"Mean combined glycogen content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher glycogen content.\")\n\n# Now get the difference between treatments\n\naxenic_glycogen &lt;- \n  left_join(glycogen_microbiome_effect_lines, glycogen_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_glycogen &lt;-\n  left_join(glycogen_microbiome_effect_lines, glycogen_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nglycogen_estimates_diff &lt;-\n  left_join(axenic_glycogen, gnoto_glycogen) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_glycogen_line_means &lt;- Dobson_line_means(glycogen_estimates_diff, \"glycogen.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined glycogen content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher glycogen content. Note that the presence of micriobiota on average increased glycogen content.\")\n\n# Protein\n\nDobson_protein_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.protein.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_protein = my_scale(protein)) %&gt;% \n  select(c(line, wolb, protein, st_protein, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_protein_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_protein_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nprotein_microbiome_effect_lines &lt;- inner_join(a, b)\n\nprotein_microbiome_model &lt;- brm(st_protein ~ 1 + trt + wolb + day + weight.5.flies + (trt|line),\n                               data = Dobson_protein_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/protein.microbiome.model\")\n\n#pp_check(protein_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_protein_microbiome$line,\n         trt = Dobson_protein_microbiome$trt,\n         wolb = \"n\",\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, wolb, day, weight.5.flies)\n              \n\nfitted_protein &lt;- fitted(protein_microbiome_model,\n       newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein),\n         Q2.5 = Q2.5*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein),\n         Q97.5 = Q97.5*sd(Dobson_protein_microbiome$protein) + mean(Dobson_protein_microbiome$protein))\n\nprotein_estimates_axenic &lt;- tibble(new_data, fitted_protein) %&gt;% \n  filter(trt == \"a\")\n\nprotein.anexic_line_means &lt;- Dobson_line_means(protein_estimates_axenic, \"protein.anexic.m\", \"Microbiome\", \"Mean combined protein content extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher protein content.\")\n\nprotein_estimates_gnotobiotic &lt;- tibble(new_data, fitted_protein) %&gt;% \n  filter(trt == \"b\")\n\nprotein.gnotobiotic_line_means &lt;- Dobson_line_means(protein_estimates_gnotobiotic, \"protein.gnotobiotic.m\", \"Microbiome\", \"Mean combined protein content extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher protein content.\")\n\n# Now get the difference between treatments\n\naxenic_protein &lt;- \n  left_join(protein_microbiome_effect_lines, protein_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_protein &lt;-\n  left_join(protein_microbiome_effect_lines, protein_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nprotein_estimates_diff &lt;-\n  left_join(axenic_protein, gnoto_protein) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_protein_line_means &lt;- Dobson_line_means(protein_estimates_diff, \"protein.microbiome.effect.m\", \"Microbiome\", \"Mean change in the combined protein content of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher protein content. Note that the presence of micriobiota on average increased protein content.\")\n\n# TAG glycerol\n\nDobson_TAG_glycerol_microbiome &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dobson_2015/gwasB.filtered.TAG_glycerol.ab.csv\") %&gt;% \n  mutate(line = as.factor(str_remove(RAL, \"RAL_\")),\n         #wolb = as.factor(wolb),\n         trt = as.factor(trt),\n         day = as.factor(day),\n         # standardise\n         st_TAG_glycerol = my_scale(TAG_glycerol)) %&gt;% \n  select(c(line, TAG_glycerol, st_TAG_glycerol, trt, day, weight.5.flies))\n\n# The data is a bit tricky. Not all lines have been measured in both treatments. Below we look to see first which lines were measured in treatments a and b, then what lines were measured in both. We need this when we estimate the mean difference between treatments for each line\n\na &lt;- Dobson_TAG_glycerol_microbiome %&gt;% filter(trt == \"a\") %&gt;% distinct(line)\nb &lt;- Dobson_TAG_glycerol_microbiome %&gt;% filter(trt == \"b\") %&gt;% distinct(line)\n\n# inner_join selects lines that have measures for both treatments\n\nTAG_glycerol_microbiome_effect_lines &lt;- inner_join(a, b)\n\nTAG_glycerol_microbiome_model &lt;- brm(st_TAG_glycerol ~ 1 + trt + day + weight.5.flies + (trt|line),\n                               data = Dobson_TAG_glycerol_microbiome, family = gaussian,\n                               prior = c(prior(normal(0, 0.5), class = Intercept),\n                                         prior(normal(0, 0.5), class = b),\n                                         prior(exponential(1), class = sd)),\n                               iter = 8000, warmup = 2000, chains = 4, cores = 4,\n                               seed = 2, file = \"fits/raw_data_fits/TAG_glycerol.microbiome.model\")\n\n#pp_check(TAG_glycerol_microbiome_model)\n\nnew_data &lt;-\n  tibble(line = Dobson_TAG_glycerol_microbiome$line,\n         trt = Dobson_TAG_glycerol_microbiome$trt,\n         day = \"a\",\n         weight.5.flies = 1) %&gt;% \n  distinct(line, trt, day, weight.5.flies)\n              \n\nfitted_TAG_glycerol &lt;- fitted(TAG_glycerol_microbiome_model,\n                              newdata = new_data) %&gt;%\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol),\n         Q2.5 = Q2.5*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol),\n         Q97.5 = Q97.5*sd(Dobson_TAG_glycerol_microbiome$TAG_glycerol) + mean(Dobson_TAG_glycerol_microbiome$TAG_glycerol))\n\nTAG_glycerol_estimates_axenic &lt;- tibble(new_data, fitted_TAG_glycerol) %&gt;% \n  filter(trt == \"a\")\n\nTAG_glycerol.anexic_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_axenic, \"triglyceride.anexic.m\", \"Microbiome\", \"Mean combined triglyceride (TAG) content after glycerol substraction extracted from 5 adult flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on sterile food. Higher values indicate higher TAG content.\")\n\nTAG_glycerol_estimates_gnotobiotic &lt;- tibble(new_data, fitted_TAG_glycerol) %&gt;% \n  filter(trt == \"b\")\n\nTAG_glycerol.gnotobiotic_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_gnotobiotic, \"triglyceride.gnotobiotic.m\", \"Microbiome\", \"Mean combined triglyceride (TAG) content after glycerol substraction extracted from 5 adult flies that possessed a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate higher TAG content.\")\n\n# Now get the difference between treatments\n\naxenic_TAG_glycerol &lt;- \n  left_join(TAG_glycerol_microbiome_effect_lines, TAG_glycerol_estimates_axenic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(axenic_estimate = Estimate)\n\ngnoto_TAG_glycerol &lt;-\n  left_join(TAG_glycerol_microbiome_effect_lines, TAG_glycerol_estimates_gnotobiotic) %&gt;% \n  select(line, Estimate) %&gt;% \n  rename(gnoto_estimate = Estimate)\n\nTAG_glycerol_estimates_diff &lt;-\n  left_join(axenic_TAG_glycerol, gnoto_TAG_glycerol) %&gt;% \n  mutate(Estimate = gnoto_estimate - axenic_estimate)\n\ngnoto_anexic_diff_TAG_glycerol_line_means &lt;- Dobson_line_means(TAG_glycerol_estimates_diff, \"TAG.glycerol.microbiome.effect.m\", \"Microbiome\", \"Mean change in combined triglyceride content after glycerol substraction of 5 adult flies that possessed a microbiome compared with flies that lacked a microbiome, after controlling for dry weight. All micro-organisms were purged from egg-surfaces via dechorionation and larvae were reared either on sterile medium or on medium supplemented with Acetobacter pomorum, Acetobacter tropicalis, Lactobacillus brevis, Lactobacillus fructivorans and Lactobacillus plantarum. All are common commensal bacteria that make up a large proportion of the D. melanogaster microbiome. Higher values indicate that the addition of microbiota resulted in a higher TAG content. Note though that the presence of micriobiota on average decreased TAG content.\")\n\nDobson_traits &lt;- rbind(weight.anexic_line_means, \n                       weight.gnotobiotic_line_means, \n                       gnoto_anexic_diff_weight_line_means,\n                       glucose.anexic_line_means, \n                       glucose.gnotobiotic_line_means, \n                       gnoto_anexic_diff_glucose_line_means,\n                       glycogen.anexic_line_means, \n                       glycogen.gnotobiotic_line_means, \n                       gnoto_anexic_diff_glycogen_line_means,\n                       protein.anexic_line_means, \n                       protein.gnotobiotic_line_means, \n                       gnoto_anexic_diff_protein_line_means,\n                       TAG_glycerol.anexic_line_means, \n                       TAG_glycerol.gnotobiotic_line_means, \n                       gnoto_anexic_diff_TAG_glycerol_line_means)\n\n\n\n\n\n\n\nShow the code\nGaertner_2015_male_mating &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Gaertner_2015_male_mating.csv\") %&gt;% \n  select(Block, Day, Assay, Chamber, Line, Subject, SUM, orient_female, approach, wing, genital_lick, attempt_cop, copulate, sum_court) %&gt;%\n  rename(MMP = SUM) %&gt;% \n  mutate(Block = as.factor(Block),\n         line = as.factor(Line),\n         courtship_events = orient_female + approach + wing + genital_lick + attempt_cop,\n         mating_latency = 31 - copulate, # we subtract from 31 to tell the model that flies did not start the assay mating \n         censor = if_else(mating_latency == 31, 1, 0))\n\n# build a function to create tibbles holding specific line means\n\nGaertner_line_means &lt;- function(estimates, Trait, guild, description){\n  estimates %&gt;% \n  mutate(Trait = Trait,\n         Sex = \"Male\",\n         Reference = \"Gaertner et al (2015) G3\",\n          `Trait guild` = guild,\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\n# We will model the 5 courtship processes individually (note that the courtship data is very zero inflated)\n\n# orientation towards females\n\norient_model &lt;- brm(orient_female ~ 1 + Block + (1|line),\n                    data = Gaertner_2015_male_mating, family = zero_inflated_poisson,\n                    prior = c(prior(normal(3, 0.5), class = Intercept),\n                              prior(normal(0, 0.2), class = b),\n                              prior(cauchy(0, 0.2), class = sd),\n                              prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                    iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                    seed = 2, file = \"fits/raw_data_fits/orient.female.model\",\n                    control = list(adapt_delta = 0.8, max_treedepth = 12))\n\nnew_data &lt;-\n  tibble(line = Gaertner_2015_male_mating$Line,\n         Block = 1) %&gt;% \n  distinct(line, Block)\n              \n\nfitted_orient &lt;- fitted(orient_model,\n       newdata = new_data,\n       re_formula = orient_female ~ (1|line)) %&gt;% \n  as_tibble()\n\norient_to_female_m_estimates &lt;- tibble(new_data, fitted_orient) \n\norient_to_female_m_line_means &lt;- Gaertner_line_means(orient_to_female_m_estimates, \"orient.towards.female.m\", \"Behavioural\", \"Mean number of times a DGRP male orientated towards a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of orientations, and potentially more persistent courtship.\")\n\n# approaching females\n\napproach_model &lt;- brm(approach ~ 1 + Block + (1|line),\n                      data = Gaertner_2015_male_mating, family = zero_inflated_poisson,\n                      prior = c(prior(normal(3, 0.5), class = Intercept),\n                                prior(normal(0, 0.2), class = b),\n                                prior(cauchy(0, 0.2), class = sd),\n                                prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/approach.female.model\",\n                      control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_approach &lt;- fitted(approach_model,\n       newdata = new_data,\n       re_formula = approach ~ (1|line)) %&gt;% \n  as_tibble()\n\napproach_female_m_estimates &lt;- tibble(new_data, fitted_approach) \n\napproach_female_m_line_means &lt;- Gaertner_line_means(approach_female_m_estimates, \"approach.female.m\", \"Behavioural\", \"Mean number of times a DGRP male approached a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of approaches, and potentially more persistent courtship.\")\n\n# wing display (singing)\n\nwing_display_model &lt;- brm(wing ~ 1 + Block + (1|line),\n                          data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                          prior = c(prior(normal(3, 0.5), class = Intercept),\n                                    prior(normal(0, 0.2), class = b),\n                                    prior(cauchy(0, 0.2), class = sd),\n                                    prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                          iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                          seed = 2, file = \"fits/raw_data_fits/wing.display.model\",\n                          control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_wing_display &lt;- fitted(wing_display_model,\n       newdata = new_data,\n       re_formula = wing ~ (1|line)) %&gt;% \n  as_tibble()\n\nwing_display_m_estimates &lt;- tibble(new_data, fitted_wing_display) \n\nwing_display_frequency_m_line_means &lt;- Gaertner_line_means(wing_display_m_estimates, \"wing.display.frequency.m\", \"Behavioural\", \"Mean number of times a DGRP male extended their wing at a 90 degree angle in rapid vibration while in the presence of a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater number of wing displays, and potentially more persistent courtship.\")\n\n# genital licking\n\ngenital_licking_model &lt;- brm(genital_lick ~ 1 + Block + (1|line),\n                             data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                             prior = c(prior(normal(3, 0.5), class = Intercept),\n                                       prior(normal(0, 0.2), class = b),\n                                       prior(cauchy(0, 0.2), class = sd),\n                                       prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                             iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                             seed = 2, file = \"fits/raw_data_fits/genital.lick.model\",\n                             control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nfitted_genital_licking &lt;- fitted(genital_licking_model,\n       newdata = new_data,\n       re_formula = genital_lick ~ (1|line)) %&gt;% \n  as_tibble()\n\ngenital_licking_m_estimates &lt;- tibble(new_data, fitted_genital_licking) \n\ngenital_licking_m_line_means &lt;- Gaertner_line_means(genital_licking_m_estimates, \"genital.licking.frequency.m\", \"Behavioural\", \"Mean number of genital licks by DGRP male while courting a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater frequency of genital licking, and potentially more persistent courtship.\")\n\n# attempted copulations\n\nattempted_copulations_model &lt;- brm(attempt_cop ~ 1 + Block + (1|line),\n                                   data = Gaertner_2015_male_mating, family = zero_inflated_poisson(),\n                                   prior = c(prior(normal(3, 0.5), class = Intercept),\n                                             prior(normal(0, 0.2), class = b),\n                                             prior(cauchy(0, 0.2), class = sd),\n                                             prior(beta(2, 6), class = zi)),  # the brms default is beta(1, 1)), our specified prior is more sceptical of extreme values\n                                   iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                                   seed = 2, file = \"fits/raw_data_fits/attempt.cop.model\",\n                                   control = list(adapt_delta = 0.9, max_treedepth = 10))\n\nfitted_attempted_copulations &lt;- \n  fitted(attempted_copulations_model,\n         newdata = new_data) %&gt;% \n  as_tibble()\n\nattempted_copulations_m_estimates &lt;- tibble(new_data, fitted_attempted_copulations) \n\nattempted_copulations_m_line_means &lt;- Gaertner_line_means(attempted_copulations_m_estimates, \"attempted.copulation.frequency.m\", \"Behavioural\", \"Mean number of attempted copulations by DGRP male while courting a virgin female, detected by scan sampling 30 times over a 15 minute period. Higher values indicate a greater frequency of copulation attempts, and potentially more persistent courtship.\")\n\n# Mating latency (like a no choice trial)\n\n# The data is right censored for males that did not mate\n\nmating_latency_model &lt;-\n  brm(mating_latency | cens(censor) ~ 1 + Block + (1|line),\n      data = Gaertner_2015_male_mating, \n      family = weibull(), inits = 0,\n      prior = c(prior(normal(0, 1), class = Intercept), # the intercept in this model is the rate of decline in un-mated males\n                prior(exponential(1), class = sd)),\n      iter = 8000, warmup = 2000, chains = 4, cores = 4,\n      seed = 2, file = \"fits/raw_data_fits/mating.latency.model\",\n      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\nfitted_mating_latency &lt;- fitted(mating_latency_model,\n       newdata = new_data,\n       re_formula = mating_latency ~ (1|line)) %&gt;% \n  as_tibble()\n\nmating_latency_m_estimates &lt;- tibble(new_data, fitted_mating_latency) \n\nmating_latency_m_line_means &lt;- Gaertner_line_means(mating_latency_m_estimates, \"mating.latency.2015.m\", \"Behavioural\", \"Mean latency until a DGRP male was observed copulating with a virgin female, detected by scan sampling 30 times over a 15 minute period. Lower values indicate males that began mating faster, which could be interpreted as males that are more attractive to females.\")\n\nGaertner_traits &lt;- rbind(orient_to_female_m_line_means, \n                         approach_female_m_line_means, \n                         wing_display_frequency_m_line_means, \n                         genital_licking_m_line_means, \n                         attempted_copulations_m_line_means, \n                         mating_latency_m_line_means)\n\n\n\n\n\n\n\nShow the code\n# Line 34061 doesn't exist on Bloomington or flybase. There is a 34062 though (line 49). Currently removed\n\nNajarro_2015_caff_resistance &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Najarro_et_al_2015_caffeine_resistance.csv\") %&gt;% \n  # remove unidentified line\n  filter(line != 34061) %&gt;% \n  mutate(line = as.factor(line),\n         # standardise\n         st_CaffeineResistance = my_scale(CaffeineResistance))\n \n # mean caffeine resistance model\n\ncaffeine_resistance_model &lt;- brm(st_CaffeineResistance ~ 1 + (1|line),\n                      data = Najarro_2015_caff_resistance, family = \"Gaussian\",\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/caffeine.resistance.model\")\n\nnew_data &lt;-\n  tibble(line = Najarro_2015_caff_resistance$line) %&gt;% \n  distinct(line)\n\nfitted_caffeine_resistance &lt;- fitted(caffeine_resistance_model,\n                                     newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance),\n         Q2.5 = Q2.5*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance),\n         Q97.5 = Q97.5*sd(Najarro_2015_caff_resistance$CaffeineResistance) + mean(Najarro_2015_caff_resistance$CaffeineResistance))\n\ncaffeine_resistance_line_means &lt;- tibble(new_data, fitted_caffeine_resistance) %&gt;% \n  mutate(Trait = \"caffeine.resistance.f\",\n         Sex = \"Female\",\n         Reference = \"Najarro et al (2015) PLOS Genetics\",\n         `Trait guild` = \"Drug response\",\n         `Trait description` = \"Mean time, in hours, adult females survived during continuous exposure to medium supplemented with 1% caffeine. Higher values indicate greater resistance to caffeine\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nWe need to do some wrangling to fit an appropriate model for these data. The response is a learning score that is bounded between -100 to 100. It is the percentage of flies that approached a trained target compared with a control target. Negative values indicate that the flies preferred the control target; positive values indicate a preference for the trained target. This data generating process can be approximated using the beta distribution. However, we need to re-express the data so that it falls between 0 and 1.\nThe authors calculate the learning score using the formula \\(learning.score =\\frac{(Trained.odour - Control.odour)*100}{Trained.odour + control.odour}\\). A value of 0 represents an even split of flies between both odours. We can convert this to the proportion scale, where this even split now = 0.5.\nWe can transform our data using the following formula:\n\\(normalised.learning.score = \\frac{learning.score - min(learning.score)}{max(learing.score) - min(learning.score)}\\)\n\n\nShow the code\n## Punishment learning\n\nAppel_2016_memory_punishment &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Appel_2016_memory_learning.csv\") %&gt;% \n  filter(Test == \"Punishment\",\n         memory_score != \"-\") %&gt;% \n  mutate(line = as.factor(line),\n         Group_ID = as.factor(Group_ID),\n         Sex = as.factor(Sex),\n         memory_score = as.numeric(memory_score),\n         # ok here's our normalising step. Note that a value of -100 now = 0\n         # this means that lower values = greater learning i.e. a value of 0.1 means 90% of flies avoided the punishment associated odour\n         norm_mem_score = (memory_score - min(memory_score)) / (max(memory_score) - min(memory_score))\n                           )\n\n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\npunishment_memory_model &lt;- brm(norm_mem_score ~ 1 + Sex + (Sex|line),\n                       data = Appel_2016_memory_punishment, family = zero_one_inflated_beta(),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/punishment.memory.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n\nnew_data &lt;-\n  expand_grid(line = Appel_2016_memory_punishment$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_punishment_memory &lt;- fitted(punishment_memory_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\npunishment_memory_f_line_means &lt;- tibble(new_data, fitted_punishment_memory) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"punishment.memory.learning.f\",\n         Sex = \"Female\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean aversion towards an odour flies were trained to associate with the onset of an electric shock. Higher values indicate that flies showed a greater aversion toward the odour, suggesting that they associated the odor with 'punishment'. Higher values also indicate a higher learning score\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\npunishment_memory_m_line_means &lt;- tibble(new_data, fitted_punishment_memory) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"punishment.memory.learning.m\",\n         Sex = \"Male\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean aversion towards an odour flies were trained to associate with the onset of an electric shock. Higher values indicate that flies showed a greater aversion toward the odour, suggesting that they associated the odor with 'punishment'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n## Relief learning\n\nAppel_2016_memory_relief &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Appel_2016_memory_learning.csv\") %&gt;% \n  filter(Test == \"Relief\",\n         memory_score != \"-\") %&gt;% \n   mutate(line = as.factor(line),\n         Group_ID = as.factor(Group_ID),\n         Sex = as.factor(Sex),\n         memory_score = as.numeric(memory_score),\n          # ok here's our normalising step. Note that a value of -100 now = 0\n         # this means that lower values = greater learning i.e. a value of 0.1 means 90% of flies avoided the punishment associated odour\n         norm_mem_score = (memory_score - min(memory_score)) / (max(memory_score) - min(memory_score)))\n         \n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\nrelief_memory_model &lt;- brm(norm_mem_score ~ 1 + Sex + (Sex|line),\n                           data = Appel_2016_memory_relief, family = zero_one_inflated_beta(),\n                           iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                           seed = 2, file = \"fits/raw_data_fits/relief.memory.model\",\n                           control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(relief_memory_model)\n\nnew_data &lt;-\n  expand_grid(line = Appel_2016_memory_relief$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_relief_memory &lt;- fitted(relief_memory_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\nrelief_memory_f_line_means &lt;- tibble(new_data, fitted_relief_memory) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"relief.memory.learning.f\",\n         Sex = \"Female\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean preference for an odor flies were trained to associate with the end of an electric shock. Higher values indicate that flies showed a stronger preference towards the odor, suggesting that they associated the odor with 'relief'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nrelief_memory_m_line_means &lt;- tibble(new_data, fitted_relief_memory) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"relief.memory.learning.m\",\n         Sex = \"Male\",\n         Reference = \"Appel et al (2016) Biology Letters\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean preference for an odor flies were trained to associate with the end of an electric shock. Higher values indicate that flies showed a stronger preference towards the odor, suggesting that they associated the odor with 'relief'. Higher values also indicate a greater learning score.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nAppel_traits &lt;- rbind(punishment_memory_f_line_means,\n                      punishment_memory_m_line_means,\n                      relief_memory_f_line_means,\n                      relief_memory_m_line_means)\n\n\n\n\n\n\n\nShow the code\nMunoz_2016_wing_size &lt;- read_csv(\"data/data_collation/input/Raw_data_files/munoz_munoz_2016.csv\") %&gt;% \n  mutate(line = as.factor(Strain),\n         Repl = (as.factor(Repl)),\n         CS = as.double(CS),\n         # standardise\n         st_CS = my_scale(CS))\n\nwing_size_model &lt;- brm(st_CS ~ 1 + Sex + (Sex|line),\n                       data = Munoz_2016_wing_size, family = gaussian,\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/wing.size.model\",\n                       control = list(adapt_delta = 0.8, max_treedepth = 10))\n\nnew_data &lt;-\n  expand_grid(line = Munoz_2016_wing_size$line,\n              Sex = c(\"F\", \"M\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_size &lt;- fitted(wing_size_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS),\n         Q2.5 = Q2.5*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS),\n         Q97.5 = Q97.5*sd(Munoz_2016_wing_size$CS) + mean(Munoz_2016_wing_size$CS))\n\n# females\n\nwing_size_f_line_means &lt;- tibble(new_data, fitted_wing_size) %&gt;%\n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\")) %&gt;% \n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"wing.size.f\",\n         Sex = \"Female\",\n         Reference = \"MuÃ±oz-MuÃ±oz et al (2016) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean centroid size - the square root of the sum of squared distances of a set of wing landmarks to the centroid of this landmark configuration. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nwing_size_m_line_means &lt;- tibble(new_data, fitted_wing_size) %&gt;%\n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\")) %&gt;% \n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"wing.size.m\",\n         Sex = \"Male\",\n         Reference = \"MuÃ±oz-MuÃ±oz et al (2016) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean centroid size - the square root of the sum of squared distances of a set of wing landmarks to the centroid of this landmark configuration. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nMunoz_traits &lt;- rbind(wing_size_f_line_means,\n                      wing_size_m_line_means)\n\n\n\n\n\nWe have line mean data for larvae, but raw data for adults. Therefore, we only need to model the adult data here.\n\n\nShow the code\nFreda_2017_cold_hardiness &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2017_ThermalHardiness.csv\") %&gt;% \n  mutate(line = as.factor(line),\n         Sex = as.factor(Sex))\n\n# I don't have a good read on sensible priors here, so I'll rely on brms defaults\n\ncold_hardiness_model &lt;- brm(Proportion_alive ~ 1 + Sex + (Sex|line),\n                           data = Freda_2017_cold_hardiness, family = zero_one_inflated_beta(),\n                           iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                           seed = 2, file = \"fits/raw_data_fits/cold_hardiness.model\",\n                           control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(cold_hardiness_model)\n\nnew_data &lt;-\n  expand_grid(line = Freda_2017_cold_hardiness$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_cold_hardiness &lt;- fitted(cold_hardiness_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\ncold_hardiness_f_line_means &lt;- tibble(new_data, fitted_cold_hardiness) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"cold.hardiness.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2017) Integrative and Comparative Biology\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of surviving adults 24 hours post exposure to an hour of cold shock (-5Â°C). Higher values indicate flies that are more resistant to cold shock.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\ncold_hardiness_m_line_means &lt;- tibble(new_data, fitted_cold_hardiness) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"cold.hardiness.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2017) Integrative and Comparative Biology\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of surviving adults 24 hours post exposure to an hour of cold shock (-5Â°C). Higher values indicate flies that are more resistant to cold shock.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nFreda_2017_traits &lt;- rbind(cold_hardiness_f_line_means,\n                      cold_hardiness_m_line_means)\n\n\n\n\n\n\n\nShow the code\nNajarro_2017_boric_acid &lt;- read_csv(\"data/data_collation/input/Raw_data_files/najarro_2017.csv\") %&gt;% \n  rename(lifespan = `life-span (hr) on 1.5% boric acid`) %&gt;% \n  mutate(line = as.factor(line),\n         st_lifespan = my_scale(lifespan))\n\nboric_acid_model &lt;- brm(st_lifespan ~ 1 + (1|line),\n                        data = Najarro_2017_boric_acid, family = \"Gaussian\",\n                        prior = c(prior(normal(0, 0.5), class = Intercept),\n                                  prior(exponential(1), class = sd)),\n                        iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                        seed = 2, file = \"fits/raw_data_fits/boric.acid.model\")\n\n\n\n# get predictions from the model for each line\n\nnew_data &lt;-\n  tibble(line = Najarro_2017_boric_acid$line) %&gt;% \n  distinct(line)\n\nfitted_boric_acid &lt;- fitted(boric_acid_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan),\n         Q2.5 = Q2.5*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan),\n         Q97.5 = Q97.5*sd(Najarro_2017_boric_acid$lifespan) + mean(Najarro_2017_boric_acid$lifespan))\n\nboric_acid_line_means &lt;- tibble(new_data, fitted_boric_acid) %&gt;% \n  mutate(line = str_remove(line, \"RAL\"),\n         Trait = \"boric.acid.resistance.f\",\n         Sex = \"Female\",\n         Reference = \"Najarro, Hackett and Macdonald (2017) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean lifespan, measured in hours, for mated females exposed to media supplemented with 1.5% boric acid (BH3O3, BP168). Boric acid is a common household pesticide. Higher values indicate a greater resistance to boric acid.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nTo model copulation latency Dean et al log transform the data and fit a linear model with a gaussian distribution. This model struggles to converge using brms, so we treat the data as time to event with right censoring for the flies that failed to mate within a 2 hour window (coded as 120 in the dataset). To model this data we fit a survival model, specifying a weibull distribution.\nTo model insemination capacity Dean et al specify a quasipoisson distribution family because they treat the data as underdispersed counts. There is no family like this in brms. However, we can treat the data as binomial, with each female treated as a YES/NO for mating success. The posterior predictive check suggests this is a good fit to the data. Our predictions are also a good match with those of Dean et al.\n\n\nShow the code\nDean_2018_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Dean_2018.csv\") %&gt;% \n   mutate(line = as.factor(Line),\n          Rep = as.factor(Rep),\n          Block = as.factor(Block),\n          censor = if_else(LatCop == 120, 1, 0))\n\ncopulation_latency_model &lt;- brm(LatCop | cens(censor) ~ 1 + Block + (1|line),\n                       data = Dean_2018_data, family = weibull(),\n                       prior = c(prior(normal(0, 1), class = Intercept),\n                                 prior(normal(0, 1), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/copulation_latency.model\",\n                       control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n#pp_check(copulation_latency_model)\n\nnew_data &lt;-\n  tibble(line = Dean_2018_data$line,\n         Block = 1) %&gt;% \n  distinct(line, Block)\n\n\nfitted_cop_lat &lt;- fitted(copulation_latency_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncop_lat_line_means &lt;- tibble(new_data, fitted_cop_lat) %&gt;%\n  mutate(Trait = \"copulation.latency.m\",\n         Sex = \"Male\",\n         Reference = \"Dean et al (2020) Evolution\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean time (mins) from a male flies introduction to a female until the onset of mating. Lower values indicate shorter copulation latencies and potentially more attractive males\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Dean et al fit a quasipoisson model because they treat the data as underdispersed counts. There is no family like this in brms. However, I think we can treat the data as binomial with each female treated as a YES/NO for mating success. The posterior predictive check suggests this is a good fit to the data.\n\nDean_2018_data &lt;-\n  Dean_2018_data %&gt;% \n  mutate(Cohabiting_females = 10)\n\ninsemination_capacity_model &lt;- brm(promiscuity | trials(Cohabiting_females) ~ 1 + Block + (1|line),\n                                   data = Dean_2018_data, family = binomial,\n                                   prior = c(prior(normal(0, 0.5), class = Intercept),\n                                             prior(normal(0, 0.5), class = b),\n                                             prior(exponential(1), class = sd)),\n                                   iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                                   seed = 2, file = \"fits/raw_data_fits/insemination_capacity.model\",\n                                   control = list(adapt_delta = 0.8, max_treedepth = 10))\n\n\n\n#pp_check(insemination_capacity_model)\n\nnew_data &lt;-\n  tibble(line = Dean_2018_data$line,\n         Cohabiting_females = 1,\n         Block =1) %&gt;% \n  distinct(line, Cohabiting_females, Block)\n\n\nfitted_insem_capac &lt;- fitted(insemination_capacity_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ninsem_capac_line_means &lt;- tibble(new_data, fitted_insem_capac) %&gt;%\n  mutate(Trait = \"insemination.capacity.m\",\n         Sex = \"Male\",\n         Reference = \"Dean et al (2020) Evolution\",\n         `Trait guild` = \"Life history\",\n         `Trait description` = \"Mean proportion of 10 females that a single male successfully inseminated in 48 hours. Insemination was verified by identification of viable pupal progeny. Higher values indicate males with a greater insemination capacity.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\nDean_traits &lt;- rbind(cop_lat_line_means,\n                     insem_capac_line_means)\n\n\n\n\n\nWe fit a slightly different parathion model to that presented in the manuscript. This is because some lines are resistant to parathion, leading to heavy sensoring. This results in two groups of lines: those that are susceptible and those that are resistant. The resistant lines have estimated mean survival times of 400+ days, which is not realistic for D. melanogaster. Therefore, I instead model resistance to parathion using a binomial response, which describes whether the line had surviving flies 48 hours after exposure to parathion.\n\n\nShow the code\n# Deltamethrin\n\nDuneau_2018_deltamethrin_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Duneau_2018/Duneau_2018_deltamethrin.csv\") %&gt;% \n   mutate(line = str_remove(DGRP_lines, \"line_\"),\n          Experiment = as.factor(Experiment),\n          line = as.factor(line)) %&gt;% \n  filter(Sample.size != \"NA\")\n\ndeltamethrin_model &lt;-\n  brm(Delta_Alive.at.48h | trials(Sample.size) ~ 1  + Experiment + (1|line),\n      data = Duneau_2018_deltamethrin_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = binomial(),\n      iter = 10000, warmup = 4000, chains = 4, cores = 4,\n      seed = 2, file = \"fits/raw_data_fits/deltamethrin.model\",\n      control = list(adapt_delta = 0.95, max_treedepth = 10))\n\n#pp_check(deltamethrin_model)\n\nnew_data_Duneau &lt;-\n  tibble(line = Duneau_2018_deltamethrin_data$line,\n         Experiment = \"Exp 1\",\n         Sample.size = 1) %&gt;% \n  distinct(line, Experiment, Sample.size)\n\n\nfitted_deltamethrin &lt;- fitted(deltamethrin_model,\n       newdata = new_data_Duneau,\n       allow_new_levels = TRUE) %&gt;% \n  as_tibble()\n\ndeltamethrin_line_means &lt;- tibble(new_data_Duneau, fitted_deltamethrin) %&gt;%\n  mutate(Trait = \"deltamethrin.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Duneau et al (2018) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean survival 48 hours after exposure to deltamethrin, a pyrethroid pesticide. Higher values indicate greater resistance to deltamethrin.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Parathion\n\n# set up data for right censoring in brms - it is the opposite to what the survival frequentist package uses. We don't use this but it is useful to know if we do choose to fit a time to event model\n\nDuneau_2018_parathion_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Duneau_2018/Duneau_2018_parathion.csv\") %&gt;% \n   mutate(line = str_remove(DGRP_lines, \"line_\"),\n          Experiment = as.factor(Experiment)) %&gt;% \n  mutate(line = as.factor(line),\n         Alive.at.48hr = if_else(Censor == 1, 0, 1),\n         Censor = if_else(Censor == 1, \"none\", \"right\")) \n\n# fit the new binomial model\n\nparathion_binomial_model &lt;-\n  brm(Alive.at.48hr ~ 1 + Experiment + (1|line),\n      data = Duneau_2018_parathion_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/parathion_binomial.model\")\n\n#pp_check(parathion_binomial_model) \n\nnew_data &lt;-\n  tibble(line = Duneau_2018_parathion_data$line,\n         Experiment = \"Experiment_1\") %&gt;% \n  distinct(line, Experiment)\n\n\nfitted_parathion_binomial &lt;- fitted(parathion_binomial_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nparathion_binomial_line_means &lt;- tibble(new_data, fitted_parathion_binomial) %&gt;%\n  mutate(Trait = \"parathion.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Duneau et al (2018) G3\",\n         `Trait guild` = \"Insecticide response\",\n         `Trait description` = \"Mean survival 48 hours after exposure to parathion, an organophosphate pesticide. Higher values indicate greater resistance to parathion.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nDuneau_traits &lt;- rbind(deltamethrin_line_means,\n                       parathion_binomial_line_means)\n\n\n\n\n\n\n\nShow the code\nPalmer_2018_KV_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Palmer_2018_kallithea.csv\") %&gt;% \n  group_by(Injection.date) %&gt;%\n  mutate(injection_date = as_factor(cur_group_id())) %&gt;% \n  ungroup() %&gt;% \n  mutate(line = as.factor(Line),\n         Sex = as.factor(Sex),\n         value = as.numeric(value))\n  \n\nPalmer_2018_LT50 &lt;-\n  Palmer_2018_KV_data %&gt;% \n  filter(trait.column == \"Mortality\") %&gt;% \n  mutate(# standardise\n         st_value = my_scale(value))\n\n# LT50 model\n\nkv_LT50_model &lt;- brm(st_value ~ 1 + Sex + (Sex|line) + (1|injection_date),\n                       data = Palmer_2018_LT50, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 8000, warmup = 4000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/kv.LT50.model\",\n                       control = list(adapt_delta = 0.97, max_treedepth = 12))\n\n #pp_check(kv_LT50_model)\n\nnew_data &lt;-\n  expand_grid(line = Palmer_2018_LT50$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_kv_LT50 &lt;- fitted(kv_LT50_model,\n       newdata = new_data,\n       re_formula = value ~ (Sex|line),\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value),\n         Q2.5 = Q2.5*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value),\n         Q97.5 = Q97.5*sd(Palmer_2018_LT50$value) + mean(Palmer_2018_LT50$value))\n\n# females\n\nkv_LT50_f_line_means &lt;- tibble(new_data, fitted_kv_LT50) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"kallithea.resistance.LT50.f\",\n         Sex = \"Female\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Median number of days adult flies survived post infection with Kallithea virus (50 nL of 105 ID50 originally injected). Measured as LT50 - the point at which 50% of 10 flies died. Higher values indicate greater resistance to Kallithea virus.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nkv_LT50_m_line_means &lt;- tibble(new_data, fitted_kv_LT50) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"kallithea.resistance.LT50.m\",\n         Sex = \"Male\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Median number of days adult flies survived post infection with Kallithea virus (50 nL of 105 ID50 originally injected). Measured as LT50 - the point at which 50% of 10 flies died. Higher values indicate greater resistance to Kallithea virus.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# titre model\n\nPalmer_2018_KV_titre_data &lt;-\n  Palmer_2018_KV_data %&gt;% \n  filter(trait.column == \"titre\") %&gt;% \n   mutate(# standardise\n         st_value = my_scale(value))\n\nkv_titre_model &lt;- brm(st_value ~ 1 + (1|line) + (1|injection_date),\n                       data = Palmer_2018_KV_titre_data, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/kv.titre.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\nnew_data &lt;-\n  expand_grid(line = Palmer_2018_KV_titre_data$line,\n              Sex = \"Female\") %&gt;% \n  distinct(line, Sex)\n\nfitted_kv_titre &lt;- fitted(kv_titre_model,\n       newdata = new_data,\n       re_formula = value ~ (1|line),\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value),\n         Q2.5 = Q2.5*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value),\n         Q97.5 = Q97.5*sd(Palmer_2018_KV_titre_data$value) + mean(Palmer_2018_KV_titre_data$value))\n\n# females\n\nkv_titre_f_line_means &lt;- tibble(new_data, fitted_kv_titre) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"kallithea.viral.load.f\",\n         Sex = \"Female\",\n         Reference = \"Palmer et al (2018) PLOS Pathogens\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Mean viral titre of kallithea virus found in groups of 10 adult females, 8 days after injection of 50 nL of 105 ID50 KV.  This is a measure of viral load, with higher values indicating greater viral load.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nPalmer_traits &lt;- rbind(kv_LT50_f_line_means,\n                       kv_LT50_m_line_means,\n                       kv_titre_f_line_means)\n\n\n\n\n\nCumulative cold tolerance data was supplied by the authors in line mean form, so we do not model it here.\n\n\nShow the code\nTeets_2018_cold_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Teets_Hahn_2018_data.csv\") %&gt;% \n  mutate(line = as.factor(`Line (DGRP)`),\n         Temp = as.factor(Temp))\n\ncold_survival_model &lt;- brm(Live | trials(Total) ~ 1 + Temp + (Temp|line),\n                       data = Teets_2018_cold_data, family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/cold.survival.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\n#pp_check(cold_survival_model)\n\nnew_data &lt;-\n  expand_grid(line = Teets_2018_cold_data$line,\n              Temp = Teets_2018_cold_data$Temp,\n              Total = 1) %&gt;% \n  distinct(line, Temp, Total)\n\nfitted_cold_survival &lt;- fitted(cold_survival_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_survival_line_means_data &lt;- tibble(new_data, fitted_cold_survival) %&gt;% \n  mutate(Sex = \"Female\")\n\n# build a function to create tibbles holding line and temp specific line means\n\nTeets_line_means &lt;- function(estimates, value, Trait, description){\n  estimates %&gt;%\n  filter(Temp == value) %&gt;% \n  mutate(Trait = Trait,\n         Reference = \"Teets and Hahn (2018) Journal of Evolutionary Biology\",\n         `Trait guild` =\"Temperature related\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nneg1_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-1\", \"cold.tolerance.-1.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -1 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg2_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-2\", \"cold.tolerance.-2.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -2 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg3_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-3\", \"cold.tolerance.-3.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -3 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg4_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-4\", \"cold.tolerance.-4.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -4 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg5_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-5\", \"cold.tolerance.-5.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -5 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg6_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-6\", \"cold.tolerance.-6.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -6 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nneg7_cold_tolerance_line_means &lt;- Teets_line_means(cold_survival_line_means_data, value = \"-7\", \"cold.tolerance.-7.f\", \"Mean proportion of surviving adults 24 hours after an hour of exposure to -7 Â°C. Higher values indicate flies that are more tolerant to cold exposure.\")\n\nTeets_traits &lt;- rbind(neg1_cold_tolerance_line_means,\n                      neg2_cold_tolerance_line_means,\n                      neg3_cold_tolerance_line_means,\n                      neg4_cold_tolerance_line_means,\n                      neg5_cold_tolerance_line_means,\n                      neg6_cold_tolerance_line_means,\n                      neg7_cold_tolerance_line_means)\n\n\n\n\n\n\n\nShow the code\nEverman_2019_starvation_resistance &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Everman_2019_starvation_res.csv\") %&gt;% \n  mutate(line = as.factor(line),\n         Sex = as.factor(Sex),\n         Lifespan_hrs = as.numeric(Lifespan_hrs),\n         # standardise\n         st_Lifespan_hrs = my_scale(Lifespan_hrs))\n\n\nstarvation_resistance_model &lt;- brm(st_Lifespan_hrs ~ 1 + Sex + (Sex|line),\n                       data = Everman_2019_starvation_resistance, family = gaussian(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/starvation.res.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(starvation_resistance_model)\n\n\nnew_data &lt;-\n  expand_grid(line = Everman_2019_starvation_resistance$line,\n              Sex = c(\"Female\", \"Male\")) %&gt;% \n  distinct(line, Sex)\n\nfitted_starvation_resistance &lt;- fitted(starvation_resistance_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs),\n         Q2.5 = Q2.5*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs),\n         Q97.5 = Q97.5*sd(Everman_2019_starvation_resistance$Lifespan_hrs) + mean(Everman_2019_starvation_resistance$Lifespan_hrs))\n\n# females\n\nstarvation_resistance_f_line_means &lt;- tibble(new_data, fitted_starvation_resistance) %&gt;%\n  filter(Sex == \"Female\") %&gt;% \n  mutate(Trait = \"starvation.resistance.2019.f\",\n         Sex = \"Female\",\n         Reference = \"Everman et al (2019) Genetics\",\n         `Trait guild` = \"Stress response\",\n         `Trait description` = \"Mean hours survived on inedible food medium, used as a measure of starvation resistance. Higher values indicate flies that exhibited greater starvation resistance.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nstarvation_resistance_m_line_means &lt;- tibble(new_data, fitted_starvation_resistance) %&gt;%\n  filter(Sex == \"Male\") %&gt;% \n  mutate(Trait = \"starvation.resistance.2019.m\",\n         Sex = \"Male\",\n         Reference = \"Everman et al (2019) Genetics\",\n         `Trait guild` = \"Stress response\",\n         `Trait description` = \"Mean hours survived on inedible food medium, used as a measure of starvation resistance. Higher values indicate flies that exhibited greater starvation resistance.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nEverman_traits &lt;- rbind(starvation_resistance_f_line_means,\n                        starvation_resistance_m_line_means)\n\n\n\n\n\n\n\nShow the code\nFreda_2019a &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Cold18.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\nFreda_2019b &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Cold25.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline)) %&gt;% \n  filter(n &gt; 0)\n\nFreda_2019c &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Heat18.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\nFreda_2019d &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Freda_2019/Heat25.csv\") %&gt;% \n   mutate(line = as.factor(dgrpline))\n\n# Cold hardiness at 18C for larvae model\n\ncold_hardiness_18_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_larvae_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_ch_18_l &lt;- fitted(cold_hardiness_18_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# larvae\n\ncold_hardiness_18_l_line_means &lt;- tibble(new_data, fitted_ch_18_l) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to -6.5Â°C for an hour. These larvae were otherwise reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Cold hardiness at 18C for females model\n\ncold_hardiness_18_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_f_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_ch_18_f &lt;- fitted(cold_hardiness_18_f_model,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output\n  as_tibble()\n\n# female\n\ncold_hardiness_18_f_line_means &lt;- tibble(new_data, fitted_ch_18_f) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Cold hardiness at 18C for males model\n\ncold_hardiness_18_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019a %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_18_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_18_m_model)\n\nFreda_2019a_larvae_data &lt;-\n  Freda_2019a %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019a_larvae_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_ch_18_m &lt;- fitted(cold_hardiness_18_m_model,\n       newdata = new_data,\n              allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble()\n\ncold_hardiness_18_m_line_means &lt;- tibble(new_data, fitted_ch_18_m) %&gt;%\n  mutate(Trait = \"cold.hardiness.18C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n#################\n\n# Cold hardiness at 25C for larvae model\n\ncold_hardiness_25_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_larvae_model)\n\nFreda_2019b_larvae_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_ch_25_l &lt;- fitted(cold_hardiness_25_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# larvae\n\ncold_hardiness_25_l_line_means &lt;- tibble(new_data, fitted_ch_25_l) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to -6.5Â°C for an hour. These larvae were otherwise reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Cold hardiness at 25C for females model\n\ncold_hardiness_25_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_f_model)\n\nFreda_2019b_f_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_ch_25_f &lt;- fitted(cold_hardiness_25_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_hardiness_25_f_line_means &lt;- tibble(new_data, fitted_ch_25_f) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Cold hardiness at 25C for males model\n\ncold_hardiness_25_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019b %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/ch_25_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(cold_hardiness_25_m_model)\n\nFreda_2019b_m_data &lt;-\n  Freda_2019b %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019b_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_ch_25_m &lt;- fitted(cold_hardiness_25_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\ncold_hardiness_25_m_line_means &lt;- tibble(new_data, fitted_ch_25_m) %&gt;%\n  mutate(Trait = \"cold.hardiness.25C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to -6.5Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater cold hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n##############\n\n# Heat hardiness at 18C for larvae model\n\nheat_hardiness_18_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_larvae_model)\n\nFreda_2019c_larvae_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_hh_18_l &lt;- fitted(heat_hardiness_18_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_l_line_means &lt;- tibble(new_data, fitted_hh_18_l) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to 38Â°C for an hour. These larvae were otherwise reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Heat hardiness at 18C for females model\n\nheat_hardiness_18_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_f_model)\n\nFreda_2019c_f_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_hh_18_f &lt;- fitted(heat_hardiness_18_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_f_line_means &lt;- tibble(new_data, fitted_hh_18_f) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Heat hardiness at 18C for males model\n\nheat_hardiness_18_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019c %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_18_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_18_m_model)\n\nFreda_2019c_m_data &lt;-\n  Freda_2019c %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019c_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_hh_18_m &lt;- fitted(heat_hardiness_18_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_18_m_line_means &lt;- tibble(new_data, fitted_hh_18_m) %&gt;%\n  mutate(Trait = \"heat.hardiness.18C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 18Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n#################\n\n# Heat hardiness at 25C for larvae model\n\nheat_hardiness_25_larvae_model &lt;- brm(alive | trials(n) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"L\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_l.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_larvae_model)\n\nFreda_2019d_larvae_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"L\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_larvae_data$line,\n         n = 1) %&gt;% \n  distinct(line, n)\n\nfitted_hh_25_l &lt;- fitted(heat_hardiness_25_larvae_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n# females\n\nheat_hardiness_25_l_line_means &lt;- tibble(new_data, fitted_ch_25_l) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.larvae\",\n         Sex = \"Both\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of third instar larvae that survived exposure to 38Â°C for an hour. These larvae were otherwise reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n# Heat hardiness at 25C for females model\n\nheat_hardiness_25_f_model &lt;- brm(f_female | trials(s_female) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_f.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_f_model)\n\nFreda_2019d_f_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_f_data$line,\n         s_female = 1) %&gt;% \n  distinct(line, s_female)\n\nfitted_hh_25_f &lt;- fitted(heat_hardiness_25_f_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_25_f_line_means &lt;- tibble(new_data, fitted_hh_25_f) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.f\",\n         Sex = \"Female\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Heat hardiness at 25C for males model\n\nheat_hardiness_25_m_model &lt;- brm(f_male | trials(s_male) ~ 1 + (1|line),\n                       data = Freda_2019d %&gt;% filter(stage == \"A\"), family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/hh_25_m.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(heat_hardiness_25_m_model)\n\nFreda_2019d_m_data &lt;-\n  Freda_2019d %&gt;% filter(stage == \"A\")\n\nnew_data &lt;-\n  tibble(line = Freda_2019d_m_data$line,\n         s_male = 1) %&gt;% \n  distinct(line, s_male)\n\nfitted_hh_25_m &lt;- fitted(heat_hardiness_25_m_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nheat_hardiness_25_m_line_means &lt;- tibble(new_data, fitted_hh_25_m) %&gt;%\n  mutate(Trait = \"heat.hardiness.25C.m\",\n         Sex = \"Male\",\n         Reference = \"Freda et al (2019) Heredity\",\n         `Trait guild` = \"Temperature related\",\n         `Trait description` = \"Mean proportion of adult flies that survived exposure to 38Â°C for an hour. These flies were originally reared at 25Â°C. Higher values indicate greater heat hardiness.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nFreda_2019_traits &lt;- rbind(cold_hardiness_18_l_line_means,\n                           cold_hardiness_18_f_line_means,\n                           cold_hardiness_18_m_line_means,\n                           cold_hardiness_25_l_line_means,\n                           cold_hardiness_25_f_line_means,\n                           cold_hardiness_25_m_line_means,\n                           heat_hardiness_18_l_line_means,\n                           heat_hardiness_18_f_line_means,\n                           heat_hardiness_18_m_line_means,\n                           heat_hardiness_25_l_line_means,\n                           heat_hardiness_25_f_line_means,\n                           heat_hardiness_25_m_line_means)\n\n\n\n\n\nThis study measures wing shape and area. They then run a multivariate GWA. Here, we just model the mean centroid size for each line.\nFor whatever reason, this is a hard trait to model.\n\n\nShow the code\nPitchers_2019_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Pitchers_2019_wing_multivariate.csv\") %&gt;% \n  mutate(line = as.factor(Linenum),\n         Lab = as.factor(Lab),\n         Perp = as.factor(Perp),\n         block = as.factor(block),\n         Sex = as.factor(Sex))\n\nHoule_data &lt;- Pitchers_2019_data %&gt;% \n  filter(Lab == \"Hou\") %&gt;% \n  mutate(\n    # standardise\n    st_csmm = my_scale(csmm))\n\nDworkin_data &lt;- Pitchers_2019_data %&gt;% \n  filter(Lab == \"Dwo\") %&gt;% \n   mutate(\n    # standardise\n    st_csmm = my_scale(csmm))\n\n# Houle lab model\n\nwing_centroid_size_model_Hou &lt;- brm(st_csmm ~ Sex + (Sex|line),\n                      family = gaussian, data = Houle_data,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Houle_cs_wing.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n#pp_check(wing_centroid_size_model_Hou)\n\nnew_data &lt;-\n  tibble(line = Houle_data$line,\n         Sex = Houle_data$Sex) %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_houle &lt;- fitted(wing_centroid_size_model_Hou,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output\n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Houle_data$csmm) + mean(Houle_data$csmm),\n         Q2.5 = Q2.5*sd(Houle_data$csmm) + mean(Houle_data$csmm),\n         Q97.5 = Q97.5*sd(Houle_data$csmm) + mean(Houle_data$csmm))\n\ncentroid_size_Houle_f_line_means &lt;- tibble(new_data, fitted_wing_houle) %&gt;%\n  filter(Sex == \"F\") %&gt;% \n  mutate(Trait = \"wing.centroid.size.2019_Houle.f\",\n         Sex = \"Female\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Houle lab. Images were taken of live flies using the 'Wingmachine' system. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\ncentroid_size_Houle_m_line_means &lt;- \n  tibble(new_data, fitted_wing_houle) %&gt;%\n  filter(Sex == \"M\") %&gt;% \n  mutate(Trait = \"wing.centroid.size.2019_Houle.m\",\n         Sex = \"Male\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Houle lab. Images were taken of live flies using the 'Wingmachine' system. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# Dworkin lab model\n\nwing_centroid_size_model_Dwo_f &lt;- brm(st_csmm ~ (1|line),\n                      family = student, data = Dworkin_data %&gt;% filter(Sex == \"F\"),\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                               #prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 20000, warmup = 4000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Dwo_cs_wing.f.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n#pp_check(wing_centroid_size_model_Dwo_f)\n\ndworkin_f &lt;- Dworkin_data %&gt;% filter(Sex == \"F\")\n\nnew_data &lt;-\n  tibble(line = dworkin_f$line,\n         Sex = \"F\") %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_dworkin_f &lt;- fitted(wing_centroid_size_model_Dwo_f,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q2.5 = Q2.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q97.5 = Q97.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm))\n\ncentroid_size_Dworkin_f_line_means &lt;- tibble(new_data, fitted_wing_dworkin_f) %&gt;%\n  mutate(Trait = \"wing.centroid.size.2019_Dworkin.f\",\n         Sex = \"Female\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean left wing centroid size for flies measured in the Dworkin lab. Images were taken of dissected wings using an Olympus microscope. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nwing_centroid_size_model_Dwo_m &lt;- brm(st_csmm ~ (1|line),\n                      family = student, data = Dworkin_data %&gt;% filter(Sex == \"M\"),\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                               #prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 20000, warmup = 4000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/Dwo_cs_wing.m.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 12))\n\n\ndworkin_m &lt;- Dworkin_data %&gt;% filter(Sex == \"M\")\n\nnew_data &lt;-\n  tibble(line = dworkin_m$line,\n         Sex = \"M\") %&gt;% \n  distinct(line, Sex)\n\nfitted_wing_dworkin_m &lt;- fitted(wing_centroid_size_model_Dwo_m,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% # sometimes we need to include this for fitted to work. It changes nothing in the output \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q2.5 = Q2.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm),\n         Q97.5 = Q97.5*sd(Dworkin_data$csmm) + mean(Dworkin_data$csmm))\n\ncentroid_size_Dworkin_m_line_means &lt;- tibble(new_data, fitted_wing_dworkin_m) %&gt;%\n  mutate(Trait = \"wing.centroid.size.2019_Dworkin.m\",\n         Sex = \"Male\",\n         Reference = \"Pitchers et al (2019) Evolution\",\n         `Trait guild` = \"Morphological\",\n         `Trait description` = \"Mean wing centroid size for flies measured in the Dworkin lab. Images were taken of dissected wings using an Olympus microscope. Higher values indicate larger wings.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nPitchers_traits &lt;- \n  rbind(centroid_size_Houle_f_line_means,\n        centroid_size_Houle_m_line_means,\n        centroid_size_Dworkin_f_line_means,\n        centroid_size_Dworkin_m_line_means)\n\n\n\n\n\n\n\nShow the code\nRohde_2019_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Rohde_2019.csv\") %&gt;% \n  mutate(line = as.factor(DGRP_id),\n         arena_id = as.factor(arena_id),\n         treatment = as.factor(treatment),\n         day_id = as.factor(day_id),\n         neighbour = as.factor(neighbour),\n         plate_id = as.factor(plate_id),\n         # standardise\n         st_distance_cm = my_scale(distance_cm))\n\n# distance travelled\n\nactivity_model &lt;- brm(st_distance_cm ~ treatment + (1|day_id) + (1|plate_id) + (treatment|line),\n                      family = gaussian, data = Rohde_2019_data,\n                      prior = c(prior(normal(0, 0.5), class = Intercept),\n                                prior(normal(0, 0.5), class = b),\n                                prior(exponential(1), class = sd)),\n                      iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                      seed = 2, file = \"fits/raw_data_fits/activity.model\",\n                      control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n#pp_check(activity_model)\n\nnew_data &lt;-\n  tibble(line = Rohde_2019_data$line,\n         treatment = Rohde_2019_data$treatment) %&gt;% \n  distinct(line, treatment)\n\n\nfitted_activity &lt;- fitted(activity_model,\n       newdata = new_data,\n       re_formula = distance_cm ~ (treatment|line)) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm),\n         Q2.5 = Q2.5*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm),\n         Q97.5 = Q97.5*sd(Rohde_2019_data$distance_cm) + mean(Rohde_2019_data$distance_cm))\n\nactivity_line_estimates &lt;- tibble(new_data, fitted_activity) %&gt;% \n  select(line, treatment, Estimate) %&gt;% \n  mutate(treatment = if_else(treatment == 1, \"MPH\", \"SUC\"))\n\n# first lets get line means for activity in the control sucrose treatment\n\nactivity_line_means &lt;- activity_line_estimates %&gt;%\n  filter(treatment == \"SUC\") %&gt;% \n  mutate(Trait = \"activity.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height), following 24 hrs of exposure to a 5% sucrose solution diet. Higher values indicate more active flies.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# now get line means for activity in the mph treatment\n\nactivity_mph_line_means &lt;- activity_line_estimates %&gt;%\n  filter(treatment == \"MPH\") %&gt;% \n  mutate(Trait = \"activity.MPH.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height), following 24 hrs of exposure to a 5% sucrose solution diet, supplemented with MPH (1.5 mg ml^-1). MPH, methylphenidate, is a drug used to treat attention-deficit/hyperactivity disorder (ADHD) in humans. Higher values indicate more active flies.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# now lets get means for the effect of mph on movement by getting the difference between treatments\n\nSUC_activity &lt;- \n  activity_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(SUC_estimate = trait_value)\n\nmph_activity &lt;- \n  activity_mph_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(mph_estimate = trait_value)\n\nactivity_estimates_diff &lt;-\n  left_join(SUC_activity, mph_activity) %&gt;% \n  mutate(Estimate = mph_estimate - SUC_estimate)\n\nmph_effect_line_means &lt;- activity_estimates_diff %&gt;%\n  mutate(Trait = \"MPH.effect.on.activity.m\",\n         Sex = \"Male\",\n         Reference = \"Rohde et al (2019) Genetics\",\n         `Trait guild` = \"Drug response\",\n         `Trait description` = \"Mean difference in distance moved during a 10-min trial in a circular arena (16mm diameter x 6mm height) between flies fed a control 5% sucrose solution and a 5% sucrose solution supplemented with 1.5 mg ml^-1 methylphenidate (MPH). MPH is a drug used to treat the symptoms of attention-deficit/hyperactivity disorder (ADHD) in humans. Positive values indicate greater activity when flies were supplemented with MPH.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\nRohde_traits &lt;- rbind(activity_line_means,\n                      activity_mph_line_means,\n                      mph_effect_line_means)\n\n\n\n\n\nThis is mainly data wrangling. We find the mean from two data points for each line simply via the mean() function.\n\n\nShow the code\nEverett_2020_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Everett_microbiome_2020.csv\") \n\nmicrobiome_line_means &lt;- \n  Everett_2020_data %&gt;% \n  pivot_longer(!`Microbial Species`, names_to = \"line\", values_to = \"trait_value\") %&gt;% \n  mutate(Sex = if_else(str_detect(line, \"F\"), \"Female\", \"Male\"),\n         line = str_remove(line, \"_F1\"),\n         line = str_remove(line, \"_F2\"),\n         line = str_remove(line, \"_M1\"),\n         line = str_remove(line, \"_M2\")) %&gt;% \n  group_by(`Microbial Species`, line, Sex) %&gt;% \n  summarise(trait_value = mean(trait_value)) %&gt;% \n  mutate( Reference = \"Everett et al (2020) Genome Research\",\n          `Trait guild` = \"Microbiome\",\n          `Trait description` = \"Mean reads per million (originally Log2 normalised) values for reads from each DGRP RNA-seq sample uniquely aligning to each microbial species. Higher values indicate a greater load of the microbial species.\",\n          Trait = str_replace(`Microbial Species`, \" \", \".\"),\n          Trait_1 = if_else(str_detect(Sex, \"Female\"), \".f\", \".m\")) %&gt;% \n  unite(Trait, Trait, Trait_1, sep = \"\", remove = TRUE) %&gt;%\n  ungroup() %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(Trait, line, Sex)\n\n\n\n\n\nNote that I havenât included Wolbachia status in the model.\n\n\nShow the code\nChapman_2020_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Chapman_2020.csv\") %&gt;% \n   mutate(line = as.factor(Line),\n          Treatment = as.factor(Treatment),\n          Date = as.factor(Date))\n\n\nE.faecalis_model &lt;- brm(Alive_at_day5 | trials(number_infected) ~ 1 + Infector + Date + (1|Vial) + (1|line),\n                       data = Chapman_2020_data, family = binomial(),\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/E.faecalis.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(E.faecalis_model)\n\n# set the fixed effects in the new data for which we will derive predictions to the reference levels in the model i.e. Infector = jo and Date = `5/3/17`\n\nnew_data &lt;-\n  tibble(line = Chapman_2020_data$line,\n         number_infected = 1,\n         Infector = \"Jo\",\n         Date = '5/3/17') %&gt;% \n  distinct(line, number_infected, Infector, Date) \n\n\nfitted_E.faecalis &lt;- fitted(E.faecalis_model,\n       newdata = new_data,\n       re_formula = Alive_at_day5 | trials(number_infected) ~ (1|line)) %&gt;% \n  as_tibble()\n\nE.faecalis_line_means &lt;- tibble(new_data, fitted_E.faecalis) %&gt;%\n  mutate(Trait = \"E.faecalis.resistance.m\",\n         Sex = \"Male\",\n         Reference = \"Chapman et al (2020) Genes\",\n         `Trait guild` = \"Pathogen response\",\n         `Trait description` = \"Mean proportion of adult flies that were alive 5 days after infection with the bacterial pathogen E. faecalis. Higher values indicate greater resistance to E. faecalis\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\nLine means are provided for the non-metabolome traits in the supplementary material. Raw data are provided for the metabolome traits, which we model below.\nThere are 453 metabolites. We need a quick and easy way to model these and find line means. To do this, we fit relatively simple gaussian models with Sex as a fixed effect (where this is applicable) and line as a random effect, with a sex-specific intercept.\nFive traits show no genetic variation in one of the sexes; that is, each line has the same value. We do not model these, but still need to model the trait for the sex that shows genetic variation. We fit a very similar model, except without the sex fixed effect.\n\n\nShow the code\nZhou_data &lt;- \n  read_csv(\"data/data_collation/input/Raw_data_files/Zhou_2020.csv\") %&gt;% \n  select(-c(`SUB PATHWAY`, `METABOLITE  ID`, PLATFORM, `CHEMICAL ID`,\n            `RETENTION INDEX`, MASS, CAS, PUBCHEM, KEGG, `CLIENT IDENTIFIER`)) %&gt;% \n  pivot_longer(cols = 3:242, names_to = \"ID\", values_to = \"Trait_value\") %&gt;% \n  separate(ID, into = c(\"Line\", \"Sex\", \"Rep\"), sep = \"-\", remove = TRUE) %&gt;% \n  mutate(line = as.factor(Line), Sex = as.factor(Sex)) %&gt;% \n  select(-Line) %&gt;% \n  # standardise\n  group_by(METABOLITE, Sex) %&gt;% \n  mutate(st_trait_value = my_scale(Trait_value)) %&gt;% \n  ungroup() %&gt;%\n  # some traits have the same value for every line; these can't be standardised because the SD = 0. We remove these traits from the dataset\n  filter(st_trait_value != \"NaN\")\n  \n\n# this is our model outline, based on one random metabolite. We can then update this model with new data (for another metabolite) to model every trait, which is advantageous because it prevents brms needing to recompile every time. With the model already compiled we can simply update the data, which saves a lot of time.\n\ndata &lt;- Zhou_data %&gt;% filter(METABOLITE == \"xanthurenate\")\n\nRun_function &lt;- FALSE # Change this to TRUE to re-run the models\n\nif(Run_function){\n  model_outline &lt;- brm(data = data,\n                       st_trait_value ~ 1 + Sex + (Sex|line),\n                       family = gaussian,\n                       prior = c(prior(normal(0, 0.5), class = Intercept),\n                                 prior(normal(0, 0.5), class = b),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, \n                       cores = 4, seed = 1, control = list(adapt_delta = 0.95, \n                                                           max_treedepth = 12))\n}\n\n## Now make a function to run a model for each trait and get the posterior line means for each sex \n\nmetabolite_modeller &lt;- function(selected_trait){\n  \n  data &lt;- Zhou_data %&gt;% filter(METABOLITE == selected_trait)\n  \n  model &lt;- update(model_outline, newdata = data) # same model, but with new data each time\n  \nfitted_new_data &lt;-\n  tibble(line = data$line,\n         Sex = data$Sex,\n         Trait = data$METABOLITE,\n         `Trait guild` = \"Metabolome\",\n         `Trait description` = \"Metabolites identified by mass spectrometry with scaled measurement for each sample (100 flies, replicated three times). Data were scaled to account for run-day blocks. Higher values indicate greater quantities.\",\n         Reference = \"Zhou et al (2020) Genome Research\") %&gt;% \n  distinct(line, Trait, Sex, `Trait guild`, `Trait description`, Reference)\n\n\nfitted_metabolite &lt;- fitted(model,\n       newdata = fitted_new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(trait_value = Estimate*sd(data$Trait_value) + mean(data$Trait_value),\n         Q2.5 = Q2.5*sd(data$Trait_value) + mean(data$Trait_value),\n         Q97.5 = Q97.5*sd(data$Trait_value) + mean(data$Trait_value))\n\nmetabolite_line_estimates &lt;- tibble(fitted_new_data, fitted_metabolite) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"),\n         Trait = if_else(Sex == \"Female\", paste(Trait, \"f\", sep = \".\"), paste(Trait, \"m\", sep = \".\")))\n  \n}\n\n# create a list of all trait to iterate our function over\n\nBoth_sexes &lt;-\n  Zhou_data %&gt;% \n  distinct(METABOLITE, Sex) %&gt;%\n  group_by(METABOLITE) %&gt;% \n  summarise(n = n()) %&gt;% \n  filter(n &gt; 1)\n\ntrait_list_both_sexes &lt;- Both_sexes$METABOLITE\n\n## Now make a function to run a model for each trait and get the posterior line means for traits only measured in a single sex\n\nmetabolite_modeller_single_sex &lt;- function(selected_trait){\n  \n  data &lt;- Zhou_data %&gt;% filter(METABOLITE == selected_trait)\n  \n  model &lt;- update(model_outline, newdata = data,\n                  st_trait_value ~ 1 + (1|line),\n                  family = gaussian,\n                  prior = c(prior(normal(0, 0.5), class = Intercept),\n                            prior(exponential(1), class = sd))) # same model, but with new data each time\n  \n  fitted_new_data &lt;-\n    tibble(line = data$line,\n           Sex = data$Sex,\n           Trait = data$METABOLITE,\n           `Trait guild` = \"Metabolome\",\n           `Trait description` = \"Metabolites identified by mass spectrometry with scaled measurement for each sample (100 flies, replicated three times). Data were scaled to account for run-day blocks. Higher values indicate greater quantities.\",\n           Reference = \"Zhou et al (2020) Genome Research\") %&gt;% \n    distinct(line, Trait, Sex, `Trait guild`, `Trait description`, Reference)\n  \n  \n  fitted_metabolite &lt;- fitted(model,\n                              newdata = fitted_new_data) %&gt;% \n    as_tibble() %&gt;%\n    # now we need to convert back to response scale (note I don't convert Est.Error)\n    mutate(trait_value = Estimate*sd(data$Trait_value) + mean(data$Trait_value),\n           Q2.5 = Q2.5*sd(data$Trait_value) + mean(data$Trait_value),\n           Q97.5 = Q97.5*sd(data$Trait_value) + mean(data$Trait_value))\n  \n  metabolite_line_estimates &lt;- tibble(fitted_new_data, fitted_metabolite) %&gt;% \n    select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n    mutate(Sex = if_else(Sex == \"F\", \"Female\", \"Male\"),\n           Trait = if_else(Sex == \"Female\", paste(Trait, \"f\", sep = \".\"), paste(Trait, \"m\", sep = \".\")))\n  \n}\n\n# create trait list to run function over\n\nSingle_sex &lt;-\n  Zhou_data %&gt;% \n  distinct(METABOLITE, Sex) %&gt;%\n  group_by(METABOLITE) %&gt;% \n  summarise(n = n()) %&gt;% \n  filter(n == 1)\n\ntrait_list_single_sex &lt;- Single_sex$METABOLITE\n\n# Run the models\n\nif(Run_function){\n  \n  models_both_sexes &lt;- map_dfr(trait_list_both_sexes, metabolite_modeller) # map_dfr returns a data frame created by row-binding each output\n  \n  models_single_sex &lt;- map_dfr(trait_list_single_sex, metabolite_modeller_single_sex)\n  \n  Zhou_line_means &lt;-\n    rbind(models_both_sexes,\n          models_single_sex)\n  \n  Zhou_line_means %&gt;% \n    write_csv(\"data/data_collation/output/Zhou_line_means.csv\")\n} else {\n  Zhou_line_means &lt;- read_csv(\"data/data_collation/output/Zhou_line_means.csv\") %&gt;% \n    mutate(Trait = str_replace_all(Trait, \"[/]\", \"_\"),\n           Trait = str_remove(Trait, \"[*]\"))  # replace invalid names\n}\n\n\n\n\n\nThe authors treat temperature as a continuous variable. But they only have measures at 3 temperatures, so we choose to consider temperature as an ordered predictor, following Solomon Kurzâs translation of McElreath (2020) to the brms framework. This approach results in an improved model fit.\n\n\nShow the code\nZwoinska_male_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Zwoinska_2020/Zwoinska_males_2020.csv\") %&gt;% \n  rename(line = DGRP) %&gt;% \n  mutate(line = as.factor(line),\n         Batch = as.factor(Batch),\n         Temperature_new = recode(Temperature,\n                                  \"25\" = 1,\n                                  \"27\" = 2,\n                                  \"29\" = 3) %&gt;% \n           as.integer())\n\n\nfertility_male_model_ordered &lt;-\n  brm(Larvae ~ 1 + mo(Temperature_new) + (mo(Temperature_new)|line),\n      data = Zwoinska_male_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(dirichlet(2, 2), class = simo, coef = moTemperature_new1),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 4000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/fertility_male.model_ordered\")\n\n\nnew_data &lt;-\n  tibble(line = Zwoinska_male_data$line,\n         Temperature_new = Zwoinska_male_data$Temperature_new,\n         Batch = 1) %&gt;% \n  distinct(line, Temperature_new, Batch)\n\n\nfitted_male_fertility &lt;- fitted(fertility_male_model_ordered,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nfertility_m_line_estimates &lt;- tibble(new_data, fitted_male_fertility) %&gt;% \n  mutate(.keep = \"unused\", \n            Temperature = recode(Temperature_new,\n                                  \"1\" = 25,\n                                  \"2\" = 27,\n                                  \"3\" = 29)) \n\n# build a function to create the line means tibbles\n\nZwoinska_line_means &lt;- function(estimates, value, Trait, sex, description){\n  estimates %&gt;%\n  filter(Temperature == value) %&gt;% \n  mutate(Trait = Trait,\n         Sex = sex,\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Life history\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nfertility_25C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"25\", \"fertility.25C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 25C. Higher values indicates greater fertility.\")\n\nfertility_27C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"27\", \"fertility.27C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 27C. Higher values indicates greater fertility\")\n\nfertility_29C_m_line_means &lt;- Zwoinska_line_means(fertility_m_line_estimates, \"29\", \"fertility.29C.m\", \"Male\", \"Mean proportion of males that produced viable larvae. Males were reared at 29C. Higher values indicates greater fertility\")\n\n# we need a plasticity measure\n\n## The code below uses the slope estimated by the model for each line as the plasticity measure.\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). The line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\nfertility_m_temp_effect_line_means &lt;- as_draws_df(fertility_male_model_ordered) %&gt;% \n  select(starts_with(\"r_line\") & contains(\"moTemperature\")) %&gt;% \n  gather() %&gt;% \n  group_by(key) %&gt;%\n  # the trait in question is plasticity, which is measured by the line specific random slope between treatments - we can get this straight from our posterior samples, without adding anything else \n  summarise(mean = mean(value) %&gt;% round(digits = 2)) %&gt;% \n  mutate(line = str_remove(key, \"r_line\")) %&gt;% \n  mutate(line = str_remove(line, \",moTemperature_new\")) %&gt;% \n  mutate(line = gsub(\"\\\\[|\\\\]\", \"\", line),\n         Trait = \"fertility.thermal.susceptibility.m\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Male\",\n         `Trait description` = \"Mean slope of the change in male fertility (the proportion of males that produced viable larvae), between 25C, 27C and 29C rearing conditions. Lower slope values indicate a greater decrease in fertility with an increase in temperature. This is a measure of thermal susceptibility.\",\n         trait_value = mean\n  ) %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Slopes are hard to interpret, so we also provide this data in a different format. Below we calculate the change in fertility between 25C and 29C for each line. Greater values indicate a greater loss in fertility. Note this approach produces a very similar line ordering to the above approach\n\nnew_data &lt;-\n  new_data %&gt;% \n  mutate(ID = paste0(\"V\", 1:372))\n  \n\nfitted_male_fertility &lt;- fitted(fertility_male_model_ordered,\n       newdata = new_data, summary = F) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = everything(), names_to = \"ID\", values_to = \"Estimate\")\n\nfitted_male_fertility &lt;- right_join(new_data, fitted_male_fertility) %&gt;% \n  as_tibble %&gt;% \n  select(-ID)\n\n# Different numbers of lines have been phenotyped for fertility in the 25C and 29C conditions. The code below finds the lines that are measured in one temp but not the other and removes them. We then find the difference in fertility between 25 and 29C conditions\n\na &lt;- \n  fitted_male_fertility %&gt;% \n  filter(Temperature_new == 1, line != \"38\" & line != \"83\" & line != \"395\", line != \"707\" & line != \"727\") %&gt;%\n  rename(Temp25 = Estimate)\n\nc &lt;- \n  fitted_male_fertility %&gt;%\n  filter(Temperature_new == 3, line != \"911\") %&gt;%\n  rename(Temp29 = Estimate) %&gt;%\n  select(-c(Temperature_new, Batch, line))\n\n#a_line &lt;- a %&gt;% distinct(line) \n#c_line &lt;- c %&gt;% distinct(line) # we remove the line column in the above code to make binding possible. This line of code will therefore not work, but it has already done its job.\n\n#anti_join(a_line, c_line) # this line finds the lines present in the a_line vector but not in the b_line vector\n#anti_join(c_line, a_line) # this line finds the lines present in the b_line vector but not in the a_line vector\n\n\nbackup_approach &lt;- cbind(a, c) %&gt;% \n  as_tibble() %&gt;% \n  mutate(fertility_diff = Temp25 - Temp29) %&gt;% \n  group_by(line) %&gt;% \n  summarise(trait_value = mean(fertility_diff)) %&gt;% \n  mutate(Trait = \"fertility.thermal.susceptibility.m\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Male\",\n         `Trait description` = \"Mean change in male fertility (the proportion of males that produced viable larvae), between 25C and 29C rearing conditions. Higher values indicate a greater decrease in fertility. This is a measure of thermal susceptibility or thermal plasticity in fertility.\") %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(-trait_value)\n\n\n# female fertility\n\nZwoinska_female_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Zwoinska_2020/Zwoinska_females_2020.csv\") %&gt;% \n  rename(line = DGRP) %&gt;% \n  mutate(line = as.factor(line),\n         Batch = as.factor(Batch),\n         Temperature_new = recode(Temperature,\n                                  \"25\" = 1,\n                                  \"27\" = 2,\n                                  \"29\" = 3) %&gt;% \n           as.integer())\n\n\n\nfertility_female_model_ordered &lt;-\n  brm(Larvae ~ 1 + mo(Temperature_new) + (mo(Temperature_new)|line),\n      data = Zwoinska_female_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(dirichlet(2, 2), class = simo, coef = moTemperature_new1),\n                prior(exponential(1), class = sd)),\n      family = bernoulli,\n      cores = 4, chains = 4, iter = 4000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/fertility_female.model_ordered\")\n\n\nnew_data &lt;-\n  tibble(line = Zwoinska_female_data$line,\n         Temperature_new = Zwoinska_female_data$Temperature_new,\n         Batch = 1) %&gt;% \n  distinct(line, Temperature_new, Batch)\n\n\nfitted_female_fertility &lt;- fitted(fertility_female_model_ordered,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\nfertility_f_line_estimates &lt;- tibble(new_data, fitted_female_fertility) %&gt;% \n    mutate(.keep = \"unused\", \n            Temperature = recode(Temperature_new,\n                                  \"1\" = 25,\n                                  \"2\" = 27,\n                                  \"3\" = 29)) \n\nfertility_25C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"25\", \"fertility.25C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 25C. Higher values indicates greater fertility.\")\n\nfertility_27C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"27\", \"fertility.27C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 27C. Higher values indicates greater fertility\")\n\nfertility_29C_f_line_means &lt;- Zwoinska_line_means(fertility_f_line_estimates, \"29\", \"fertility.29C.f\", \"Female\", \"Mean proportion of females that produced viable larvae. Females were reared at 29C. Higher values indicates greater fertility\")\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). Once again, the line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\n# we need a plasticity measure\n\n## The code below uses the slope estimated by the model for each line as the plasticity measure.\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). The line rankings produced here are very similar to the slopes estimates presented in Table S1 in Zwoinska et al (2020).\n\nfertility_f_temp_effect_line_means &lt;- as_draws_df(fertility_female_model_ordered) %&gt;% \n  select(starts_with(\"r_line\") & contains(\"moTemperature\")) %&gt;% \n  gather() %&gt;% \n  group_by(key) %&gt;%\n  # the trait in question is plasticity, which is measured by the line specific random slope between treatments - we can get this straight from our posterior samples, without adding anything else \n  summarise(mean = mean(value) %&gt;% round(digits = 2)) %&gt;% \n  mutate(line = str_remove(key, \"r_line\")) %&gt;% \n  mutate(line = str_remove(line, \",moTemperature_new\")) %&gt;% \n  mutate(line = gsub(\"\\\\[|\\\\]\", \"\", line),\n         Trait = \"fertility.thermal.susceptibility.f\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Female\",\n         `Trait description` = \"Mean slope of the change in female fertility (the proportion of males that produced viable larvae), between 25C, 27C and 29C rearing conditions. Lower slope values indicate a greater decrease in fertility with an increase in temperature. This is a measure of thermal susceptibility.\",\n         trait_value = mean\n  ) %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(trait_value)\n\n# Slopes are hard to interpret, so we also provide this data in a different format. Below we calculate the change in fertility between 25C and 29C for each line. Greater values indicate a greater loss in fertility. Note this approach produces a very similar line ordering to the bove approach\n\nnew_data &lt;-\n  new_data %&gt;% \n  mutate(ID = paste0(\"V\", 1:120))\n  \n\nfitted_female_fertility &lt;- fitted(fertility_female_model_ordered,\n       newdata = new_data, summary = F) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = everything(), names_to = \"ID\", values_to = \"Estimate\")\n\nfitted_female_fertility &lt;- right_join(new_data, fitted_female_fertility) %&gt;% \n  as_tibble %&gt;% \n  select(-ID)\n\n# phenotypes for all 40 lines are measured so no fancy steps for binding are needed\n\na_female &lt;- \n  fitted_female_fertility %&gt;% \n  filter(Temperature_new == 1) %&gt;%\n  rename(Temp25 = Estimate)\n\nc_female &lt;- \n  fitted_female_fertility %&gt;%\n  filter(Temperature_new == 3) %&gt;%\n  rename(Temp29 = Estimate) %&gt;%\n  select(-c(Temperature_new, Batch, line))\n\n\nbackup_approach &lt;- cbind(a_female, c_female) %&gt;% \n  as_tibble() %&gt;% \n  mutate(fertility_diff = Temp25 - Temp29) %&gt;% \n  group_by(line) %&gt;% \n  summarise(trait_value = mean(fertility_diff)) %&gt;% \n  mutate(Trait = \"fertility.thermal.susceptibility.f\",\n         Reference = \"Zwoinska et al (2020) Frontiers in Genetics\",\n         `Trait guild` = \"Temperature related\",\n         Sex = \"Female\",\n         `Trait description` = \"Mean change in female fertility (the proportion of males that produced viable larvae), between 25C and 29C rearing conditions. Higher values indicate a greater decrease in fertility. This is a measure of thermal susceptibility or thermal plasticity in fertility.\") %&gt;%\n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(-trait_value)\n\n\n# combine all the data from this study into a simple dataframe\n\nZwoinska_traits &lt;- rbind(fertility_25C_m_line_means,\n                         fertility_27C_m_line_means,\n                         fertility_29C_m_line_means,\n                         fertility_m_temp_effect_line_means,\n                         fertility_25C_f_line_means,\n                         fertility_27C_f_line_means,\n                         fertility_29C_f_line_means,\n                         fertility_f_temp_effect_line_means)\n\n\n\n\n\n\n\nShow the code\nChowdhury_2021_aggressive_lunges &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Chowdhury_2021_aggression.csv\") %&gt;% \n  mutate(line = as.factor(line))\n\n\naggression_model &lt;- brm(agressive.lunges.per.20mins.m ~ 1 + (1|line),\n                       data = Chowdhury_2021_aggressive_lunges, family = zero_inflated_poisson(),\n                       prior = c(prior(normal(3, 0.5), class = Intercept),\n                                 prior(exponential(1), class = sd)),\n                       iter = 6000, warmup = 2000, chains = 4, cores = 4,\n                       seed = 2, file = \"fits/raw_data_fits/aggression.model\",\n                       control = list(adapt_delta = 0.9, max_treedepth = 10))\n\n #pp_check(aggression_model)\n\n\nnew_data &lt;-\n  tibble(line = Chowdhury_2021_aggressive_lunges$line) %&gt;% \n  distinct(line)\n\nfitted_aggression &lt;- fitted(aggression_model,\n       newdata = new_data) %&gt;% \n  as_tibble()\n\n\n\naggression_m_line_means &lt;- tibble(new_data, fitted_aggression) %&gt;%\n  mutate(Trait = \"aggression.2021.m\",\n         Sex = \"Male\",\n         Reference = \"Chowdhury et al Nature Communications Biology\",\n         `Trait guild` = \"Behavioural\",\n         `Trait description` = \"Mean number of aggressive lunges made in 20 min window following removal of a divider, by pairs of DGRP males of same genotype. Trials were run after males were kept isolated for five days. Higher values indicate more aggressive males.\",\n         trait_value = Estimate) %&gt;% \n  mutate(line = str_remove(line, \"RAL-\")) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\n\n\n\n\n\nShow the code\nWatanabe_climbing_data &lt;- read_csv(\"data/data_collation/input/Raw_data_files/Watanabe_Riddle_2021.csv\") %&gt;% \n  rename(line = Line) %&gt;% \n  mutate(line = str_remove(line, \"line_\"),\n         line = as.factor(line),\n         Vial = as.factor(Vial))\n\n# Females\n\nWatanabe_female_data &lt;-\n  Watanabe_climbing_data %&gt;% \n  filter(Sex == \"F\") %&gt;% \n  mutate(# standardise\n    st_Climbing = my_scale(Climbing))\n\nclimbing_female_model &lt;-\n  brm(st_Climbing ~ 1 +  Treatment + (1|Vial) + (Treatment|line),\n      data = Watanabe_female_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = gaussian,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.9, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/climbing_female.model\")\n\nnew_data &lt;-\n  tibble(line = Watanabe_female_data$line,\n         Treatment = Watanabe_female_data$Treatment,\n         Vial = 1) %&gt;% \n  distinct(line, Treatment, Vial)\n\n\nfitted_female_climbing &lt;- fitted(climbing_female_model,\n       newdata = new_data) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing),\n         Q2.5 = Q2.5*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing),\n         Q97.5 = Q97.5*sd(Watanabe_female_data$Climbing) + mean(Watanabe_female_data$Climbing))\n\nclimbing_f_line_estimates &lt;- tibble(new_data, fitted_female_climbing)\n\n# build a function to create the line means tibbles\n\nWatanabe_line_means &lt;- function(estimates, value, Trait, sex, description){\n  estimates %&gt;%\n  filter(Treatment == value) %&gt;% \n  mutate(Trait = Trait,\n         Sex = sex,\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` =\"Activity\",\n         `Trait description` = description,\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n}\n\nclimbing_f_line_means &lt;- Watanabe_line_means(climbing_f_line_estimates, \"C\", \"climbing.f\", \"Female\", \"Mean climbing index, following five days of standard conditions. Higher values indicate greater climbing ability.\")\n\nclimbing_post_exercise_f_line_means &lt;- Watanabe_line_means(climbing_f_line_estimates, \"T\", \"climbing.post.exercise.f\", \"Female\", \"Mean climbing index, following five days consecutive days of forced exercise (two hours a day). Higher values indicate greater climbing ability.\")\n\n# get predictions from the model for each line (note fitted() isn't used, instead we grab the estimates straight from the models posterior). Once again, the line rankings produced here are very similar to the slopes estimates presented in Watanabe and Riddle (2021).\n\n# Now get the difference between treatments\n\ncontrol_climbing_f &lt;- \n  climbing_f_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(control_estimate = trait_value)\n\nexercise_climbing_f &lt;- \n  climbing_post_exercise_f_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(exercise_estimate = trait_value)\n\nclimbing_estimates_diff &lt;-\n  left_join(control_climbing_f, exercise_climbing_f) %&gt;% \n  mutate(Estimate = exercise_estimate - control_estimate)\n\nclimbing_f_exercise_effect_line_means &lt;- climbing_estimates_diff %&gt;%\n  mutate(Trait = \"climbing.exercise.effect.f\",\n         Sex = \"Female\",\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean change in the climbing ability of adults, between flies that were and were not exposed to exercise five days previously. Positive values indicate an increase in climbing ability with exercise.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n# males\n\nWatanabe_male_data &lt;-\n  Watanabe_climbing_data %&gt;% \n  filter(Sex == \"M\") %&gt;% \n  mutate(# standardise\n    st_Climbing = my_scale(Climbing))\n\nclimbing_male_model &lt;-\n  brm(st_Climbing ~ 1 +  Treatment + (1|Vial) + (Treatment|line),\n      data = Watanabe_male_data,\n      prior = c(prior(normal(0, 0.5), class = Intercept),\n                prior(normal(0, 0.5), class = b),\n                prior(exponential(1), class = sd)),\n      family = gaussian,\n      cores = 4, chains = 4, iter = 6000, warmup = 2000,\n      control = list(adapt_delta = 0.99, max_treedepth = 10),\n      seed = 1, file = \"fits/raw_data_fits/climbing_male.model\")\n\n#pp_check(climbing_male_model)\n\nnew_data &lt;-\n  tibble(line = Watanabe_male_data$line,\n         Treatment = Watanabe_male_data$Treatment,\n         Vial = 1) %&gt;% \n  distinct(line, Treatment, Vial)\n\n\nfitted_male_climbing &lt;- fitted(climbing_male_model,\n       newdata = new_data,\n       allow_new_levels = TRUE) %&gt;% \n  as_tibble() %&gt;%\n  # now we need to convert back to response scale (note I don't convert Est.Error)\n  mutate(Estimate = Estimate*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing),\n         Q2.5 = Q2.5*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing),\n         Q97.5 = Q97.5*sd(Watanabe_male_data$Climbing) + mean(Watanabe_male_data$Climbing))\n\nclimbing_m_line_estimates &lt;- tibble(new_data, fitted_male_climbing)\n\nclimbing_m_line_means &lt;- Watanabe_line_means(climbing_m_line_estimates, \"C\", \"climbing.m\", \"Male\", \"Mean climbing index, following five days of standard conditions. Higher values indicate greater climbing ability.\")\n\nclimbing_post_exercise_m_line_means &lt;- Watanabe_line_means(climbing_m_line_estimates, \"T\", \"climbing.post.exercise.m\", \"Male\", \"Mean climbing index, following five days consecutive days of forced exercise (two hours a day). Higher values indicate greater climbing ability.\")\n\n# Now get the difference between treatments\n\ncontrol_climbing_m &lt;- \n  climbing_m_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(control_estimate = trait_value)\n\nexercise_climbing_m &lt;- \n  climbing_post_exercise_m_line_means %&gt;% \n  select(line, trait_value) %&gt;% \n  rename(exercise_estimate = trait_value)\n\nclimbing_estimates_diff_m &lt;-\n  left_join(control_climbing_m, exercise_climbing_m) %&gt;% \n  mutate(Estimate = exercise_estimate - control_estimate)\n\nclimbing_m_exercise_effect_line_means &lt;- climbing_estimates_diff_m %&gt;%\n  mutate(Trait = \"climbing.exercise.effect.m\",\n         Sex = \"Male\",\n         Reference = \"Watanabe and Riddle (2021) Royal Society Open Science\",\n         `Trait guild` = \"Activity\",\n         `Trait description` = \"Mean change in the climbing ability of adults, between flies that were and were not exposed to exercise five days previously. Positive values indicate an increase in climbing ability with exercise.\",\n         trait_value = Estimate) %&gt;% \n  select(line, Trait, Sex, trait_value, `Trait guild`, `Trait description`, Reference) %&gt;% \n  arrange(line)\n\n\nWatanabe_traits &lt;- rbind(climbing_f_line_means,\n                         climbing_f_exercise_effect_line_means,\n                         climbing_post_exercise_f_line_means,\n                         climbing_m_line_means,\n                         climbing_m_exercise_effect_line_means,\n                         climbing_post_exercise_m_line_means)"
  },
  {
    "objectID": "Get_line_means_from_raw_data.html#combine-and-save-all-the-estimated-line-means",
    "href": "Get_line_means_from_raw_data.html#combine-and-save-all-the-estimated-line-means",
    "title": "Estimating line means from raw data",
    "section": "",
    "text": "Show the code\nestimated_line_means &lt;-\n  rbind(Jumbo_traits,\n        Grubbs_traits,\n        Dobson_traits,\n        Gaertner_traits,\n        caffeine_resistance_line_means,\n        Appel_traits,\n        Munoz_traits,\n        Freda_2017_traits,\n        boric_acid_line_means,\n        Dean_traits,\n        Duneau_traits,\n        Palmer_traits,\n        Teets_traits,\n        Everman_traits,\n        Freda_2019_traits,\n        Pitchers_traits,\n        Rohde_traits,\n        microbiome_line_means,\n        E.faecalis_line_means,\n        Zhou_line_means,\n        Zwoinska_traits,\n        aggression_m_line_means,\n        Watanabe_traits)\n\nmeta_data &lt;- \n  left_join(by = \"Trait\",\n            estimated_line_means %&gt;% \n              select(Trait, Sex, `Trait guild`, `Trait description`, Reference) %&gt;% \n              distinct(),\n            read_csv(\"data/data_collation/input/Raw_data_files/Life_stage_screen.csv\")\n  ) %&gt;% \n  mutate(Life_stage = case_when(Life_stage == \"Juvenile\" ~ \"Juvenile\",\n                                is.na(Life_stage) ~ \"Adult\"))\n\ntrait_data &lt;- estimated_line_means %&gt;% \n  select(-Sex, -`Trait guild`, -`Trait description`, -Reference) \n\nwrite_csv(trait_data, \"data/data_collation/output/dgrp_phenos_calculated_from_raw_data.csv\")\nwrite_csv(meta_data, \"data/data_collation/output/dgrp_phenos_calculated_from_raw_data_meta_data.csv\")"
  }
]